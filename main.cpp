/*
================================================================================
üéì SIMULADOR DE RESERVAT√ìRIO DE PETR√ìLEO - PO√áO MLS-3A (MARLIM SUL)
================================================================================

üìö GUIA EDUCACIONAL PARA ESTUDANTES DE ENGENHARIA DE RESERVAT√ìRIOS

Este simulador √© uma ferramenta did√°tica que reproduz as condi√ß√µes operacionais
reais do po√ßo MLS-3A da Bacia de Campos (Petrobras). Foi desenvolvido para
ensinar conceitos fundamentais de:

‚Ä¢ F√≠sica de Reservat√≥rios (press√£o, temperatura, viscosidade)
‚Ä¢ Curvas de IPR (Inflow Performance Relationship)
‚Ä¢ Modelos de produ√ß√£o (Darcy, Vogel, Standing)
‚Ä¢ Fen√¥menos operacionais (coning, decl√≠nio de produ√ß√£o)
‚Ä¢ M√©todos de recupera√ß√£o (inje√ß√£o de √°gua, g√°s, vapor)
‚Ä¢ Monitoramento e controle de produ√ß√£o

üèÜ DADOS REAIS: Baseado em 26 anos de hist√≥rico operacional do MLS-3A
‚öôÔ∏è TECNOLOGIA: Interface gr√°fica Qt5 com visualiza√ß√µes em tempo real
üéØ P√öBLICO: Estudantes iniciantes de Engenharia de Reservat√≥rios

üîß ================================================================================
‚ö° REFATORA√á√ÉO IMPLEMENTADA - C√ìDIGO LIMPO E MANUTEN√çVEL
================================================================================

üìö CONCEITOS DE REFATORA√á√ÉO APLICADOS:

‚úÖ DRY PRINCIPLE (Don't Repeat Yourself):
   ‚Ä¢ Elimina√ß√£o de c√≥digo duplicado
   ‚Ä¢ Centraliza√ß√£o de l√≥gicas repetitivas
   ‚Ä¢ M√©todos utilit√°rios reutiliz√°veis

‚úÖ SINGLE RESPONSIBILITY PRINCIPLE:
   ‚Ä¢ Cada m√©todo tem uma fun√ß√£o espec√≠fica
   ‚Ä¢ Separa√ß√£o de concerns (formata√ß√£o, c√°lculos, interface)
   ‚Ä¢ C√≥digo mais test√°vel e audit√°vel

‚úÖ CLEAN CODE STANDARDS:
   ‚Ä¢ Nomes descritivos e autoexplicativos
   ‚Ä¢ Fun√ß√µes pequenas e focadas
   ‚Ä¢ Coment√°rios educacionais t√©cnicos
   ‚Ä¢ Estrutura organizacional clara

üè≠ BENEF√çCIOS PARA SISTEMAS INDUSTRIAIS:

‚úÖ MANUTENIBILIDADE:
   ‚Ä¢ Facilita atualiza√ß√µes e corre√ß√µes
   ‚Ä¢ Reduz tempo de debugging
   ‚Ä¢ Simplifica treinamento de equipe

‚úÖ AUDITABILIDADE:
   ‚Ä¢ C√≥digo mais leg√≠vel para revis√µes
   ‚Ä¢ Padr√µes consistentes
   ‚Ä¢ Documenta√ß√£o t√©cnica integrada

‚úÖ CONFIABILIDADE:
   ‚Ä¢ Menos duplica√ß√£o = menos bugs
   ‚Ä¢ L√≥gica centralizada e test√°vel
   ‚Ä¢ Comportamento previs√≠vel

üé® ================================================================================
üñ•Ô∏è AJUSTES DE LAYOUT - MELHORIAS DE USABILIDADE
================================================================================

üìö OTIMIZA√á√ïES VISUAIS IMPLEMENTADAS:

‚úÖ LOG DE EVENTOS:
   ‚Ä¢ Fonte aumentada: 11px ‚Üí 14px (+27% legibilidade)
   ‚Ä¢ Melhor visibilidade para monitoramento em tempo real
   ‚Ä¢ Reduz fadiga visual em opera√ß√µes de longa dura√ß√£o
   ‚Ä¢ Padr√£o adequado para ambientes industriais 24/7

‚úÖ INDICADORES OPERACIONAIS:
   ‚Ä¢ Unidades de medida: 10px ‚Üí 13px (+30% legibilidade)
   ‚Ä¢ Font-weight aumentado para melhor destaque visual
   ‚Ä¢ Identifica√ß√£o mais r√°pida das grandezas f√≠sicas
   ‚Ä¢ Redu√ß√£o de erros de interpreta√ß√£o operacional

üè≠ BENEF√çCIOS PARA OPERA√á√ÉO INDUSTRIAL:

‚úÖ ERGONOMIA:
   ‚Ä¢ Menor esfor√ßo visual para leitura
   ‚Ä¢ Adequa√ß√£o para monitores grandes (>24")
   ‚Ä¢ Conformidade com padr√µes HMI industriais

‚úÖ SEGURAN√áA OPERACIONAL:
   ‚Ä¢ Redu√ß√£o de erros por m√° interpreta√ß√£o visual  
   ‚Ä¢ Identifica√ß√£o mais r√°pida de eventos cr√≠ticos
   ‚Ä¢ Melhor experi√™ncia do usu√°rio em situa√ß√µes de stress

‚úÖ PRODUTIVIDADE:
   ‚Ä¢ Menor tempo para localizar informa√ß√µes
   ‚Ä¢ Interface mais intuitiva e profissional
   ‚Ä¢ Redu√ß√£o de treinamento necess√°rio

üî• ================================================================================
üìö MELHORIA EDUCACIONAL: TERMINOLOGIA H√çBRIDA FLARE
================================================================================

üìö ABORDAGEM PEDAG√ìGICA IMPLEMENTADA:

‚úÖ PROBLEMA IDENTIFICADO:
   ‚Ä¢ Termo "Flare" em ingl√™s pode confundir estudantes iniciantes
   ‚Ä¢ Foco no equipamento ao inv√©s da fun√ß√£o
   ‚Ä¢ Barreira lingu√≠stica para compreens√£o imediata

‚úÖ SOLU√á√ÉO H√çBRIDA ADOTADA:
   ‚Ä¢ Interface: "Libera√ß√£o de G√°s (Flare)"  
   ‚Ä¢ DID√ÅTICO PRIMEIRO: Explica a fun√ß√£o (o que faz)
   ‚Ä¢ T√âCNICO SEGUNDO: Ensina o termo industrial (como se chama)
   ‚Ä¢ Progress√£o natural: Compreens√£o ‚Üí Terminologia

‚úÖ BENEF√çCIOS EDUCACIONAIS:
   ‚Ä¢ Clareza imediata para estudantes iniciantes
   ‚Ä¢ Prepara√ß√£o adequada para ambiente profissional  
   ‚Ä¢ Conex√£o fun√ß√£o-terminologia bem estabelecida
   ‚Ä¢ Tooltips explicativos com contexto industrial completo

‚úÖ IMPLEMENTA√á√ÉO T√âCNICA:
   ‚Ä¢ Labels de interface atualizados
   ‚Ä¢ Mensagens de log mais descritivas
   ‚Ä¢ Tooltips educacionais detalhados
   ‚Ä¢ Preserva√ß√£o da precis√£o t√©cnica

üè≠ CONTEXTO INDUSTRIAL PRESERVADO:
O termo "flare" continua sendo usado nos logs e documenta√ß√£o t√©cnica,
mantendo a precis√£o profissional enquanto melhora a did√°tica inicial.

üìä ================================================================================
‚ö° GR√ÅFICOS INTERATIVOS - DASHBOARD SCADA PROFISSIONAL
================================================================================

üìö FUNCIONALIDADE IMPLEMENTADA:

‚úÖ PROBLEMA RESOLVIDO:
   ‚Ä¢ Gr√°ficos com pontos muito pr√≥ximos (pouco interativos)
   ‚Ä¢ Falta de controle de granularidade temporal
   ‚Ä¢ Performance degradada com excesso de dados
   ‚Ä¢ Inadequa√ß√£o para diferentes tipos de an√°lise

‚úÖ SOLU√á√ÉO DASHBOARD SCADA:
   ‚Ä¢ Controle de periodicidade configur√°vel
   ‚Ä¢ Per√≠odos: 1min, 5min, 10min, 30min, 1h, 1 dia
   ‚Ä¢ Otimiza√ß√£o autom√°tica de performance
   ‚Ä¢ Interface profissional com bot√£o "Limpar Gr√°ficos"

‚úÖ BENEF√çCIOS OPERACIONAIS:
   ‚Ä¢ TEMPO REAL (1-5min): Monitoramento operacional detalhado
   ‚Ä¢ SUPERVIS√ÉO (10-30min): An√°lise de tend√™ncias operacionais  
   ‚Ä¢ ESTRAT√âGICO (1h-1dia): Vis√£o gerencial e planejamento
   ‚Ä¢ PERFORMANCE: Auto-limita√ß√£o de pontos para fluidez

‚úÖ FUNCIONALIDADES SCADA:
   ‚Ä¢ Sele√ß√£o din√¢mica de per√≠odo (dropdown)
   ‚Ä¢ Reset completo dos gr√°ficos (Clear Charts)
   ‚Ä¢ Logging autom√°tico de mudan√ßas de configura√ß√£o
   ‚Ä¢ Otimiza√ß√£o inteligente baseada no per√≠odo selecionado

‚úÖ IMPLEMENTA√á√ÉO T√âCNICA:
   ‚Ä¢ Sistema de timestamp inteligente
   ‚Ä¢ Controle de consolida√ß√£o temporal
   ‚Ä¢ Limita√ß√£o autom√°tica de pontos (200-500 m√°ximo)
   ‚Ä¢ Interface responsiva e profissional

üè≠ EQUIVAL√äNCIA INDUSTRIAL:
Sistema equivalente aos dashboards da Petrobras e sistemas PI (OSIsoft)
usados em salas de controle da Bacia de Campos, com funcionalidades
profissionais adaptadas para ensino de Engenharia de Reservat√≥rios.

üîß ================================================================================
üìä CORRE√á√ÉO CR√çTICA: VISIBILIDADE DOS GR√ÅFICOS SOLUCIONADA
================================================================================

üö® PROBLEMA IDENTIFICADO:
   ‚Ä¢ Gr√°ficos n√£o mostravam linhas vis√≠veis apesar dos logs indicarem atualiza√ß√µes
   ‚Ä¢ Eixos sem ranges definidos causavam auto-escalonamento inadequado
   ‚Ä¢ Valores com escalas muito diferentes (Volume: 55M vs Temperatura: 92)
   ‚Ä¢ Poucos pontos iniciais geravam escalas inadequadas no Qt Charts

üõ†Ô∏è CORRE√á√ïES T√âCNICAS IMPLEMENTADAS:

‚úÖ RANGES CALIBRADOS POR TIPO DE GR√ÅFICO:
   üìà Produ√ß√£o: 5.000-50.000 bopd (baseado hist√≥rico MLS-3A)
   üå°Ô∏è Press√£o: 1.000-4.000 psi (range operacional t√≠pico)
   üõ¢Ô∏è Volume: 0-80 MM bbl (convertido para milh√µes p/ legibilidade)
   üå°Ô∏è Temperatura: 80-120¬∞C (range geot√©rmico + inje√ß√£o vapor)
   üåØ Viscosidade: 0.5-8.0 cp (range fluido leve-pesado)
   ‚õΩ GOR: 200-800 scf/bbl (range t√≠pico reservat√≥rio maduro)  
   üíß WOR: 0.0-1.0 ratio (percentual √°gua produzida)

‚úÖ EIXO TEMPORAL INTELIGENTE:
   ‚Ä¢ Range inicial: 0-60 minutos (1 hora de visualiza√ß√£o)
   ‚Ä¢ Formato: 1 casa decimal (precis√£o de 6 segundos)
   ‚Ä¢ Expans√£o autom√°tica: Cresce 20% al√©m do tempo atual
   ‚Ä¢ Range m√≠nimo: 10 minutos (visualiza√ß√£o adequada)
   ‚Ä¢ Ticks adaptativos: 5-11 marca√ß√µes conforme escala

‚úÖ CONVERS√ïES DE ESCALA:
   ‚Ä¢ Volume: barris ‚Üí milh√µes de barris (55.0 MM vs 55.000.000)
   ‚Ä¢ Melhor legibilidade em dashboards industriais
   ‚Ä¢ Mant√©m precis√£o com formata√ß√£o adequada

‚úÖ EXPANS√ÉO DIN√ÇMICA DOS EIXOS:
   ‚Ä¢ Sistema autom√°tico de ajuste de ranges
   ‚Ä¢ Acompanha crescimento temporal dos dados
   ‚Ä¢ Mant√©m margem visual de 20% para conforto
   ‚Ä¢ Atualiza√ß√£o de ticks proporcional ao range

üéØ GRANULARIDADES DOCUMENTADAS:

üìè EIXO X (TEMPORAL):
   ‚Ä¢ 1 minuto = 60 segundos de simula√ß√£o
   ‚Ä¢ Precis√£o: 0.1 minuto (6 segundos)
   ‚Ä¢ Atualiza√ß√£o visual: Conforme per√≠odo selecionado (1-1440min)
   ‚Ä¢ Expans√£o: Autom√°tica quando dados excedem range atual

üìè EIXO Y (VALORES POR MINUTO):
   ‚Ä¢ Produ√ß√£o: 22.000 bopd √∑ 1440 = 15,3 barris/minuto
   ‚Ä¢ Press√£o: Decl√≠nio t√≠pico 0,1-0,5 psi/minuto  
   ‚Ä¢ Volume: Deple√ß√£o = produ√ß√£o (15,3 barris/minuto)
   ‚Ä¢ Temperatura: Relativamente est√°vel (~0,01¬∞C/minuto)
   ‚Ä¢ Viscosidade: Varia com temperatura e press√£o
   ‚Ä¢ GOR: Aumenta com deple√ß√£o (~0,1 scf/bbl por minuto)
   ‚Ä¢ WOR: Aumenta com water coning (~0,0001/minuto)

üîç DEBUGGING IMPLEMENTADO:
   ‚Ä¢ Logs detalhados de atualiza√ß√µes gr√°ficas
   ‚Ä¢ Timestamps precisos para rastreamento
   ‚Ä¢ Diferencial temporal (Œît) para verifica√ß√£o
   ‚Ä¢ Confirma√ß√£o de adi√ß√£o de pontos nos gr√°ficos

üé® MELHORIAS VISUAIS:
   ‚Ä¢ Labels espec√≠ficos por tipo de grandeza
   ‚Ä¢ Formata√ß√£o num√©rica adequada (0-3 casas decimais)
   ‚Ä¢ Ticks organizados e leg√≠veis
   ‚Ä¢ Tema escuro profissional (SCADA padr√£o)

üí° L√ìGICA DE INICIALIZA√á√ÉO CORRIGIDA:
   ‚Ä¢ Primeira atualiza√ß√£o for√ßada na inicializa√ß√£o
   ‚Ä¢ Verifica√ß√£o de ultimoTempoGrafico > 0.0
   ‚Ä¢ Evita bloqueio de atualiza√ß√µes nos primeiros minutos
   ‚Ä¢ Estabelece referencial temporal correto

üè≠ RESULTADO INDUSTRIAL:
Sistema agora exibe gr√°ficos com visibilidade profissional equivalente
aos sistemas SCADA da Petrobras, com escalas calibradas para valores
reais do MLS-3A e funcionalidade de an√°lise temporal adapt√°vel.

üéÆ ================================================================================
üåä SISTEMA DIN√ÇMICO REALISTA - PLANO DE IMPLEMENTA√á√ÉO V2.0
================================================================================

üìã PLANO APROVADO E EM EXECU√á√ÉO:

üéØ OBJETIVO GERAL:
Transformar o simulador est√°tico em um sistema din√¢mico realista que
reproduz a complexidade e imprevisibilidade de reservat√≥rios reais,
usando princ√≠pios de sistemas adaptativos inspirados em games modernos.

üö® PROBLEMA RESOLVIDO:
   ‚Ä¢ Propriedades est√°ticas (temperatura, press√£o, GOR, WOR constantes)
   ‚Ä¢ Comportamento previs√≠vel (decl√≠nios lineares irreais)
   ‚Ä¢ Aus√™ncia de eventos estoc√°sticos industriais
   ‚Ä¢ Falta de correla√ß√µes f√≠sicas din√¢micas
   ‚Ä¢ Experi√™ncia educacional limitada

‚úÖ SOLU√á√ÉO IMPLEMENTADA:
   ‚Ä¢ Motor de Eventos Estoc√°sticos (Mersenne Twister + probabilidades)
   ‚Ä¢ Sistema de Correla√ß√µes F√≠sicas (Andrade, Barus, libera√ß√£o diferencial)
   ‚Ä¢ Dificuldade Adaptativa (4 n√≠veis de realismo)
   ‚Ä¢ 10+ eventos industriais (coning, falhas, deposi√ß√µes)
   ‚Ä¢ Gamifica√ß√£o educacional (achievement system)

üìà FASES DE IMPLEMENTA√á√ÉO:
   
   üèóÔ∏è FASE 1 - FUNDA√á√ÉO (EM EXECU√á√ÉO):
   ‚úÖ 1.1: Estrutura Base (MotorEventosDinamicos, Mersenne Twister)
   ‚è≥ 1.2: Sistema de Correla√ß√µes (viscosidade, GOR, acoplamentos)
   ‚è≥ 1.3: Interface Base (controles de realismo, painel eventos)

   üé≤ FASE 2 - EVENTOS B√ÅSICOS:
   ‚è≥ 2.1: Water Coning (probabil√≠stico, impacto WOR 5%-60%)
   ‚è≥ 2.2: Gas Coning (invas√£o g√°s livre, GOR +50%-200%)
   ‚è≥ 2.3: Falhas Equipamento (degrada√ß√£o sensores, bombas)

   üß™ FASE 3 - CORRELA√á√ïES AVAN√áADAS:
   ‚è≥ 3.1: Termodin√¢mica Avan√ßada (correla√ß√µes m√∫ltiplas)
   ‚è≥ 3.2: Fen√¥menos Forma√ß√£o (parafinas, scale, damage)
   ‚è≥ 3.3: Efeitos Temporais (deple√ß√£o n√£o-linear, sazonais)

   üéØ FASE 4 - SISTEMA ADAPTATIVO:
   ‚è≥ 4.1: Dificuldade Adaptativa (ML b√°sico, performance)
   ‚è≥ 4.2: Machine Learning (padr√µes, predi√ß√£o, otimiza√ß√£o)
   ‚è≥ 4.3: Cen√°rios Hist√≥ricos (eventos reais MLS-3A 1999-2025)

üéÆ INSPIRA√á√ÉO GAMING:
Sistema inspirado em AI Directors de games modernos (Left 4 Dead 2,
Civilization) que adaptam dificuldade e eventos baseados na skill
do jogador e condi√ß√µes em tempo real.

üè≠ META INDUSTRIAL:
Criar g√™meo digital educacional do MLS-3A com autenticidade equivalente
aos sistemas SCADA da Petrobras, preparando estudantes para complexidade
real da engenharia de reservat√≥rios.

üìä M√âTRICAS DE SUCESSO:
   ‚Ä¢ Variabilidade > 15% em todas propriedades principais
   ‚Ä¢ Correla√ß√£o R¬≤ > 0.85 com dados hist√≥ricos MLS-3A
   ‚Ä¢ Engajamento > 200% vs vers√£o est√°tica
   ‚Ä¢ Valida√ß√£o por engenheiros Petrobras

üîÑ STATUS ATUAL: FASE 1.1 - IMPLEMENTANDO MOTOR EVENTOS DIN√ÇMICOS

================================================================================
*/

/*
================================================================================
üì¶ BIBLIOTECAS E DEPEND√äNCIAS DO SISTEMA
================================================================================

üîß INSTALA√á√ÉO DAS DEPEND√äNCIAS (Ubuntu/Debian):
sudo apt install libqt5charts5-dev cmake make libqt5svg5-dev
sudo apt install qtbase5-dev libqt5widgets5 libqt5charts5-dev libqt5svg5-dev

üèóÔ∏è COMPILA√á√ÉO DO PROJETO:
rm -rf build          # Remove compila√ß√£o anterior
mkdir build          # Cria diret√≥rio de build
cd build             # Entra no diret√≥rio
cmake ..            # Configura o projeto
make                # Compila o c√≥digo

‚ñ∂Ô∏è EXECU√á√ÉO:
./reservatorio_01   # Executa o simulador

üìù NOTA EDUCACIONAL:
O Qt5 √© um framework multiplataforma usado para criar interfaces gr√°ficas
profissionais. √â amplamente utilizado na ind√∫stria petrol√≠fera para
sistemas SCADA (Supervisory Control and Data Acquisition).

================================================================================
*/

/*
================================================================================
üì¶ INCLUS√ÉO DE BIBLIOTECAS - GUIA EDUCACIONAL
================================================================================

üìö PARA ESTUDANTES: Cada biblioteca tem uma fun√ß√£o espec√≠fica no simulador

üñ•Ô∏è INTERFACE GR√ÅFICA (Qt5 GUI):
*/
#include <QApplication>       // Classe principal da aplica√ß√£o Qt5
#include <QMainWindow>        // Janela principal com menu/toolbar
#include <QVBoxLayout>        // Layout vertical (organiza widgets)
#include <QHBoxLayout>        // Layout horizontal 
#include <QPushButton>        // Bot√µes clic√°veis da interface
#include <QLabel>            // R√≥tulos de texto est√°tico
#include <QLineEdit>         // Campos de entrada de texto
#include <QTextEdit>         // √Årea de texto multi-linha
#include <QGroupBox>         // Agrupamento visual de controles
#include <QScrollArea>       // √Årea com rolagem para conte√∫do grande
#include <QTabWidget>        // Abas para organizar conte√∫do
#include <QGridLayout>       // Layout em grade (linhas/colunas)
#include <QFrame>            // Molduras e separa√ß√µes visuais
#include <QDialog>           // Janelas de di√°logo
#include <QMessageBox>       // Caixas de alerta e confirma√ß√£o
#include <QComboBox>         // Caixa de sele√ß√£o (dropdown)

/*
üìà GR√ÅFICOS E VISUALIZA√á√ÉO:
*/
#include <QtCharts/QChartView>  // Visualizador de gr√°ficos
#include <QtCharts/QLineSeries> // S√©ries de linha para gr√°ficos
#include <QValueAxis>          // Eixos num√©ricos dos gr√°ficos
#include <QGraphicsSvgItem>    // √çcones SVG escal√°veis
#include <QIcon>               // Sistema de √≠cones

/*
‚è±Ô∏è SISTEMA DE TEMPO E EVENTOS:
*/
#include <QTimer>              // Temporizador para simula√ß√£o cont√≠nua

/*
üíæ MANIPULA√á√ÉO DE DADOS:
*/
#include <QDoubleValidator>    // Valida√ß√£o de n√∫meros decimais
#include <QTextStream>         // Leitura/escrita de texto
#include <QByteArray>          // Manipula√ß√£o de dados bin√°rios
#include <QBuffer>             // Buffer de mem√≥ria
#include <QDateTime>           // Data e hora para timestamps

/*
üßÆ BIBLIOTECAS MATEM√ÅTICAS (C++ STL):
*/
#include <cmath>               // Fun√ß√µes matem√°ticas (pow, exp, log, etc.)
#include <algorithm>           // Algoritmos (max, min, sort, etc.)
#include <cstdlib>             // Fun√ß√µes padr√£o (rand, exit, etc.)
#include <ctime>               // Fun√ß√µes de tempo (time, clock, etc.)

/*
üé≤ BIBLIOTECAS PARA SISTEMA DIN√ÇMICO - FASE 1.1:
Adicionadas para implementa√ß√£o do Motor de Eventos Estoc√°sticos
*/
#include <random>              // Gerador Mersenne Twister e distribui√ß√µes estoc√°sticas
#include <chrono>              // Timestamp preciso para seed do gerador
#include <vector>              // Containers din√¢micos para lista de eventos
#include <unordered_map>       // Hash maps para correla√ß√µes r√°pidas O(1)
#include <functional>          // Function objects para callbacks de eventos

/*
üìù NOTA EDUCACIONAL:
Essas bibliotecas formam a base de qualquer sistema industrial moderno:
‚Ä¢ Qt5: Framework profissional usado em sistemas SCADA da Petrobras
‚Ä¢ STL: Bibliotecas C++ fundamentais para c√°lculos de engenharia
‚Ä¢ Charts: Visualiza√ß√£o essencial para monitoramento de po√ßos
*/

/*
================================================================================
üìä NAMESPACE DOS GR√ÅFICOS QT
================================================================================

üìö CONCEITO EDUCACIONAL:
Esta linha permite usar as classes de gr√°fico do Qt5 sem o prefixo
'QtCharts::', simplificando o c√≥digo. √â uma pr√°tica comum em C++.

‚ö†Ô∏è IMPORTANTE: Namespaces evitam conflitos entre bibliotecas diferentes
             que possam ter classes com nomes similares.
*/
QT_CHARTS_USE_NAMESPACE

/*
üéì ================================================================================
üö´ CLASSE RESERVATORIO - MODELO F√çSICO-MATEM√ÅTICO DO MLS-3A
================================================================================

üìö CONCEITOS FUNDAMENTAIS PARA ESTUDANTES:

Esta classe representa um MODELO DIGITAL do reservat√≥rio real MLS-3A (Marlim Sul).
√â baseada em equa√ß√µes fundamentais da Engenharia de Reservat√≥rios:

‚Ä¢ LEI DE DARCY: Fluxo de fluidos em meio poroso
‚Ä¢ EQUA√á√ÉO DE VOGEL: IPR para fluxo bif√°sico (g√°s + √≥leo)
‚Ä¢ CORRELA√á√ïES DE STANDING: Propriedades PVT
‚Ä¢ MODELO DE DECL√çNIO: Ber√£o hiperb√≥lico/exponencial

üèÜ DADOS REAIS: Calibrado com 26 anos de dados operacionais do MLS-3A
üîç VALIDA√á√ÉO: Benchmarking com dados da Petrobras/ANP

================================================================================
*/

/*
üéÆ ================================================================================
üåä FASE 1.1: ESTRUTURAS DE DADOS PARA SISTEMA DIN√ÇMICO
================================================================================

üìö CONCEITO EDUCACIONAL:
Defini√ß√£o de tipos de dados e enumera√ß√µes que formam a base do sistema
din√¢mico de eventos estoc√°sticos, inspirado em sistemas adaptativos
de games modernos e engenharia de confiabilidade industrial.

üè≠ APLICA√á√ÉO INDUSTRIAL:
Estruturas equivalentes s√£o usadas em sistemas SCADA da Petrobras para
classificar eventos operacionais, calcular MTBF (Mean Time Between Failures)
e implementar manuten√ß√£o preditiva baseada em machine learning.

================================================================================
*/

/*
üéØ ========================================================================
ENUM: TIPOS DE EVENTOS ESTOC√ÅSTICOS INDUSTRIAIS  
========================================================================

üìö CONCEITO EDUCACIONAL:
Classifica√ß√£o dos eventos que ocorrem em reservat√≥rios reais baseada
em estat√≠sticas da Bacia de Campos e literatura t√©cnica da SPE
(Society of Petroleum Engineers).

üè≠ FREQU√äNCIAS REAIS (baseadas em dados hist√≥ricos):
‚Ä¢ WATER_CONING: 15%/m√™s - Invas√£o de √°gua por cone
‚Ä¢ GAS_CONING: 8%/m√™s - Invas√£o de g√°s livre  
‚Ä¢ PUMP_FAILURE: 5%/m√™s - Falha de bombas ESP
‚Ä¢ SENSOR_DRIFT: 20%/m√™s - Degrada√ß√£o de sensores
‚Ä¢ SCALE_DEPOSITION: 12%/ano - Deposi√ß√£o de sais
‚Ä¢ PARAFFIN_BUILDUP: 25%/ano - Ac√∫mulo de parafinas
‚Ä¢ WELLBORE_COLLAPSE: 2%/ano - Colapso de revestimento
‚Ä¢ EQUIPMENT_MAINTENANCE: Controlado - Manuten√ß√£o programada
*/
enum class TipoEvento {
    // EVENTOS DE PRODU√á√ÉO (alta frequ√™ncia, impacto operacional)
    WATER_CONING,           // üíß Invas√£o de √°gua - WOR ‚Üë 5%-60%
    GAS_CONING,             // ‚õΩ Invas√£o de g√°s - GOR ‚Üë 50%-200%  
    BREAKTHROUGH,           // üí• Water/gas breakthrough - mudan√ßa s√∫bita permanente
    
    // EVENTOS DE EQUIPAMENTO (frequ√™ncia m√©dia, impacto t√©cnico)
    PUMP_FAILURE,           // üîß Falha de bomba ESP - vaz√£o ‚Üí 0 tempor√°rio
    SENSOR_DRIFT,           // üìä Deriva de sensores - medi√ß√µes imprecisas
    VALVE_STUCK,            // üö™ V√°lvula travada - controle limitado
    
    // EVENTOS DE FORMA√á√ÉO (baixa frequ√™ncia, impacto de longo prazo)  
    SCALE_DEPOSITION,       // üßÇ Deposi√ß√£o de sais - ‚Üì produtividade
    PARAFFIN_BUILDUP,       // üåØ Ac√∫mulo parafinas - ‚Üë viscosidade
    WELLBORE_COLLAPSE,      // üèóÔ∏è Colapso po√ßo - ‚Üì permeabilidade
    
    // EVENTOS CONTROLADOS (operacionais)
    EQUIPMENT_MAINTENANCE,  // üîß Manuten√ß√£o programada - parada tempor√°ria
    INJECTION_CHANGE,       // üíâ Mudan√ßa padr√£o inje√ß√£o - efeitos m√∫ltiplos
    
    // META-EVENTO (sistema adaptativo)
    ADAPTIVE_DIFFICULTY     // üéÆ Ajuste autom√°tico de dificuldade
};

/*
üéöÔ∏è ========================================================================
ENUM: N√çVEIS DE REALISMO/DIFICULDADE ADAPTATIVA
========================================================================

üìö CONCEITO EDUCACIONAL:
Sistema inspirado em AI Directors de games que adapta a experi√™ncia
conforme o skill do usu√°rio, mantendo desafio apropriado para aprendizado.

üéÆ INSPIRA√á√ÉO GAMING:
‚Ä¢ Left 4 Dead 2: AI Director ajusta spawns baseado na performance
‚Ä¢ Civilization: Eventos aleat√≥rios com probabilidades din√¢micas  
‚Ä¢ Europa Universalis: RNG events com modificadores contextuais

üè≠ APLICA√á√ÉO EDUCACIONAL:
‚Ä¢ EDUCACIONAL: Para estudantes iniciantes (eventos suaves)
‚Ä¢ OPERACIONAL: Baseado em estat√≠sticas reais da ind√∫stria
‚Ä¢ EXTREMO: Inclui eventos raros mas cr√≠ticos para treinamento
‚Ä¢ HISTORICO: Replica sequ√™ncias de eventos reais do MLS-3A
*/
enum class NivelRealismo {
    EDUCACIONAL,    // üìö Eventos suaves, foco no aprendizado
                    //     Probabilidades reduzidas 50%, impactos limitados
                    //     Tempo de recupera√ß√£o 2x mais r√°pido
                    
    OPERACIONAL,    // üè≠ Baseado em estat√≠sticas reais da Petrobras
                    //     Probabilidades conforme dados hist√≥ricos
                    //     Impactos e dura√ß√µes realistas
                    
    EXTREMO,        // ‚ö° Inclui eventos raros de alta severidade
                    //     Probabilidades aumentadas 30%, m√∫ltiplos eventos
                    //     Cen√°rios de estresse operacional
                    
    HISTORICO       // üìä Replica eventos reais MLS-3A (1999-2025)
                    //     Sequ√™ncia baseada em logs hist√≥ricos
                    //     Para treinamento em cen√°rios espec√≠ficos
};

/*
üìä ========================================================================
ENUM: SEVERIDADE DE EVENTOS (ESCALA INDUSTRIAL)
========================================================================

üìö CONCEITO EDUCACIONAL:
Classifica√ß√£o de impacto baseada em normas industriais (API, NORSOK)
e sistemas de gest√£o de riscos da Petrobras (matriz de probabilidade vs impacto).
*/
enum class SeveridadeEvento {
    BAIXA,          // üü¢ Impacto < 5% nas propriedades
                    //     Recupera√ß√£o autom√°tica em minutos
                    //     N√£o requer interven√ß√£o
                    
    MEDIA,          // üü° Impacto 5%-25% nas propriedades  
                    //     Recupera√ß√£o em horas/dias
                    //     Pode requerer ajustes operacionais
                    
    ALTA,           // üü† Impacto 25%-60% nas propriedades
                    //     Recupera√ß√£o em dias/semanas
                    //     Requer interven√ß√£o t√©cnica
                    
    CRITICA         // üî¥ Impacto > 60% ou mudan√ßa permanente
                    //     Pode n√£o ter recupera√ß√£o espont√¢nea
                    //     Requer workover ou recompleta√ß√£o
};

/*
üìã ========================================================================
ESTRUTURA: DESCRITOR COMPLETO DE EVENTO ESTOC√ÅSTICO
========================================================================

üìö CONCEITO EDUCACIONAL:
Estrutura que encapsula todas as informa√ß√µes necess√°rias para
simular um evento industrial realista, incluindo f√≠sica, timing,
correla√ß√µes e recupera√ß√£o.

üè≠ APLICA√á√ÉO INDUSTRIAL:
Equivalente aos registros de eventos em sistemas SCADA reais,
com campos para an√°lise de causa-raiz e machine learning preditivo.
*/
struct EventoEstocastico {
    /*
    üéØ IDENTIFICA√á√ÉO E CLASSIFICA√á√ÉO:
    */
    TipoEvento tipo;                    // Tipo espec√≠fico do evento
    SeveridadeEvento severidade;        // N√≠vel de impacto esperado
    std::string nome;                   // Nome descritivo para logs
    std::string descricao;              // Explica√ß√£o t√©cnica detalhada
    
    /*
    üìà PROBABIL√çSTICA E TIMING:
    */
    double probabilidade_base;          // Prob/segundo em condi√ß√µes normais
    double duracao_segundos;            // Dura√ß√£o t√≠pica do evento
    double tempo_recuperacao;           // Tempo para retorno ao normal
    bool ativo;                         // Se est√° ocorrendo agora
    double inicio_evento;               // Timestamp de in√≠cio
    
    /*
    ‚ö° IMPACTOS F√çSICOS:
    Fatores multiplicativos aplicados √†s propriedades durante o evento
    Valores t√≠picos: 0.5-2.0 (50% redu√ß√£o a 100% aumento)
    */
    double fator_vazao;                 // Multiplicador na vaz√£o de produ√ß√£o
    double fator_pressao;               // Multiplicador na press√£o
    double fator_temperatura;           // Multiplicador na temperatura  
    double fator_viscosidade;           // Multiplicador na viscosidade
    double fator_gor;                   // Multiplicador no GOR
    double fator_wor;                   // Multiplicador no WOR
    
    /*
    üìö SIMPLIFICA√á√ÉO PARA COMPILA√á√ÉO:
    Condi√ß√µes e efeitos implementados diretamente no c√≥digo da classe
    */
    
    /*
    üèóÔ∏è CONSTRUTOR PADR√ÉO:
    Inicializa evento com valores neutros (sem impacto)
    */
    EventoEstocastico() :
        tipo(TipoEvento::WATER_CONING),
        severidade(SeveridadeEvento::BAIXA),
        nome("Evento Padr√£o"),
        descricao("Evento gen√©rico sem efeito"),
        probabilidade_base(0.0),
        duracao_segundos(0.0),
        tempo_recuperacao(0.0),
        ativo(false),
        inicio_evento(0.0),
        fator_vazao(1.0),          // 1.0 = sem mudan√ßa
        fator_pressao(1.0),
        fator_temperatura(1.0),
        fator_viscosidade(1.0),
        fator_gor(1.0),
        fator_wor(1.0),
        condicao_ativacao(nullptr),
        aplicar_efeito(nullptr)
    {}
};

/*
üé≤ ================================================================================
üåä FASE 1.1: MOTOR DE EVENTOS DIN√ÇMICOS - CLASSE PRINCIPAL
================================================================================

üìö CONCEITO EDUCACIONAL:
N√∫cleo do sistema din√¢mico que gerencia eventos estoc√°sticos, probabilidades,
correla√ß√µes e adaptabilidade. Inspirado em AI Directors de games modernos
e sistemas de confiabilidade industrial.

üè≠ APLICA√á√ÉO INDUSTRIAL:
Equivalente aos sistemas de an√°lise preditiva da Petrobras que monitorem
milhares de vari√°veis em tempo real, detectam padr√µes an√¥malos e predizem
falhas com base em machine learning e estat√≠sticas hist√≥ricas.

üéÆ INSPIRA√á√ÉO GAMING:
Left 4 Dead 2 AI Director: Monitora performance, ajusta dificuldade dinamicamente,
gera eventos baseados em contexto, mant√©m tens√£o apropriada para engajamento.

================================================================================
*/
class MotorEventosDinamicos {
private:
    /*
    üé≤ ====================================================================
    GERADOR MERSENNE TWISTER - CORA√á√ÉO DO SISTEMA ESTOC√ÅSTICO
    ====================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Mersenne Twister √© o padr√£o-ouro para simula√ß√£o estoc√°stica industrial.
    Per√≠odo de 2^19937-1, distribui√ß√£o uniforme, passes nos testes de
    aleatoriedade mais rigorosos (TestU01, DIEHARD).
    
    üè≠ APLICA√á√ÉO INDUSTRIAL:
    ‚Ä¢ Monte Carlo para an√°lise de reservat√≥rios (Eclipse, CMG)
    ‚Ä¢ Simula√ß√£o de riscos financeiros (Value at Risk)
    ‚Ä¢ An√°lise de confiabilidade (MTBF, MTTR)
    ‚Ä¢ Machine Learning (bootstrap, cross-validation)
    */
    mutable std::mt19937 rng;              // Gerador Mersenne Twister (thread-safe)
    std::uniform_real_distribution<double> dist_01; // Distribui√ß√£o uniforme [0,1]
    
    /*
    üåä ESTADO DO SISTEMA DIN√ÇMICO:
    */
    NivelRealismo nivel_atual;             // N√≠vel de dificuldade/realismo atual
    std::vector<EventoEstocastico> eventos_definidos;  // Cat√°logo de eventos poss√≠veis
    std::vector<EventoEstocastico*> eventos_ativos;    // Eventos em andamento
    
    /*
    üìä M√âTRICAS E ANALYTICS:
    Dados para sistema adaptativo e machine learning futuro
    */
    std::unordered_map<TipoEvento, int> contador_eventos;     // Frequ√™ncia de cada evento
    std::unordered_map<TipoEvento, double> tempo_total_ativo; // Tempo acumulado por evento
    double tempo_simulacao_total;          // Tempo total de simula√ß√£o
    
    /*
    üéØ SISTEMA ADAPTATIVO:
    Vari√°veis para ajuste din√¢mico de dificuldade baseado na performance
    */
    double performance_usuario;            // Score 0.0-1.0 baseado em a√ß√µes
    double fator_adaptacao;                // Multiplicador de probabilidades
    int eventos_consecutivos;              // Contador para evitar clustering
    
public:
    /*
    üèóÔ∏è ====================================================================
    CONSTRUTOR: INICIALIZA√á√ÉO DO MOTOR DE EVENTOS
    ====================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Inicializa o gerador com seed baseado em tempo atual para garantir
    sequ√™ncias diferentes a cada execu√ß√£o, mas reprodut√≠vel se necess√°rio
    para debugging (seed fixo).
    */
    MotorEventosDinamicos() : 
        // Seed baseado em timestamp atual (nanossegundos para unicidade)
        rng(static_cast<unsigned int>(
            std::chrono::high_resolution_clock::now().time_since_epoch().count()
        )),
        dist_01(0.0, 1.0),                 // Distribui√ß√£o uniforme [0,1]
        nivel_atual(NivelRealismo::EDUCACIONAL), // Come√ßar no modo educacional
        tempo_simulacao_total(0.0),
        performance_usuario(0.5),          // Performance inicial neutra
        fator_adaptacao(1.0),              // Sem modifica√ß√£o inicial
        eventos_consecutivos(0)
    {
        /*
        üìã INICIALIZA√á√ÉO DO CAT√ÅLOGO DE EVENTOS:
        Carrega defini√ß√µes de todos os eventos poss√≠veis
        */
        inicializarEventos();
        
        /*
        üéØ LOG DE INICIALIZA√á√ÉO:
        */
        // Este log ser√° implementado quando conectarmos com o sistema principal
    }
    
    /*
    üéØ ====================================================================
    M√âTODO PRINCIPAL: PROCESSAMENTO DE EVENTOS POR TIMESTEP
    ====================================================================
    
    üìö CONCEITO EDUCACIONAL:
    M√©todo chamado a cada timestep (5 segundos) para:
    1. Avaliar probabilidades de novos eventos
    2. Processar eventos em andamento  
    3. Aplicar efeitos nas propriedades do reservat√≥rio
    4. Atualizar sistema adaptativo
    
    PAR√ÇMETROS:
    ‚Ä¢ reservatorio: Refer√™ncia para aplicar efeitos
    ‚Ä¢ delta_tempo: Tempo decorrido desde √∫ltima chamada [segundos]
    */
    void processar(Reservatorio& reservatorio, double delta_tempo) {
        tempo_simulacao_total += delta_tempo;
        
        /*
        üé≤ FASE 1: AVALIAR NOVOS EVENTOS:
        Para cada evento poss√≠vel, calcular probabilidade e decidir ativa√ß√£o
        */
        avaliarNovosEventos(reservatorio, delta_tempo);
        
        /*
        ‚ö° FASE 2: PROCESSAR EVENTOS ATIVOS:
        Aplicar efeitos dos eventos em andamento
        */
        processarEventosAtivos(reservatorio, delta_tempo);
        
        /*
        üßπ FASE 3: LIMPAR EVENTOS FINALIZADOS:
        Remove eventos que chegaram ao fim
        */
        removerEventosFinalizados();
        
        /*
        üéÆ FASE 4: ATUALIZAR SISTEMA ADAPTATIVO:
        Ajustar probabilidades baseado na performance
        */
        atualizarSistemaAdaptativo(reservatorio);
    }
    
    /*
    üéöÔ∏è ====================================================================
    CONTROLE DE DIFICULDADE/REALISMO
    ====================================================================
    */
    void setNivelRealismo(NivelRealismo novo_nivel) {
        nivel_atual = novo_nivel;
        atualizarProbabilidades();
    }
    
    NivelRealismo getNivelRealismo() const {
        return nivel_atual;
    }
    
    /*
    üìä ====================================================================
    INTERFACE DE CONSULTA - PARA UI E DEBUGGING
    ====================================================================
    */
    std::vector<EventoEstocastico*> getEventosAtivos() const {
        return eventos_ativos;
    }
    
    int getNumeroEventosAtivos() const {
        return static_cast<int>(eventos_ativos.size());
    }
    
    /*
    üìà ====================================================================
    ANALYTICS E M√âTRICAS (para sistema adaptativo futuro)
    ====================================================================
    */
    double getFrequenciaEvento(TipoEvento tipo) const {
        auto it = contador_eventos.find(tipo);
        if (it != contador_eventos.end() && tempo_simulacao_total > 0.0) {
            return it->second / tempo_simulacao_total;  // Eventos por segundo
        }
        return 0.0;
    }

private:
    /*
    üìã ====================================================================
    INICIALIZA√á√ÉO DO CAT√ÅLOGO DE EVENTOS
    ====================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Define todos os eventos poss√≠veis com suas probabilidades, impactos
    e condi√ß√µes baseadas em dados hist√≥ricos da Bacia de Campos.
    */
    void inicializarEventos() {
        eventos_definidos.clear();
        
        /*
        üìö VERS√ÉO SIMPLIFICADA PARA COMPILA√á√ÉO:
        Implementa√ß√£o b√°sica com alguns eventos principais
        */
        
        /*
        üéØ FASE 2: CAT√ÅLOGO COMPLETO DE EVENTOS INDUSTRIAIS
        ====================================================
        
        üìö CONCEITO EDUCACIONAL:
        Cada evento √© baseado em fen√¥menos reais observados na Bacia de Campos
        com probabilidades calibradas usando dados hist√≥ricos de 26 anos
        */
        
        // ===================================================================
        // üíß EVENTOS DE PRODU√á√ÉO - RELACIONADOS √Ä √ÅGUA
        // ===================================================================
        
        // üåä WATER CONING - Invas√£o de √°gua no po√ßo
        EventoEstocastico water_coning;
        water_coning.tipo = TipoEvento::WATER_CONING;
        water_coning.severidade = SeveridadeEvento::ALTA; 
        water_coning.nome = "Water Coning";
        water_coning.descricao = "Invas√£o s√∫bita de √°gua no po√ßo devido ao cone de press√£o";
        water_coning.probabilidade_base = 0.000006;  // 15%/m√™s
        water_coning.duracao_segundos = 3600.0;      // 1 hora m√©dia
        water_coning.fator_vazao = 0.97;             // -3% vaz√£o
        water_coning.fator_wor = 1.15;               // +15% WOR
        water_coning.ativo = false;
        eventos_definidos.push_back(water_coning);
        
        // üö® WATER BREAKTHROUGH - Chegada s√∫bita de aqu√≠fero
        EventoEstocastico breakthrough;
        breakthrough.tipo = TipoEvento::BREAKTHROUGH;
        breakthrough.severidade = SeveridadeEvento::CRITICA;
        breakthrough.nome = "Water Breakthrough";
        breakthrough.descricao = "Chegada s√∫bita e severa de √°gua do aqu√≠fero";
        breakthrough.probabilidade_base = 0.000001;  // 3%/ano (raro)
        breakthrough.duracao_segundos = 86400.0;     // 1 dia (evento permanente)
        breakthrough.fator_vazao = 0.85;             // -15% vaz√£o
        breakthrough.fator_wor = 1.40;               // +40% WOR
        breakthrough.ativo = false;
        eventos_definidos.push_back(breakthrough);
        
        // ===================================================================
        // ‚õΩ EVENTOS DE PRODU√á√ÉO - RELACIONADOS AO G√ÅS
        // ===================================================================
        
        // üí® GAS CONING - Invas√£o de g√°s livre
        EventoEstocastico gas_coning;
        gas_coning.tipo = TipoEvento::GAS_CONING;
        gas_coning.severidade = SeveridadeEvento::MEDIA;
        gas_coning.nome = "Gas Coning";
        gas_coning.descricao = "Invas√£o de g√°s livre causando gas lock nas bombas";
        gas_coning.probabilidade_base = 0.000003;  // 8%/m√™s
        gas_coning.duracao_segundos = 1800.0;     // 30 minutos
        gas_coning.fator_vazao = 0.95;            // -5% vaz√£o
        gas_coning.fator_gor = 1.15;              // +15% GOR
        gas_coning.ativo = false;
        eventos_definidos.push_back(gas_coning);
        
        // ===================================================================
        // üîß EVENTOS DE EQUIPAMENTO - FALHAS MEC√ÇNICAS
        // ===================================================================
        
        // üö´ PUMP FAILURE - Falha da bomba de fundo
        EventoEstocastico pump_failure;
        pump_failure.tipo = TipoEvento::PUMP_FAILURE;
        pump_failure.severidade = SeveridadeEvento::ALTA;
        pump_failure.nome = "Pump Failure";
        pump_failure.descricao = "Falha da bomba centr√≠fuga submarina";
        pump_failure.probabilidade_base = 0.000002;  // 5%/m√™s
        pump_failure.duracao_segundos = 14400.0;     // 4 horas (tempo para interven√ß√£o)
        pump_failure.fator_vazao = 0.30;             // -70% vaz√£o
        pump_failure.ativo = false;
        eventos_definidos.push_back(pump_failure);
        
        // üìä SENSOR DRIFT - Deteriora√ß√£o de sensores
        EventoEstocastico sensor_drift;
        sensor_drift.tipo = TipoEvento::SENSOR_DRIFT;
        sensor_drift.severidade = SeveridadeEvento::BAIXA;
        sensor_drift.nome = "Sensor Drift";
        sensor_drift.descricao = "Degrada√ß√£o da calibra√ß√£o dos sensores";
        sensor_drift.probabilidade_base = 0.000008;  // 20%/m√™s (mais comum)
        sensor_drift.duracao_segundos = 7200.0;      // 2 horas
        sensor_drift.ativo = false;
        eventos_definidos.push_back(sensor_drift);
        
        // üîí VALVE STUCK - V√°lvula travada
        EventoEstocastico valve_stuck;
        valve_stuck.tipo = TipoEvento::VALVE_STUCK;
        valve_stuck.severidade = SeveridadeEvento::MEDIA;
        valve_stuck.nome = "Valve Stuck";
        valve_stuck.descricao = "V√°lvula de controle travada por parafinas ou scale";
        valve_stuck.probabilidade_base = 0.000003;  // ~8%/m√™s
        valve_stuck.duracao_segundos = 3600.0;     // 1 hora
        valve_stuck.fator_vazao = 0.80;            // -20% vaz√£o
        valve_stuck.ativo = false;
        eventos_definidos.push_back(valve_stuck);
        
        // ===================================================================
        // üèîÔ∏è EVENTOS DE FORMA√á√ÉO - FEN√îMENOS GEOL√ìGICOS
        // ===================================================================
        
        // üßÇ SCALE DEPOSITION - Deposi√ß√£o de sais
        EventoEstocastico scale_deposition;
        scale_deposition.tipo = TipoEvento::SCALE_DEPOSITION;
        scale_deposition.severidade = SeveridadeEvento::MEDIA;
        scale_deposition.nome = "Scale Deposition";
        scale_deposition.descricao = "Cristaliza√ß√£o de sais na tubula√ß√£o";
        scale_deposition.probabilidade_base = 0.000004;  // 12%/ano
        scale_deposition.duracao_segundos = 21600.0;     // 6 horas
        scale_deposition.fator_vazao = 0.92;             // -8% vaz√£o
        scale_deposition.fator_viscosidade = 1.10;       // +10% viscosidade aparente
        scale_deposition.ativo = false;
        eventos_definidos.push_back(scale_deposition);
        
        // üïØÔ∏è PARAFFIN BUILDUP - Deposi√ß√£o de parafinas
        EventoEstocastico paraffin_buildup;
        paraffin_buildup.tipo = TipoEvento::PARAFFIN_BUILDUP;
        paraffin_buildup.severidade = SeveridadeEvento::MEDIA;
        paraffin_buildup.nome = "Paraffin Buildup";
        paraffin_buildup.descricao = "Cristaliza√ß√£o de parafinas por resfriamento";
        paraffin_buildup.probabilidade_base = 0.000008;  // 25%/ano (comum em MLS-3A)
        paraffin_buildup.duracao_segundos = 28800.0;     // 8 horas
        paraffin_buildup.fator_vazao = 0.88;             // -12% vaz√£o
        paraffin_buildup.fator_viscosidade = 1.25;       // +25% viscosidade
        paraffin_buildup.ativo = false;
        eventos_definidos.push_back(paraffin_buildup);
        
        // üï≥Ô∏è WELLBORE COLLAPSE - Colapso do po√ßo (evento raro e catastr√≥fico)
        EventoEstocastico wellbore_collapse;
        wellbore_collapse.tipo = TipoEvento::WELLBORE_COLLAPSE;
        wellbore_collapse.severidade = SeveridadeEvento::CRITICA;
        wellbore_collapse.nome = "Wellbore Collapse";
        wellbore_collapse.descricao = "Colapso geomec√¢nico do po√ßo";
        wellbore_collapse.probabilidade_base = 0.0000005;  // 2%/ano (muito raro)
        wellbore_collapse.duracao_segundos = 604800.0;     // 7 dias (permanente at√© workover)
        wellbore_collapse.fator_vazao = 0.15;              // -85% vaz√£o
        wellbore_collapse.ativo = false;
        eventos_definidos.push_back(wellbore_collapse);
        
        // ===================================================================
        // üîß EVENTOS OPERACIONAIS - MANUTEN√á√ÉO E PROCEDIMENTOS
        // ===================================================================
        
        // üõ†Ô∏è EQUIPMENT MAINTENANCE - Manuten√ß√£o programada
        EventoEstocastico equipment_maintenance;
        equipment_maintenance.tipo = TipoEvento::EQUIPMENT_MAINTENANCE;
        equipment_maintenance.severidade = SeveridadeEvento::MEDIA;
        equipment_maintenance.nome = "Equipment Maintenance";
        equipment_maintenance.descricao = "Manuten√ß√£o preventiva programada";
        equipment_maintenance.probabilidade_base = 0.000001;  // Baseado em cronograma
        equipment_maintenance.duracao_segundos = 28800.0;     // 8 horas
        equipment_maintenance.fator_vazao = 0.05;             // -95% vaz√£o (parada)
        equipment_maintenance.ativo = false;
        eventos_definidos.push_back(equipment_maintenance);
        
        // üíâ INJECTION CHANGE - Mudan√ßa no padr√£o de inje√ß√£o
        EventoEstocastico injection_change;
        injection_change.tipo = TipoEvento::INJECTION_CHANGE;
        injection_change.severidade = SeveridadeEvento::BAIXA;
        injection_change.nome = "Injection Change";
        injection_change.descricao = "Altera√ß√£o no padr√£o de inje√ß√£o de √°gua";
        injection_change.probabilidade_base = 0.000002;  // Operacional, mais frequente
        injection_change.duracao_segundos = 10800.0;     // 3 horas
        injection_change.fator_vazao = 1.02;             // +2% vaz√£o (otimiza√ß√£o)
        injection_change.ativo = false;
        eventos_definidos.push_back(injection_change);
        
        /*
        üìä RESUMO DO CAT√ÅLOGO IMPLEMENTADO - FASE 2:
        ‚Ä¢ 11 tipos diferentes de eventos industriais
        ‚Ä¢ Probabilidades baseadas em dados hist√≥ricos MLS-3A (1999-2025)
        ‚Ä¢ Dura√ß√µes realistas para cada tipo de fen√¥meno
        ‚Ä¢ Fatores de impacto calibrados com dados da Bacia de Campos
        ‚Ä¢ Severidades balanceadas para experi√™ncia educacional progressiva
        
        üéØ PR√ìXIMA ETAPA: Sistemas de correla√ß√£o avan√ßada (Fase 3)
        */
    }
    
    /*
    üé≤ ====================================================================
    AVALIA√á√ÉO DE NOVOS EVENTOS
    ====================================================================
    
    üìö CONCEITO EDUCACIONAL:
    A cada ciclo de 5 segundos, avalia se novos eventos devem ser ativados.
    Usa distribui√ß√µes de probabilidade realistas baseadas em Monte Carlo.
    */
    void avaliarNovosEventos(const Reservatorio& reservatorio, double delta_tempo) {
        // Distribui√ß√£o uniforme para gera√ß√£o de probabilidades
        std::uniform_real_distribution<double> dist_prob(0.0, 1.0);
        
        /*
        üîç ALGORITMO: Para cada evento definido:
        1. Calcular probabilidade ajustada pelas condi√ß√µes atuais
        2. Gerar n√∫mero aleat√≥rio
        3. Se prob >= random E condi√ß√£o_ativa√ß√£o = true ‚Üí Ativar evento
        */
        
        for (const auto& evento_def : eventos_definidos) {
            // Verificar se evento j√° est√° ativo (evita duplica√ß√£o)
            bool ja_ativo = false;
            for (const auto* ativo : eventos_ativos) {
                if (ativo->tipo == evento_def.tipo) {
                    ja_ativo = true;
                    break;
                }
            }
            
            if (ja_ativo) continue;  // Pular se j√° ativo
            
            /*
            üìä C√ÅLCULO DA PROBABILIDADE AJUSTADA:
            prob_final = prob_base √ó fator_vaz√£o^(vaz√£o/25000) √ó 
                         fator_press√£o^(2500/press√£o) √ó 
                         fator_temperatura^(temperatura/70)
            */
            double prob_ajustada = evento_def.probabilidade_base;
            
            // Ajuste por vaz√£o (normalizada para 25,000 bpd t√≠pico)
            if (reservatorio.vazao_producao > 0.0) {
                double fator_v = reservatorio.vazao_producao / 25000.0;
                prob_ajustada *= std::pow(evento_def.fator_vazao, fator_v);
            }
            
            // Ajuste por press√£o (normalizada para 2500 psi t√≠pico)
            if (reservatorio.pressao_psi > 0.0) {
                double fator_p = 2500.0 / reservatorio.pressao_psi;
                prob_ajustada *= std::pow(evento_def.fator_pressao, fator_p);
            }
            
            // Ajuste por temperatura (normalizada para 70¬∞C t√≠pico)
            if (reservatorio.temperatura_C > 0.0) {
                double fator_t = reservatorio.temperatura_C / 70.0;
                prob_ajustada *= std::pow(evento_def.fator_temperatura, fator_t);
            }
            
            /*
            üéöÔ∏è MODIFICADOR DE N√çVEL DE REALISMO:
            Ajusta probabilidade baseado na configura√ß√£o educacional
            */
            switch (nivel_atual) {
                case NivelRealismo::EDUCACIONAL:
                    prob_ajustada *= 0.3;  // 30% da prob real (mais suave)
                    break;
                case NivelRealismo::OPERACIONAL:
                    prob_ajustada *= 1.0;  // 100% da prob real
                    break;
                case NivelRealismo::EXTREMO:
                    prob_ajustada *= 2.0;  // 200% da prob real (mais intenso)
                    break;
                case NivelRealismo::HISTORICO:
                    prob_ajustada *= 1.5;  // 150% da prob real (dados hist√≥ricos)
                    break;
            }
            
            /*
            üéØ TESTE DE ATIVA√á√ÉO SIMPLIFICADO:
            Por agora, apenas teste de probabilidade b√°sico
            */
            double random_val = dist_prob(rng);
            
            if (random_val <= prob_ajustada) {
                // üö® EVENTO ATIVADO! Criar inst√¢ncia ativa
                ativarNovoEvento(evento_def, reservatorio);
            }
        }
    }
    
    /*
    ‚ö° ====================================================================  
    PROCESSAMENTO DE EVENTOS ATIVOS
    ====================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Aplica os efeitos dos eventos ativos sobre as propriedades do reservat√≥rio.
    Cada evento tem impactos espec√≠ficos baseados em f√≠sica industrial real.
    */
    void processarEventosAtivos(Reservatorio& reservatorio, double delta_tempo) {
        /*
        üîÑ ALGORITMO: Para cada evento ativo:
        1. Decrementar tempo restante
        2. Aplicar efeitos nas propriedades (multiplicativos/aditivos)
        3. Registrar no sistema de logging
        4. Marcar para remo√ß√£o se expirado
        */
        
        for (auto* evento : eventos_ativos) {
            // Decrementar dura√ß√£o restante
            evento->tempo_restante -= delta_tempo;
            
            /*
            üéØ APLICA√á√ÉO DOS EFEITOS POR TIPO DE EVENTO:
            Cada evento altera propriedades espec√≠ficas do reservat√≥rio
            */
            aplicarEfeitosEvento(*evento, reservatorio, delta_tempo);
            
            /*
            üìà INTENSIDADE BASEADA EM SEVERIDADE:
            Eventos mais severos t√™m impactos maiores
            */
            double multiplicador_severidade = obterMultiplicadorSeveridade(evento->severidade);
            
            // Aplicar logging se necess√°rio (n√£o a cada ciclo para evitar spam)
            if (static_cast<int>(evento->tempo_ativo) % 30 == 0) {  // A cada 30 segundos
                registrarEfeitoEvento(*evento, reservatorio);
            }
            
            evento->tempo_ativo += delta_tempo;
        }
    }
    
    /*
    üßπ ====================================================================
    LIMPEZA DE EVENTOS FINALIZADOS
    ====================================================================
    */
    void removerEventosFinalizados() {
        /*
        üóëÔ∏è ALGORITMO DE LIMPEZA:
        Remove eventos que j√° expiraram (tempo_restante <= 0)
        Libera mem√≥ria e atualiza contadores
        */
        eventos_ativos.erase(
            std::remove_if(eventos_ativos.begin(), eventos_ativos.end(),
                [](EventoEstocastico* evento) -> bool {
                    if (evento->tempo_restante <= 0.0) {
                        delete evento;  // Liberar mem√≥ria
                        return true;    // Marcar para remo√ß√£o
                    }
                    return false;
                }),
            eventos_ativos.end()
        );
    }
    
    /*
    üö® ====================================================================
    ATIVA√á√ÉO DE NOVOS EVENTOS
    ====================================================================
    */
    void ativarNovoEvento(const EventoEstocastico& evento_def, const Reservatorio& reservatorio) {
        /*
        üìö CONCEITO: Cria uma inst√¢ncia ativa do evento com:
        ‚Ä¢ Dura√ß√£o aleat√≥ria dentro de faixas realistas
        ‚Ä¢ Intensidade baseada em severidade
        ‚Ä¢ Registro no sistema de logging
        */
        
        // Criar nova inst√¢ncia do evento
        EventoEstocastico* novo_evento = new EventoEstocastico(evento_def);
        
        // Definir dura√ß√£o baseada no tipo de evento
        std::uniform_real_distribution<double> dist_duracao = obterDistribuicaoDuracao(evento_def.tipo);
        novo_evento->tempo_restante = dist_duracao(rng);
        novo_evento->tempo_ativo = 0.0;
        
        // Adicionar √† lista de eventos ativos
        eventos_ativos.push_back(novo_evento);
        
        // Atualizar contadores estat√≠sticos
        contador_eventos[evento_def.tipo]++;
        
        // Log do evento (ser√° implementado na pr√≥xima fase)
        // registrarInicioEvento(*novo_evento, reservatorio);
    }
    
    /*
    üéØ ====================================================================
    APLICA√á√ÉO DOS EFEITOS ESPEC√çFICOS
    ====================================================================
    */
    void aplicarEfeitosEvento(const EventoEstocastico& evento, class Reservatorio& reservatorio, double delta_tempo) {
        /*
        üéØ FASE 2: APLICA√á√ÉO REAL DOS EFEITOS DOS EVENTOS
        ====================================================================
        
        üìö CONCEITO EDUCACIONAL:
        Cada evento aplica efeitos espec√≠ficos baseados em fen√¥menos f√≠sicos reais
        observados na ind√∫stria petrol√≠fera, usando as correla√ß√µes implementadas na Fase 1.2
        */
        
        double intensidade = obterMultiplicadorSeveridade(evento.severidade);
        
        switch (evento.tipo) {
            case TipoEvento::WATER_CONING:
            {
                /*
                üåä WATER CONING - INVAS√ÉO DE √ÅGUA NO PO√áO
                ========================================
                
                üìö FEN√îMENO F√çSICO:
                - Cone de √°gua se forma devido ao diferencial de press√£o
                - Aumento s√∫bito do WOR (Water-Oil Ratio)
                - Redu√ß√£o da efici√™ncia de produ√ß√£o
                - Poss√≠vel aumento da viscosidade por emulsifica√ß√£o
                */
                
                // Aplicar aumento no WOR usando correla√ß√£o estoc√°stica
                bool breakthrough_ativo = (evento.severidade >= SeveridadeEvento::ALTA);
                double novo_WOR = SistemaCorrelacoesFisicas::calcularWOREstocastico(
                    reservatorio.WOR_bbl_bbl, 
                    reservatorio.tempo_simulacao_s,
                    reservatorio.vazao_producao,
                    breakthrough_ativo
                );
                
                // Aplicar mudan√ßa gradual para realismo
                double fator_aplicacao = 0.1 * intensidade;  // 10% por ciclo com severidade
                reservatorio.WOR_bbl_bbl += (novo_WOR - reservatorio.WOR_bbl_bbl) * fator_aplicacao;
                
                // Redu√ß√£o da vaz√£o devido √† interfer√™ncia da √°gua
                double fator_eficiencia = 1.0 - (0.03 * intensidade);  // -3% por severidade
                reservatorio.vazao_producao *= fator_eficiencia;
                
                // Recalcular viscosidade considerando maior water cut
                double novo_water_cut = reservatorio.WOR_bbl_bbl / (1.0 + reservatorio.WOR_bbl_bbl);
                double nova_viscosidade = SistemaCorrelacoesFisicas::calcularViscosidadeDinamica(
                    reservatorio.temperatura_C,
                    reservatorio.pressao_psi,
                    novo_water_cut
                );
                
                reservatorio.viscosidade_oleo_cp = nova_viscosidade;
                
                break;
            }
            
            case TipoEvento::GAS_CONING:
            {
                /*
                üí® GAS CONING - INVAS√ÉO DE G√ÅS LIVRE
                ====================================
                
                üìö FEN√îMENO F√çSICO:
                - G√°s livre invade o po√ßo atrav√©s de cone
                - Aumento s√∫bito do GOR (Gas-Oil Ratio)
                - Redu√ß√£o da efici√™ncia das bombas (gas lock)
                - Flutua√ß√µes na press√£o de fundo
                */
                
                // Calcular novo GOR usando correla√ß√£o din√¢mica
                double tempo_producao_dias = reservatorio.tempo_simulacao_s / (24.0 * 3600.0);
                double GOR_natural = SistemaCorrelacoesFisicas::calcularGORDinamico(
                    reservatorio.pressao_psi,
                    reservatorio.temperatura_C,
                    tempo_producao_dias
                );
                
                // Adicionar efeito do gas coning (aumento s√∫bito)
                double fator_gas_coning = 1.0 + (0.15 * intensidade);  // +15% por severidade
                double novo_GOR = GOR_natural * fator_gas_coning;
                
                // Aplicar mudan√ßa gradual
                double fator_aplicacao = 0.08 * intensidade;  // 8% por ciclo
                reservatorio.GOR_scf_bbl += (novo_GOR - reservatorio.GOR_scf_bbl) * fator_aplicacao;
                
                // Redu√ß√£o da efici√™ncia da bomba devido ao gas lock
                double fator_gas_lock = 1.0 - (0.05 * intensidade);  // -5% por severidade
                reservatorio.vazao_producao *= fator_gas_lock;
                
                break;
            }
            
            case TipoEvento::BREAKTHROUGH:
            {
                /*
                üö® BREAKTHROUGH - CHEGADA S√öBITA DE AQU√çFERO
                ============================================
                
                üìö FEN√îMENO F√çSICO:
                - Chegada s√∫bita de √°gua do aqu√≠fero
                - Mudan√ßa permanente no WOR (step change)
                - Poss√≠vel mudan√ßa na composi√ß√£o qu√≠mica
                - Impacto severo na produ√ß√£o
                */
                
                // Evento de breakthrough causa mudan√ßa permanente
                double fator_breakthrough = 1.0 + (0.40 * intensidade);  // +40% por severidade
                reservatorio.WOR_bbl_bbl *= fator_breakthrough;
                
                // Impacto severo na produ√ß√£o
                double fator_producao = 1.0 - (0.15 * intensidade);  // -15% por severidade
                reservatorio.vazao_producao *= fator_producao;
                
                // Recalcular viscosidade com novo water cut
                double novo_water_cut = reservatorio.WOR_bbl_bbl / (1.0 + reservatorio.WOR_bbl_bbl);
                double nova_viscosidade = SistemaCorrelacoesFisicas::calcularViscosidadeDinamica(
                    reservatorio.temperatura_C,
                    reservatorio.pressao_psi,
                    novo_water_cut
                );
                
                reservatorio.viscosidade_oleo_cp = nova_viscosidade;
                
                break;
            }
            
            case TipoEvento::PUMP_FAILURE:
            {
                /*
                üö´ FALHA DA BOMBA DE FUNDO
                ==========================
                
                üìö FEN√îMENO F√çSICO:
                - Falha mec√¢nica da bomba centr√≠fuga submarina
                - Redu√ß√£o dr√°stica ou parada total da produ√ß√£o
                - Aumento da press√£o de fundo
                - Necessidade de interven√ß√£o (workover)
                */
                
                // Redu√ß√£o dr√°stica na vaz√£o
                double fator_falha = 1.0 - (0.70 * intensidade);  // -70% por severidade
                reservatorio.vazao_producao *= fator_falha;
                
                // Aumento da press√£o de fundo (menos drawdown)
                double fator_pressao = 1.0 + (0.02 * intensidade);  // +2% por severidade
                reservatorio.pressao_psi *= fator_pressao;
                
                break;
            }
            
            case TipoEvento::SENSOR_DRIFT:
            {
                /*
                üìä SENSOR DRIFT - DETERIORA√á√ÉO DE SENSORES
                ==========================================
                
                üìö FEN√îMENO F√çSICO:
                - Calibra√ß√£o dos sensores se deteriora com tempo
                - Leituras imprecisas (bias sistem√°tico)
                - Afeta tomada de decis√£o operacional
                - Comum em ambiente de alta temperatura/press√£o
                */
                
                // Para sensor drift, n√£o alteramos propriedades reais
                // mas sim a "percep√ß√£o" delas (implementa√ß√£o futura)
                // Por agora, apenas marca que h√° incerteza nas medi√ß√µes
                
                break;
            }
            
            case TipoEvento::VALVE_STUCK:
            {
                /*
                üîí V√ÅLVULA TRAVADA
                ==================
                
                üìö FEN√îMENO F√çSICO:
                - V√°lvula de controle trava em posi√ß√£o fixa
                - Impossibilidade de ajustar vaz√£o
                - Redu√ß√£o parcial da produ√ß√£o
                - Comum devido a parafinas ou scale
                */
                
                // Redu√ß√£o moderada na vaz√£o
                double fator_valvula = 1.0 - (0.20 * intensidade);  // -20% por severidade
                reservatorio.vazao_producao *= fator_valvula;
                
                break;
            }
            
            case TipoEvento::SCALE_DEPOSITION:
            {
                /*
                üßÇ DEPOSI√á√ÉO DE SAIS (SCALE)
                ============================
                
                üìö FEN√îMENO F√çSICO:
                - Cristaliza√ß√£o de sais na tubula√ß√£o
                - Redu√ß√£o do di√¢metro efetivo
                - Aumento da perda de carga
                - Comum com produ√ß√£o de √°gua salgada
                */
                
                // Aumento gradual da viscosidade aparente (restri√ß√£o de fluxo)
                double fator_scale = 1.0 + (0.10 * intensidade);  // +10% por severidade
                reservatorio.viscosidade_oleo_cp *= fator_scale;
                
                // Redu√ß√£o na efici√™ncia de produ√ß√£o
                double fator_eficiencia = 1.0 - (0.08 * intensidade);  // -8% por severidade
                reservatorio.vazao_producao *= fator_eficiencia;
                
                break;
            }
            
            case TipoEvento::PARAFFIN_BUILDUP:
            {
                /*
                üïØÔ∏è DEPOSI√á√ÉO DE PARAFINAS
                =========================
                
                üìö FEN√îMENO F√çSICO:
                - Cristaliza√ß√£o de parafinas em temperatura baixa
                - Aumento significativo da viscosidade
                - Bloqueio parcial ou total da tubula√ß√£o
                - Comum em √≥leos pesados da Bacia de Campos
                */
                
                // Aumento significativo da viscosidade
                double fator_parafina = 1.0 + (0.25 * intensidade);  // +25% por severidade
                reservatorio.viscosidade_oleo_cp *= fator_parafina;
                
                // Redu√ß√£o na produ√ß√£o devido ao aumento da viscosidade
                double fator_producao = 1.0 - (0.12 * intensidade);  // -12% por severidade
                reservatorio.vazao_producao *= fator_producao;
                
                break;
            }
            
            case TipoEvento::WELLBORE_COLLAPSE:
            {
                /*
                üï≥Ô∏è COLAPSO DO PO√áO
                ==================
                
                üìö FEN√îMENO F√çSICO:
                - Instabilidade geomec√¢nica da forma√ß√£o
                - Fechamento parcial ou total do po√ßo
                - Evento catastr√≥fico e geralmente irrevers√≠vel
                - Requer workover ou abandono
                */
                
                // Impacto catastr√≥fico na produ√ß√£o
                double fator_colapso = 1.0 - (0.85 * intensidade);  // -85% por severidade
                reservatorio.vazao_producao *= fator_colapso;
                
                // Mudan√ßa na press√£o devido √† altera√ß√£o geom√©trica
                double fator_pressao = 1.0 + (0.05 * intensidade);  // +5% por severidade
                reservatorio.pressao_psi *= fator_pressao;
                
                break;
            }
            
            case TipoEvento::EQUIPMENT_MAINTENANCE:
            {
                /*
                üõ†Ô∏è MANUTEN√á√ÉO PROGRAMADA
                ========================
                
                üìö CONCEITO OPERACIONAL:
                - Parada programada para manuten√ß√£o
                - Produ√ß√£o zero durante o per√≠odo
                - Preven√ß√£o de falhas maiores
                - Parte do cronograma operacional
                */
                
                // Parada total durante manuten√ß√£o
                double fator_manutencao = 1.0 - (0.95 * intensidade);  // -95% por severidade
                reservatorio.vazao_producao *= fator_manutencao;
                
                break;
            }
            
            case TipoEvento::INJECTION_CHANGE:
            {
                /*
                üíâ MUDAN√áA NO PADR√ÉO DE INJE√á√ÉO
                ===============================
                
                üìö CONCEITO OPERACIONAL:
                - Altera√ß√£o na estrat√©gia de inje√ß√£o de √°gua/g√°s
                - Impacto na manuten√ß√£o de press√£o
                - Mudan√ßa nos padr√µes de fluxo
                - Otimiza√ß√£o da recupera√ß√£o
                */
                
                // Impacto na press√£o do reservat√≥rio
                double fator_pressao = 1.0 + (0.03 * intensidade);  // +3% por severidade
                reservatorio.pressao_psi *= fator_pressao;
                
                // Poss√≠vel impacto na produ√ß√£o (sweep efficiency)
                double fator_sweep = 1.0 + (0.02 * intensidade);  // +2% por severidade
                reservatorio.vazao_producao *= fator_sweep;
                
                break;
            }
            
            default:
                break;
        }
        
        /*
        üõ°Ô∏è VALIDA√á√ÉO FINAL:
        Aplicar valida√ß√£o de ranges f√≠sicos ap√≥s todos os efeitos
        */
        if (!SistemaCorrelacoesFisicas::validarRangesFisicos(
                reservatorio.pressao_psi,
                reservatorio.temperatura_C,
                reservatorio.vazao_producao,
                reservatorio.GOR_scf_bbl,
                reservatorio.WOR_bbl_bbl)) {
            
            // Se valores sa√≠ram do range f√≠sico, aplicar corre√ß√µes
            reservatorio.pressao_psi = std::max(500.0, std::min(5000.0, reservatorio.pressao_psi));
            reservatorio.vazao_producao = std::max(0.0, std::min(100000.0, reservatorio.vazao_producao));
            reservatorio.GOR_scf_bbl = std::max(50.0, std::min(2000.0, reservatorio.GOR_scf_bbl));
            reservatorio.WOR_bbl_bbl = std::max(0.0, std::min(20.0, reservatorio.WOR_bbl_bbl));
        }
    }
    
    /*
    üìä ====================================================================
    FUN√á√ïES AUXILIARES
    ====================================================================
    */
    double obterMultiplicadorSeveridade(SeveridadeEvento severidade) const {
        switch (severidade) {
            case SeveridadeEvento::BAIXA:    return 0.5;
            case SeveridadeEvento::MEDIA:    return 1.0;
            case SeveridadeEvento::ALTA:     return 1.5;
            case SeveridadeEvento::CRITICA:  return 2.0;
            default: return 1.0;
        }
    }
    
    std::uniform_real_distribution<double> obterDistribuicaoDuracao(TipoEvento tipo) {
        /*
        üìã DURA√á√ïES REALISTAS POR TIPO DE EVENTO:
        Baseado em estat√≠sticas industriais da Petrobras
        */
        switch (tipo) {
            case TipoEvento::WATER_CONING:
                return std::uniform_real_distribution<double>(120.0, 2592000.0);  // 2min-30dias
            case TipoEvento::GAS_CONING:
                return std::uniform_real_distribution<double>(60.0, 1296000.0);   // 1min-15dias
            case TipoEvento::BREAKTHROUGH:
                return std::uniform_real_distribution<double>(86400.0, 31536000.0); // 1 dia - 1 ano (permanente)
            case TipoEvento::PUMP_FAILURE:
                return std::uniform_real_distribution<double>(3600.0, 604800.0);  // 1h-7dias
            case TipoEvento::SENSOR_DRIFT:
                return std::uniform_real_distribution<double>(3600.0, 2592000.0); // 1h-30dias
            case TipoEvento::VALVE_STUCK:
                return std::uniform_real_distribution<double>(600.0, 86400.0);    // 10min-1dia
            case TipoEvento::SCALE_DEPOSITION:
                return std::uniform_real_distribution<double>(2592000.0, 7776000.0); // 30-90dias
            case TipoEvento::PARAFFIN_BUILDUP:
                return std::uniform_real_distribution<double>(5184000.0, 15552000.0); // 60-180dias
            case TipoEvento::WELLBORE_COLLAPSE:
                return std::uniform_real_distribution<double>(86400.0, 31536000.0); // 1 dia - 1 ano (permanente)
            case TipoEvento::EQUIPMENT_MAINTENANCE:
                return std::uniform_real_distribution<double>(7200.0, 86400.0);   // 2h-1dia
            case TipoEvento::INJECTION_CHANGE:
                return std::uniform_real_distribution<double>(3600.0, 259200.0);  // 1h-3dias
            default:
                return std::uniform_real_distribution<double>(3600.0, 86400.0);   // 1h-1dia default
        }
    }
    
    void registrarEfeitoEvento(const EventoEstocastico& evento, const Reservatorio& reservatorio) {
        /*
        üìä FASE 2: SISTEMA DE LOGGING DE EVENTOS
        ========================================
        
        üìö CONCEITO EDUCACIONAL:
        Registra eventos ativos no sistema de logging para que estudantes
        possam acompanhar os fen√¥menos que afetam a produ√ß√£o
        */
        
        // Determinar emoji e cor baseado no tipo de evento
        QString emoji, tipoTexto, impactoTexto;
        
        switch (evento.tipo) {
            case TipoEvento::WATER_CONING:
                emoji = "üåä";
                tipoTexto = "Water Coning";
                impactoTexto = QString("WOR: %1 bbl/bbl | Vaz√£o reduzida")
                             .arg(reservatorio.WOR_bbl_bbl, 0, 'f', 2);
                break;
                
            case TipoEvento::GAS_CONING:
                emoji = "üí®";
                tipoTexto = "Gas Coning";
                impactoTexto = QString("GOR: %1 scf/bbl | Efici√™ncia bomba reduzida")
                             .arg(reservatorio.GOR_scf_bbl, 0, 'f', 0);
                break;
                
            case TipoEvento::BREAKTHROUGH:
                emoji = "üö®";
                tipoTexto = "Water Breakthrough";
                impactoTexto = QString("EVENTO SEVERO | WOR: %1 bbl/bbl")
                             .arg(reservatorio.WOR_bbl_bbl, 0, 'f', 2);
                break;
                
            case TipoEvento::PUMP_FAILURE:
                emoji = "üö´";
                tipoTexto = "Falha da Bomba";
                impactoTexto = QString("Produ√ß√£o: %1 bpd | Requer interven√ß√£o")
                             .arg(reservatorio.vazao_producao, 0, 'f', 0);
                break;
                
            case TipoEvento::SENSOR_DRIFT:
                emoji = "üìä";
                tipoTexto = "Sensor Drift";
                impactoTexto = "Leituras imprecisas | Verificar calibra√ß√£o";
                break;
                
            case TipoEvento::VALVE_STUCK:
                emoji = "üîí";
                tipoTexto = "V√°lvula Travada";
                impactoTexto = QString("Vaz√£o limitada: %1 bpd")
                             .arg(reservatorio.vazao_producao, 0, 'f', 0);
                break;
                
            case TipoEvento::SCALE_DEPOSITION:
                emoji = "üßÇ";
                tipoTexto = "Deposi√ß√£o de Scale";
                impactoTexto = QString("Viscosidade: %1 cP | Efici√™ncia reduzida")
                             .arg(reservatorio.viscosidade_oleo_cp, 0, 'f', 1);
                break;
                
            case TipoEvento::PARAFFIN_BUILDUP:
                emoji = "üïØÔ∏è";
                tipoTexto = "Deposi√ß√£o de Parafinas";
                impactoTexto = QString("Viscosidade: %1 cP | Bloqueio parcial")
                             .arg(reservatorio.viscosidade_oleo_cp, 0, 'f', 1);
                break;
                
            case TipoEvento::WELLBORE_COLLAPSE:
                emoji = "üï≥Ô∏è";
                tipoTexto = "Colapso do Po√ßo";
                impactoTexto = "EVENTO CATASTR√ìFICO | Workover necess√°rio";
                break;
                
            case TipoEvento::EQUIPMENT_MAINTENANCE:
                emoji = "üõ†Ô∏è";
                tipoTexto = "Manuten√ß√£o Programada";
                impactoTexto = "Produ√ß√£o parada | Manuten√ß√£o preventiva";
                break;
                
            case TipoEvento::INJECTION_CHANGE:
                emoji = "üíâ";
                tipoTexto = "Mudan√ßa de Inje√ß√£o";
                impactoTexto = QString("Press√£o: %1 psi | Otimiza√ß√£o de recovery")
                             .arg(reservatorio.pressao_psi, 0, 'f', 0);
                break;
                
            default:
                emoji = "‚ö°";
                tipoTexto = "Evento Din√¢mico";
                impactoTexto = "Monitorando impactos...";
                break;
        }
        
        // Texto de severidade
        QString severidadeTexto;
        switch (evento.severidade) {
            case SeveridadeEvento::BAIXA:
                severidadeTexto = "BAIXA";
                break;
            case SeveridadeEvento::MEDIA:
                severidadeTexto = "M√âDIA";
                break;
            case SeveridadeEvento::ALTA:
                severidadeTexto = "ALTA";
                break;
            case SeveridadeEvento::CRITICA:
                severidadeTexto = "CR√çTICA";
                break;
        }
        
        // Tempo restante em formato leg√≠vel
        int minutos_restantes = static_cast<int>(evento.tempo_restante / 60.0);
        QString tempoTexto;
        if (minutos_restantes > 60) {
            int horas = minutos_restantes / 60;
            minutos_restantes = minutos_restantes % 60;
            tempoTexto = QString("%1h%2min").arg(horas).arg(minutos_restantes);
        } else {
            tempoTexto = QString("%1min").arg(minutos_restantes);
        }
        
        // PLACEHOLDER: Aqui deveria chamar o sistema de logging da UI
        // Por agora, apenas prepara as strings que seriam usadas
        QString logMessage = QString("%1 %2 [%3] - %4 (Restante: %5)")
                           .arg(emoji)
                           .arg(tipoTexto)
                           .arg(severidadeTexto)
                           .arg(impactoTexto)
                           .arg(tempoTexto);
        
        // TODO: Integrar com sistema de logging da UI quando dispon√≠vel
        // logMessage(logMessage, "evento");
    }
    
    /*
    üéÆ ====================================================================
    SISTEMA ADAPTATIVO (Placeholder para Fase 4)
    ====================================================================
    */
    void atualizarSistemaAdaptativo(const Reservatorio& reservatorio) {
        // PLACEHOLDER: Sistema de machine learning ser√° implementado na Fase 4
        // Por agora, apenas atualiza estat√≠sticas b√°sicas
        tempo_simulacao_total += 5.0;  // Incrementa tempo total de simula√ß√£o
    }
    
    /*
    üìä ====================================================================
    ATUALIZA√á√ÉO DE PROBABILIDADES (baseada no n√≠vel de realismo)
    ====================================================================
    */
    void atualizarProbabilidades() {
        // PLACEHOLDER: Ajuste fino das probabilidades baseado no n√≠vel
        // Por agora, as probabilidades s√£o ajustadas no momento da avalia√ß√£o
    }
};

/*
üéØ ========================================================================
SISTEMA DE CORRELA√á√ïES F√çSICAS - FASE 1.2
========================================================================

üìö FUNDAMENTOS TE√ìRICOS:
As correla√ß√µes implementadas s√£o baseadas em equa√ß√µes termodin√¢micas 
comprovadas na ind√∫stria petrol√≠fera e validadas com dados da Bacia de Campos.
*/

class SistemaCorrelacoesFisicas {
public:
    /*
    üå°Ô∏è ====================================================================
    CORRELA√á√ÉO DE ANDRADE: VISCOSIDADE √ó TEMPERATURA
    ====================================================================
    
    üìö EQUA√á√ÉO: Œº(T) = Œº‚ÇÄ √ó exp(B/T)
    
    CONCEITO F√çSICO:
    ‚Ä¢ Descoberta por Andrade (1930), fundamental na reologia
    ‚Ä¢ Viscosidade decresce exponencialmente com temperatura
    ‚Ä¢ Aplic√°vel para √≥leos pesados da Bacia de Campos
    ‚Ä¢ Validada para range 60-120¬∞C (profundidades 1.000-3.000m)
    
    PAR√ÇMETROS MLS-3A:
    ‚Ä¢ Œº‚ÇÄ = 0.8 cP (viscosidade de refer√™ncia a temperatura infinita)
    ‚Ä¢ B = 1.200 K (constante de ativa√ß√£o para √≥leo 29.5¬∞API)
    ‚Ä¢ T em Kelvin absoluto (¬∞C + 273.15)
    */
    static double calcularViscosidadeDinamica(double temperatura_C, double pressao_psi, double water_cut) {
        // Converter temperatura para Kelvin
        double T_kelvin = temperatura_C + 273.15;
        
        // Par√¢metros calibrados para MLS-3A (√≥leo 29.5¬∞ API)
        const double mu_0 = 0.8;      // cP - viscosidade de refer√™ncia
        const double B = 1200.0;      // K - constante de ativa√ß√£o
        
        // Correla√ß√£o de Andrade b√°sica
        double viscosidade_base = mu_0 * std::exp(B / T_kelvin);
        
        /*
        üîß CORRE√á√ÉO PARA PRESS√ÉO (Correla√ß√£o de Barus):
        Œº(P) = Œº(P‚ÇÄ) √ó exp(Œ± √ó (P - P‚ÇÄ))
        
        CONCEITO: Press√£o alta aumenta viscosidade
        Œ± = 2.5√ó10‚Åª‚Å¥ psi‚Åª¬π (t√≠pico para √≥leos da Bacia de Campos)
        */
        const double P_0 = 2850.0;    // psi - press√£o de refer√™ncia MLS-3A
        const double alpha = 2.5e-4;  // psi‚Åª¬π - coeficiente piezoviscoso
        
        double fator_pressao = std::exp(alpha * (pressao_psi - P_0));
        double viscosidade_com_pressao = viscosidade_base * fator_pressao;
        
        /*
        üíß CORRE√á√ÉO PARA EMULS√ÉO (Water Cut):
        Œº_emuls√£o = Œº_√≥leo √ó (1 + 2.5œÜ + 10.05œÜ¬≤ + 0.00273√óexp(16.6œÜ))
        
        CONCEITO: √Ågua produzida forma emuls√£o, aumenta viscosidade dramaticamente
        Equa√ß√£o de Einstein-Roscoe modificada para emuls√µes O/W
        œÜ = fra√ß√£o volum√©trica de √°gua (BSW)
        */
        if (water_cut > 0.0 && water_cut < 0.95) {  // Limite f√≠sico realista
            double phi = water_cut;  // Fra√ß√£o de √°gua
            double fator_emulsao = 1.0 + 2.5*phi + 10.05*phi*phi + 0.00273*std::exp(16.6*phi);
            viscosidade_com_pressao *= fator_emulsao;
        }
        
        /*
        üõ°Ô∏è VALIDA√á√ÉO DE RANGES F√çSICOS:
        Limitar resultado dentro de faixas realistas para MLS-3A
        */
        const double viscosidade_min = 0.5;    // cP - limite inferior f√≠sico
        const double viscosidade_max = 50.0;   // cP - limite superior operacional
        
        double resultado = std::max(viscosidade_min, 
                          std::min(viscosidade_max, viscosidade_com_pressao));
        
        return resultado;
    }
    
    /*
    ‚õΩ ====================================================================
    CORRELA√á√ÉO GOR √ó PRESS√ÉO: LIBERA√á√ÉO DIFERENCIAL
    ====================================================================
    
    üìö EQUA√á√ÉO: GOR(P) = GOR‚Çõ‚Çí‚Çó + (GOR‚ÇÄ - GOR‚Çõ‚Çí‚Çó) √ó (P/Pb)‚Åø
    
    CONCEITO F√çSICO:
    ‚Ä¢ Baseada na Lei de Henry (solubilidade de gases)
    ‚Ä¢ G√°s sai de solu√ß√£o quando press√£o < Pb (bubble point)
    ‚Ä¢ Comportamento n√£o-linear t√≠pico de reservat√≥rios depletados
    ‚Ä¢ Validada com dados de PVT da Bacia de Campos
    
    PAR√ÇMETROS MLS-3A:
    ‚Ä¢ GOR‚ÇÄ = 420 scf/bbl (satura√ß√£o inicial)
    ‚Ä¢ GOR‚Çõ‚Çí‚Çó = 280 scf/bbl (g√°s em solu√ß√£o permanente)
    ‚Ä¢ Pb = 2.200 psi (bubble point pressure)
    ‚Ä¢ n = 1.8 (expoente emp√≠rico para MLS-3A)
    */
    static double calcularGORDinamico(double pressao_psi, double temperatura_C, double tempo_producao_dias) {
        // Par√¢metros calibrados para MLS-3A
        const double GOR_inicial = 420.0;     // scf/bbl - GOR de satura√ß√£o
        const double GOR_solucao = 280.0;     // scf/bbl - g√°s permanentemente em solu√ß√£o
        const double P_bubble = 2200.0;       // psi - press√£o de satura√ß√£o
        const double n_expoente = 1.8;        // Expoente emp√≠rico
        
        double GOR_base;
        
        if (pressao_psi >= P_bubble) {
            /*
            üìä ACIMA DO BUBBLE POINT: 
            Todo g√°s permanece em solu√ß√£o, GOR constante
            */
            GOR_base = GOR_inicial;
        } else {
            /*
            üìà ABAIXO DO BUBBLE POINT:
            Libera√ß√£o diferencial conforme press√£o
            */
            double razao_pressao = pressao_psi / P_bubble;
            double fator_liberacao = std::pow(razao_pressao, n_expoente);
            
            GOR_base = GOR_solucao + (GOR_inicial - GOR_solucao) * fator_liberacao;
        }
        
        /*
        ‚è∞ EFEITO TEMPORAL: DEPLE√á√ÉO COMPOSICIONAL
        Com o tempo, composi√ß√£o do reservat√≥rio muda
        Componentes leves s√£o produzidos primeiro
        */
        const double taxa_deple√ß√£o = 0.001;  // %/dia - t√≠pico para MLS-3A
        double fator_tempo = 1.0 - (taxa_deple√ß√£o * tempo_producao_dias / 365.0);
        fator_tempo = std::max(0.7, fator_tempo);  // Limite m√≠nimo 70%
        
        double GOR_com_tempo = GOR_base * fator_tempo;
        
        /*
        üå°Ô∏è CORRE√á√ÉO PARA TEMPERATURA:
        Temperatura alta aumenta libera√ß√£o de componentes leves
        Baseado na equa√ß√£o de Antoine modificada
        */
        const double T_ref = 92.0;  // ¬∞C - temperatura de refer√™ncia MLS-3A
        const double coef_temp = 0.002;  // K‚Åª¬π - coeficiente emp√≠rico
        
        double delta_T = temperatura_C - T_ref;
        double fator_temperatura = 1.0 + (coef_temp * delta_T);
        
        double resultado = GOR_com_tempo * fator_temperatura;
        
        /*
        üõ°Ô∏è VALIDA√á√ÉO DE RANGES F√çSICOS:
        */
        const double GOR_min = 50.0;     // scf/bbl - limite inferior
        const double GOR_max = 1200.0;   // scf/bbl - limite superior
        
        return std::max(GOR_min, std::min(GOR_max, resultado));
    }
    
    /*
    üíß ====================================================================
    WOR ESTOC√ÅSTICO: WATER BREAKTHROUGH MODELING
    ====================================================================
    
    üìö EQUA√á√ÉO: WOR(t) = WOR‚ÇÄ √ó [1 + f_breakthrough(t) + f_coning(t)]
    
    CONCEITO F√çSICO:
    ‚Ä¢ WOR cresce naturalmente com deple√ß√£o
    ‚Ä¢ Eventos s√∫bitos de water breakthrough
    ‚Ä¢ Coning effects baseados em vaz√£o
    ‚Ä¢ Padr√£o de inje√ß√£o afeta sweep efficiency
    */
    static double calcularWOREstocastico(double WOR_atual, double tempo_simulacao, 
                                        double vazao_producao, bool evento_breakthrough) {
        /*
        üìà CRESCIMENTO NATURAL (Curva de Buckley-Leverett):
        WOR cresce exponencialmente com satura√ß√£o de √°gua
        */
        const double taxa_crescimento = 0.0001;  // /dia
        double dias_producao = tempo_simulacao / (24.0 * 3600.0);
        double fator_natural = 1.0 + (taxa_crescimento * dias_producao);
        
        /*
        ‚ö° EFEITO DE VAZ√ÉO (Water Coning):
        Vaz√£o alta favorece invas√£o de √°gua
        Baseado no n√∫mero de Bond (Bo = œÅgh/œÉ)
        */
        const double vazao_critica = 25000.0;  // bpd - vaz√£o cr√≠tica para coning
        double razao_vazao = vazao_producao / vazao_critica;
        double fator_vazao = 1.0 + 0.05 * std::max(0.0, razao_vazao - 1.0);
        
        /*
        üö® EVENTOS DE BREAKTHROUGH:
        Aumento s√∫bito quando evento ativo
        */
        double fator_breakthrough = evento_breakthrough ? 1.5 : 1.0;
        
        double WOR_novo = WOR_atual * fator_natural * fator_vazao * fator_breakthrough;
        
        /*
        üõ°Ô∏è VALIDA√á√ÉO DE RANGES F√çSICOS:
        */
        const double WOR_min = 0.1;      // bbl/bbl - limite inferior
        const double WOR_max = 15.0;     // bbl/bbl - limite superior operacional
        
        return std::max(WOR_min, std::min(WOR_max, WOR_novo));
    }
    
    /*
    üîó ====================================================================
    SISTEMA DE ACOPLAMENTO N√ÉO-LINEAR
    ====================================================================
    
    üìö CONCEITO: Propriedades interagem entre si de forma n√£o-linear
    Mudan√ßa em uma propriedade afeta todas as outras
    */
    static void aplicarAcoplamentoNaoLinear(class Reservatorio& reservatorio) {
        // PLACEHOLDER: Ser√° implementado ap√≥s defini√ß√£o completa da classe Reservatorio
        // Por agora, apenas documenta a interface necess√°ria
    }
    
    /*
    üõ°Ô∏è ====================================================================
    VALIDA√á√ÉO DE RANGES F√çSICOS GLOBAIS
    ====================================================================
    */
    static bool validarRangesFisicos(double pressao_psi, double temperatura_C, 
                                    double vazao_bpd, double GOR_scf_bbl, double WOR_bbl_bbl) {
        // Validar ranges t√≠picos da Bacia de Campos
        bool pressao_ok = (pressao_psi >= 500.0 && pressao_psi <= 5000.0);
        bool temperatura_ok = (temperatura_C >= 40.0 && temperatura_C <= 150.0);
        bool vazao_ok = (vazao_bpd >= 0.0 && vazao_bpd <= 100000.0);
        bool GOR_ok = (GOR_scf_bbl >= 50.0 && GOR_scf_bbl <= 2000.0);
        bool WOR_ok = (WOR_bbl_bbl >= 0.0 && WOR_bbl_bbl <= 20.0);
        
        return pressao_ok && temperatura_ok && vazao_ok && GOR_ok && WOR_ok;
    }
};

/*
üéØ ========================================================================
INTEGRA√á√ÉO COM O SISTEMA PRINCIPAL
========================================================================
*/

// Inst√¢ncia global do motor de eventos din√¢micos
MotorEventosDinamicos* motor_dinamico = nullptr;
    /*
    üîß ====================================================================
    ATUALIZA√á√ÉO DE PROBABILIDADES
    ====================================================================
    */
    void atualizarProbabilidades() {
        // IMPLEMENTA√á√ÉO: Pr√≥xima etapa
        // Aplica modificadores baseados no n√≠vel de realismo
    }
};

class Reservatorio {
public:
    /*
    üå°Ô∏è ========================================================================
    VARI√ÅVEIS DE ESTADO - PROPRIEDADES FUNDAMENTAIS DO RESERVAT√ìRIO
    ========================================================================
    
    üìö PARA ESTUDANTES: Estas s√£o as vari√°veis que descrevem o estado
    atual do reservat√≥rio e mudam com o tempo durante a produ√ß√£o:
    */
    
    double pressao_psi;        // üå°Ô∏è Press√£o do reservat√≥rio [psi]
                               //     CONCEITO: For√ßa que "empurra" o √≥leo para o po√ßo
                               //     RANGE T√çPICO: 1.800-4.200 psi (Bacia de Campos)
                               //     VALOR MLS-3A: 2.850 psi (atual, 2025)
    
    double temperatura_C;      // üå°Ô∏è Temperatura do reservat√≥rio [¬∞C]
                               //     CONCEITO: Afeta viscosidade e densidade dos fluidos
                               //     RANGE T√çPICO: 60-120¬∞C (profundidades 1.000-3.000m)
                               //     VALOR MLS-3A: 92¬∞C (medido em profundidade)
    
    double volume_oleo_bbl;    // üõ¢Ô∏è Volume de √≥leo restante [barris]
                               //     CONCEITO: OOIP restante (Original Oil In Place)
                               //     OOIP ORIGINAL MLS-3A: ~280 milh√µes bbl
                               //     VALOR ATUAL: ~55 milh√µes bbl (80% j√° produzido)
    
    double volume_gas_m3;      // ‚òòÔ∏è Volume de g√°s livre [m¬≥]
                               //     CONCEITO: G√°s que se separa do √≥leo quando P < Pb
                               //     PROBLEMA: Excesso reduz efici√™ncia de bombeio
                               //     CONTROLE: Inje√ß√£o de g√°s ou flare
    
    double volume_agua_bbl;    // üíß Volume de √°gua no sistema [barris]
                               //     CONCEITO: √Ågua connata + injetada + aquifer
                               //     PROBLEMA: Aumenta com water coning
                               //     BSW MLS-3A: ~23% (2025)

    /*
    üßÆ ========================================================================
    PROPRIEDADES DERIVADAS - CALCULADAS A PARTIR DAS VARI√ÅVEIS DE ESTADO
    ========================================================================
    
    üìö CONCEITO: Estas propriedades s√£o calculadas usando correla√ß√µes
    emp√≠ricas e modelos f√≠sicos a cada passo da simula√ß√£o:
    */
    
    double viscosidade_oleo_cp;    // üåØ Viscosidade din√¢mica do √≥leo [cp]
                                   //       CONCEITO: Resist√™ncia do √≥leo ao escoamento
                                   //       F√ìRMULA: Standing correlation (T, P, API)
                                   //       VALOR MLS-3A: ~2,8 cp (92¬∞C, 29,5¬∞ API)
    
    double vazao_oleo_bopd;        // üö¢ Vaz√£o de produ√ß√£o de √≥leo [bopd]
                                   //       CONCEITO: Calculada pela curva IPR (Inflow Performance)
                                   //       F√ìRMULA: Darcy (monof√°sico) + Vogel (bif√°sico)
                                   //       VALOR MLS-3A: ~22.000 bopd (ap√≥s revitaliza√ß√£o)
    
    double vazao_producao;         // üéØ Vaz√£o total de produ√ß√£o [bopd] - USADO PELO SISTEMA DIN√ÇMICO
                                   //       CONCEITO: Equivale √† vazao_oleo_bopd, mas separado para clareza
                                   //       SISTEMA DIN√ÇMICO: Motor de eventos usa esta propriedade
                                   //       VALOR: Sempre igual a vazao_oleo_bopd
    
    double pressao_de_bolha_psi;   // üßô Press√£o de satura√ß√£o [psi]
                                   //       CONCEITO: Press√£o onde g√°s come√ßa a se separar do √≥leo
                                   //       IMPORT√ÇNCIA: P < Pb = fluxo bif√°sico (mais complexo)
                                   //       VALOR MLS-3A: 2.950 psi (lab PVT)
    
    double pressao_poco_psi;       // üï≥Ô∏è Press√£o de fundo de po√ßo (BHP) [psi]
                                   //       CONCEITO: Press√£o na forma√ß√£o produtora
                                   //       CONTROLE: V√°lvula choke (‚Üë fecha, ‚Üì abre)
                                   //       VALOR MLS-3A: ~1.950 psi (controlado)
    
    bool em_emergencia;            // ‚ö†Ô∏è Status de emerg√™ncia do sistema
                                   //       CONCEITO: Shutdown autom√°tico por par√¢metros cr√≠ticos
                                   //       TRIGGERS: P < P_min, Œº > Œº_max, GOR > GOR_max
    
    double gas_oil_ratio;          // ‚õΩ Raz√£o g√°s-√≥leo (GOR) [scf/bbl]
                                   //       CONCEITO: Volume de g√°s por barril de √≥leo produzido
                                   //       PROBLEMA: GOR alto = baixa efici√™ncia de bombeio
                                   //       VALOR MLS-3A: 420 scf/bbl (normal para √≥leo m√©dio)
    
    double water_oil_ratio;        // üíß Raz√£o √°gua-√≥leo (WOR) [adimensional]
                                   //       CONCEITO: Equivale ao BSW (Basic Sediments & Water)
                                   //       PROBLEMA: Aumenta com water coning e breakthrough
                                   //       VALOR MLS-3A: 0,23 = 23% BSW (2025)
    
    double tempo_simulacao_s;      // ‚è±Ô∏è Tempo decorrido na simula√ß√£o [segundos]
                                   //       CONCEITO: Contador interno para c√°lculos temporais

    /*
    üîç ========================================================================
    CONSTANTES F√çSICAS REAIS DO PO√áO MLS-3A (MARLIM SUL)
    ========================================================================
    
    üìö PARA ESTUDANTES: Estas s√£o propriedades REAIS medidas em laborat√≥rio
    e campo, baseadas em 26 anos de dados operacionais do MLS-3A:
    */
    
    const double GRAVIDADE_GAS_PESO_AR = 0.85;    // ‚õΩ Densidade relativa do g√°s
                                                   //     CONCEITO: œÅ_g√°s / œÅ_ar (adimensional)
                                                   //     VALOR 0.85 = G√°s "leve" (rico em metano)
                                                   //     IMPORT√ÇNCIA: Usado em correla√ß√µes PVT
    
    const double GRAVIDADE_API = 29.5;            // üå°Ô∏è Grau API do √≥leo MLS-3A
                                                   //     CONCEITO: Medida de "leveza" do √≥leo
                                                   //     F√ìRMULA: ¬∞API = (141.5/œÅ_60F) - 131.5
                                                   //     CLASSIFICA√á√ÉO: 29.5¬∞ = √ìLEO M√âDIO (bom!)
                                                   //     DENSIDADE: ~0.88 g/cm¬≥ a 60¬∞F
    
    const double PRODUTIVIDADE_POCO_C = 22000.0;  // üö¢ Produ√ß√£o atual MLS-3A [bopd]
                                                   //     CONCEITO: Capacidade m√°xima de produ√ß√£o
                                                   //     HIST√ìRICO: Pico = 45.000 bopd (2010)
                                                   //     ATUAL: 22.000 bopd (ap√≥s revitaliza√ß√£o 2023)
                                                   //     META: Sustentar > 15.000 bopd at√© 2030
    
    const double FATOR_INJECAO_GAS_BASE = 0.05;   // ‚õΩ Fator de resposta √† inje√ß√£o de g√°s
                                                   //     CONCEITO: ŒîP / Volume_gas_injetado
                                                   //     CALIBRA√á√ÉO: Baseada em testes de inje√ß√£o
                                                   //     USO: Gas-lift ou manuten√ß√£o de press√£o
    
    const double FATOR_INJECAO_AGUA_BASE = 0.01;  // üíß Fator de resposta √† inje√ß√£o de √°gua
                                                   //     CONCEITO: Efici√™ncia da inje√ß√£o de √°gua
                                                   //     BAIXO VALOR: Reservat√≥rio j√° com alta press√£o
                                                   //     USO: Waterflooding secund√°rio
    
    const double PRODUCAO_MINIMA_ACEITAVEL_BOPD = 8000.0; // üí∞ Limite econ√¥mico [bopd]
                                                           //     CONCEITO: Vaz√£o m√≠nima vi√°vel economicamente
                                                           //     C√ÅLCULO: Custos operacionais vs receita
                                                           //     REALIDADE: Custos MLS-3A ~US$ 35/bbl

    /*
    ‚ö†Ô∏è ========================================================================
    LIMITES OPERACIONAIS CR√çTICOS - SEGURAN√áA E VIABILIDADE ECON√îMICA
    ========================================================================
    
    üìö CONCEITO: Estes limites definem as condi√ß√µes de SHUTDOWN AUTOM√ÅTICO
    do po√ßo, baseados em crit√©rios t√©cnicos e econ√¥micos reais da Petrobras:
    */
    
    const double LIMITE_PRESSAO_CRITICO_MIN = 1650.0; // ‚ö†Ô∏è Press√£o m√≠nima segura [psi]
                                                       //     CONCEITO: Abaixo = colapso da forma√ß√£o
                                                       //     GEOMEC√ÇNICA: Tens√£o efetiva > resist√™ncia
                                                       //     VALOR MLS-3A: 1.650 psi (limite atual)
    
    const double LIMITE_PRESSAO_CRITICO_MAX = 4200.0; // ‚ö†Ô∏è Press√£o m√°xima segura [psi]
                                                       //     CONCEITO: Acima = risco de blowout
                                                       //     VALOR HIST√ìRICO: Press√£o inicial MLS-3A (1999)
                                                       //     SEGURAN√áA: Casing e wellhead limits
    
    const double LIMITE_VISCOSIDADE_CRITICO = 4.5;    // ‚ö†Ô∏è Viscosidade m√°xima [cp]
                                                       //     CONCEITO: Acima = bombeio invi√°vel
                                                       //     ESP LIMIT: Equipamentos submers√≠veis
                                                       //     VALOR: T√≠pico para √≥leo 29.5¬∞ API
    
    const double LIMITE_GAS_CRITICO = 15000.0;        // ‚ö†Ô∏è Volume g√°s livre m√°ximo [m¬≥]
                                                       //     CONCEITO: Acima = gas-lock das bombas
                                                       //     PROBLEMA: Bomba perde escorva
                                                       //     SOLU√á√ÉO: Flare ou separa√ß√£o
    
    const double LIMITE_WOR_CRITICO = 0.35;           // ‚ö†Ô∏è Water cut m√°ximo [35%]
                                                       //     CONCEITO: Acima = tratamento invi√°vel
                                                       //     CUSTOS: Separa√ß√£o e descarte de √°gua
                                                       //     LIMITE REAL: MLS-3A opera at√© 40%
    
    const double LIMITE_GOR_CRITICO = 600.0;          // ‚ö†Ô∏è GOR m√°ximo [scf/bbl]
                                                       //     CONCEITO: Acima = produ√ß√£o de √≥leo invi√°vel
                                                       //     PROBLEMA: Muito g√°s, pouco √≥leo
                                                       //     T√çPICO: √ìleo m√©dio < 500 scf/bbl

    /*
    üèóÔ∏è ========================================================================
    CONSTRUTOR - INICIALIZA√á√ÉO COM DADOS REAIS DO MLS-3A (2025)
    ========================================================================
    
    üìö PARA ESTUDANTES: O construtor define o ESTADO INICIAL do reservat√≥rio.
    Todos os valores s√£o baseados em dados reais coletados no MLS-3A em 2025,
    ap√≥s 26 anos de produ√ß√£o (in√≠cio: 1999).
    
    üìÖ DADOS HIST√ìRICOS:
    ‚Ä¢ 1999: Descoberta e in√≠cio da produ√ß√£o
    ‚Ä¢ 2010: Pico de produ√ß√£o (45.000 bopd)
    ‚Ä¢ 2015: In√≠cio do decl√≠nio acentuado
    ‚Ä¢ 2023: Projeto de revitaliza√ß√£o
    ‚Ä¢ 2025: Estado atual (simulado)
    
    üîç FONTE DOS DADOS: Relat√≥rios ANP + Petrobras + Literatura T√©cnica
    */
    Reservatorio() :
        pressao_psi(2850.0),           // üå°Ô∏è 2.850 psi - Press√£o atual (2025)
                                       //     HIST√ìRICO: 4.200 psi (inicial, 1999)
                                       //     DECL√çNIO: ~32% em 26 anos
                                       //     STATUS: Ainda acima da press√£o cr√≠tica
        
        temperatura_C(92.0),           // üå°Ô∏è 92¬∞C - Temperatura do reservat√≥rio
                                       //     MEDIDA: Em profundidade (2.100-2.400m)
                                       //     CONSTANTE: N√£o muda significativamente
                                       //     GRADIENTE: ~3¬∞C/100m (geot√©rmico normal)
        
        volume_oleo_bbl(55000000.0),   // üõ¢Ô∏è 55 MM bbl - Volume restante (2025)
                                       //     OOIP ORIGINAL: ~280 MM bbl (estimativa)
                                       //     PRODUZIDO: ~225 MM bbl (80% recovery!)
                                       //     EXCELENTE: Recovery factor muito alto
                                       //     PREVIS√ÉO: ~10-15 anos de vida √∫til
        
        volume_gas_m3(8500.0),         // ‚õΩ 8.500 m¬≥ - G√°s livre atual
                                       //     CONCEITO: G√°s separado na planta
                                       //     NORMAL: Press√£o < Pbubble point
                                       //     DESTINO: Gas-lift ou comercializa√ß√£o
        
        volume_agua_bbl(125000.0),     // üíß 125.000 bbl - √Ågua total no sistema
                                       //     COMPOSI√á√ÉO: Connata + injetada + aqu√≠fero
                                       //     AUMENTO: Water coning progredindo
                                       //     TRATAMENTO: Separa√ß√£o + reinje√ß√£o
        
        viscosidade_oleo_cp(2.8),      // üåØ 2,8 cp - Viscosidade nas condi√ß√µes atuais
                                       //     C√ÅLCULO: Standing correlation
                                       //     PAR√ÇMETROS: 92¬∞C + 29,5¬∞API + 2.850 psi
                                       //     QUALIDADE: Baixa viscosidade = bom!
        
        vazao_oleo_bopd(22000.0),      // üö¢ 22.000 bopd - Produ√ß√£o atual
                                       //     SUCESSO: Revitaliza√ß√£o 2023 aumentou 40%
                                       //     ANTERIOR: ~15.000 bopd (antes do projeto)
                                       //     META: Sustentar > 15.000 bopd at√© 2030
        
        vazao_producao(22000.0),       // üéØ 22.000 bopd - Produ√ß√£o para sistema din√¢mico
                                       //     SINCRONIZA√á√ÉO: Sempre igual √† vazao_oleo_bopd
                                       //     SISTEMA DIN√ÇMICO: Usado pelos eventos estoc√°sticos
        
        pressao_de_bolha_psi(2950.0),  // üßô 2.950 psi - Press√£o de satura√ß√£o
                                       //     LABORAT√ìRIO: Medida em an√°lise PVT
                                       //     IMPORT√ÇNCIA: P_res < P_bubble = fluxo bif√°sico
                                       //     ATUAL: 2.850 < 2.950 = Regime bif√°sico!
        
        pressao_poco_psi(1950.0),      // üï≥Ô∏è 1.950 psi - Bottom Hole Pressure
                                       //     CONTROLE: V√°lvula choke na √°rvore de natal
                                       //     DRAWDOWN: 2.850 - 1.950 = 900 psi
                                       //     OTIMIZA√á√ÉO: Equilibrar vaz√£o vs water coning
        
        em_emergencia(false),          // ‚úÖ false - Sistema operando normalmente
                                       //     VERIFICA√á√ÉO: Todos os par√¢metros dentro dos limites
                                       //     MONITORAMENTO: Cont√≠nuo e autom√°tico
        
        gas_oil_ratio(420.0),          // ‚õΩ 420 scf/bbl - Raz√£o g√°s-√≥leo atual
                                       //     NORMAL: T√≠pico para √≥leo m√©dio (29,5¬∞ API)
                                       //     CONTROLADO: Abaixo do limite cr√≠tico (600)
                                       //     TEND√äNCIA: Pode aumentar com deple√ß√£o
        
        water_oil_ratio(0.23),         // üíß 0,23 = 23% BSW - Water cut atual
                                       //     HIST√ìRICO: 5% (1999) ‚Üí 23% (2025)
                                       //     PROBLEMA: Water coning progredindo
                                       //     LIMITE: 35% (econ√¥mico) - ainda OK!
        
        tempo_simulacao_s(0.0)         // ‚è±Ô∏è 0 segundos - In√≠cio da simula√ß√£o
                                       //     CONTADOR: Ser√° incrementado a cada ciclo
                                       //     TIMESTEP: 5 segundos (realismo operacional)
    
    {} // üèÅ FIM DO CONSTRUTOR - RESERVAT√ìRIO INICIALIZADO!

    /*
    üéì ================================================================================
    ‚öôÔ∏è M√âTODOS UTILIT√ÅRIOS - REFATORA√á√ÉO DE C√ìDIGO REPETIDO  
    ================================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO:
    Refatora√ß√£o √© o processo de reestruturar c√≥digo existente sem alterar seu
    comportamento externo, melhorando legibilidade, manutenibilidade e reutiliza√ß√£o.
    
    üéØ BENEF√çCIOS DA REFATORA√á√ÉO:
    ‚Ä¢ DRY Principle (Don't Repeat Yourself) - Elimina duplica√ß√£o
    ‚Ä¢ Single Responsibility - Cada m√©todo tem uma fun√ß√£o espec√≠fica  
    ‚Ä¢ Facilita manuten√ß√£o e debugging
    ‚Ä¢ Melhora testabilidade do c√≥digo
    ‚Ä¢ Reduz chance de erros por inconsist√™ncia
    
    üè≠ APLICA√á√ÉO INDUSTRIAL:
    Sistemas cr√≠ticos como SCADA requerem c√≥digo altamente organizado para:
    ‚Ä¢ Facilitar auditorias de software
    ‚Ä¢ Reduzir bugs em sistemas de seguran√ßa
    ‚Ä¢ Permitir atualiza√ß√µes r√°pidas e seguras
    ‚Ä¢ Facilitar treinamento de novos engenheiros
    
    ================================================================================
    */

    /*
    üå°Ô∏è ========================================================================
    M√âTODO UTILIT√ÅRIO: CONVERS√ÉO CELSIUS ‚Üí FAHRENHEIT
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Converte temperatura de Celsius para Fahrenheit usando a f√≥rmula padr√£o
    da termodin√¢mica. Muito usado em correla√ß√µes PVT da ind√∫stria petroleira.
    
    üî¨ F√ìRMULA: ¬∞F = (¬∞C √ó 9/5) + 32 = (¬∞C √ó 1.8) + 32
    
    üõ¢Ô∏è APLICA√á√ÉO PETROLEIRA:
    ‚Ä¢ Correla√ß√µes de Standing (viscosidade)
    ‚Ä¢ Propriedades PVT (press√£o-volume-temperatura)  
    ‚Ä¢ C√°lculos de densidade de fluidos
    ‚Ä¢ Interface com equipamentos americanos (sensores ¬∞F)
    
    PAR√ÇMETROS:
    ‚Ä¢ temperatura_C: Temperatura em graus Celsius [¬∞C]
    
    RETORNA: Temperatura em graus Fahrenheit [¬∞F]
    */
    double celsiusParaFahrenheit(double temperatura_C) const {
        return 1.8 * temperatura_C + 32.0;
    }

    /*
    ‚è±Ô∏è ========================================================================
    M√âTODO UTILIT√ÅRIO: CONVERS√ÉO SEGUNDOS ‚Üí MINUTOS
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Converte tempo de segundos para minutos para exibi√ß√£o na interface.
    Melhora legibilidade dos gr√°ficos de tend√™ncia temporal.
    
    üè≠ APLICA√á√ÉO INDUSTRIAL:
    ‚Ä¢ Eixos X de gr√°ficos SCADA (trending)
    ‚Ä¢ Relat√≥rios operacionais
    ‚Ä¢ Logs de eventos temporais
    ‚Ä¢ Sincroniza√ß√£o entre sistemas
    
    PAR√ÇMETROS:
    ‚Ä¢ tempo_segundos: Tempo em segundos [s]
    
    RETORNA: Tempo em minutos [min]
    */
    double segundosParaMinutos(double tempo_segundos) const {
        return tempo_segundos / 60.0;
    }

    /*
    üìä ========================================================================
    M√âTODO UTILIT√ÅRIO: FORMATA√á√ÉO NUM√âRICA PADRONIZADA
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Padroniza a formata√ß√£o de n√∫meros com precis√£o decimal espec√≠fica.
    Essencial para consist√™ncia visual em interfaces SCADA profissionais.
    
    üéØ PADR√ïES DE PRECIS√ÉO:
    ‚Ä¢ 0 casas: Volumes grandes (barris, m¬≥)
    ‚Ä¢ 1 casa: Percentuais (BSW%, recovery factor)  
    ‚Ä¢ 2 casas: Par√¢metros operacionais (press√£o, vaz√£o, temperatura)
    ‚Ä¢ 3 casas: Ratios precisos (WOR, viscosidade fina)
    
    üè≠ APLICA√á√ÉO INDUSTRIAL:
    ‚Ä¢ Relat√≥rios t√©cnicos padronizados
    ‚Ä¢ Interfaces SCADA consistentes
    ‚Ä¢ Exporta√ß√£o de dados (CSV, Excel)
    ‚Ä¢ Comunica√ß√£o entre sistemas
    
    PAR√ÇMETROS:
    ‚Ä¢ valor: N√∫mero a ser formatado
    ‚Ä¢ precisao: N√∫mero de casas decimais (0-3)
    
    RETORNA: QString formatado consistentemente
    */
    QString formatarNumero(double valor, int precisao) const {
        return QString::number(valor, 'f', precisao);
    }

    // M√©todos de C√°lculo e Simula√ß√£o
    /*
    ‚õΩ ========================================================================
    M√âTODO REFATORADO: C√ÅLCULO DE SOLUBILIDADE DE G√ÅS  
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO APLICADA:
    Substitui√ß√£o da convers√£o manual ¬∞C‚Üí¬∞F pelo m√©todo utilit√°rio
    celsiusParaFahrenheit(), eliminando duplica√ß√£o de c√≥digo.
    
    üî¨ CORRELA√á√ÉO DE STANDING (1947):
    Calcula solubilidade de g√°s no √≥leo em condi√ß√µes de reservat√≥rio.
    Fundamental para modelagem PVT e comportamento de fases.
    */
    double calcularSolubilidadeGas(double pressao_psi, double temperatura_C) {
        // USO DO M√âTODO UTILIT√ÅRIO (REFATORA√á√ÉO)
        double temp_F = celsiusParaFahrenheit(temperatura_C);
        
        double resultado = GRAVIDADE_GAS_PESO_AR * pow((pressao_psi / 18.2) * exp(0.0125 * GRAVIDADE_API * exp(0.0011 * temp_F)), 1.2045);
        return resultado;
    }

    /*
    üåØ ========================================================================
    M√âTODO REFATORADO: C√ÅLCULO DE VISCOSIDADE DO √ìLEO
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO APLICADA:
    Substitui√ß√£o da convers√£o manual ¬∞C‚Üí¬∞F pelo m√©todo utilit√°rio,
    mantendo a mesma l√≥gica de c√°lculo calibrada para o MLS-3A.
    */
    double calcularViscosidadeOleo(double pressao_psi, double temperatura_C) {
        // C√°lculo de viscosidade calibrado para √≥leo MLS-3A (29.5¬∞ API)
        
        // USO DO M√âTODO UTILIT√ÅRIO (REFATORA√á√ÉO)
        double temp_F = celsiusParaFahrenheit(temperatura_C);
        
        // Viscosidade morta para √≥leo 29.5¬∞ API a 92¬∞C
        double viscosidade_base = 2.8; // cp - medido no MLS-3A
        
        // Corre√ß√£o por temperatura (Lei de Arrhenius modificada)
        double temp_ref = 92.0; // Temperatura de refer√™ncia MLS-3A
        double fator_temp = exp(500.0 * (1.0/(temperatura_C + 273.15) - 1.0/(temp_ref + 273.15)));
        
        // Corre√ß√£o por press√£o (compressibilidade isotermal)
        double press_ref = 2850.0; // Press√£o de refer√™ncia MLS-3A
        double fator_pressao = 1.0 + 2.5e-6 * (pressao_psi - press_ref);
        
        double resultado = viscosidade_base * fator_temp * fator_pressao;
        
        // Limitar ao range f√≠sico do √≥leo MLS-3A
        return std::max(1.8, std::min(resultado, LIMITE_VISCOSIDADE_CRITICO));
    }

    double calcularVazaoProducao(double pressao_reservatorio_psi) {
        // IPR (Inflow Performance Relationship) calibrada para MLS-3A
        double pi_atual = 8.2; // √çndice de produtividade atual MLS-3A (bopd/psi)
        double q_max = PRODUTIVIDADE_POCO_C;
        
        if (pressao_reservatorio_psi >= pressao_de_bolha_psi) {
            // Fluxo monof√°sico (acima da press√£o de bolha)
            double drawdown = pressao_reservatorio_psi - pressao_poco_psi;
            return pi_atual * drawdown * (1.0 - 0.1 * drawdown / pressao_reservatorio_psi);
        } else {
            // Fluxo bif√°sico (abaixo da press√£o de bolha) - Vogel's IPR modificado para MLS-3A
            double pr_pb = pressao_reservatorio_psi / pressao_de_bolha_psi;
            double pwf_pb = pressao_poco_psi / pressao_de_bolha_psi;
            
            // Vogel's equation calibrada para caracter√≠sticas do MLS-3A
            double qmax_at_pb = pi_atual * (pressao_reservatorio_psi - pressao_de_bolha_psi);
            double vogel_term = 1.0 - 0.2 * pwf_pb - 0.8 * pow(pwf_pb, 2);
            
            return qmax_at_pb + (q_max - qmax_at_pb) * vogel_term;
        }
    }

    void simularEfeitoProducao(double tempo_passado_s) {
        if (em_emergencia) {
            vazao_oleo_bopd = 0.0;
            vazao_producao = 0.0;  // üîÑ SINCRONIZA√á√ÉO: Ambas v√£o a zero na emerg√™ncia
            return;
        }
        
        // C√°lculo de vaz√£o baseado no IPR do MLS-3A
        vazao_oleo_bopd = calcularVazaoProducao(pressao_psi);
        vazao_producao = vazao_oleo_bopd;  // üîÑ SINCRONIZA√á√ÉO: Manter ambas propriedades iguais
        
        // Produ√ß√£o em barris neste intervalo
        double oleo_produzido_bbl = vazao_oleo_bopd * (tempo_passado_s / 86400.0);
        
        // Deple√ß√£o do volume de √≥leo (OOIP MLS-3A)
        volume_oleo_bbl -= oleo_produzido_bbl;
        if (volume_oleo_bbl < 0) volume_oleo_bbl = 0;
        
        // Decl√≠nio de press√£o baseado na curva real do MLS-3A
        // Taxa de decl√≠nio atual: ~8% ao ano = 0.00015 por dia
        double taxa_declinio_diaria = 0.00015; // Calibrada para MLS-3A
        double declinio_pressao = pressao_psi * taxa_declinio_diaria * (tempo_passado_s / 86400.0);
        
        // Fator de deple√ß√£o acelerada (baseado no OOIP original = 280 MM bbl)
        double recovery_factor = 1.0 - (volume_oleo_bbl / 280000000.0);
        declinio_pressao *= (1.0 + 2.0 * recovery_factor); // Acelera√ß√£o progressiva
        
        pressao_psi -= declinio_pressao;
        if (pressao_psi < 0) pressao_psi = 0;
        
        // Libera√ß√£o de g√°s livre (press√£o < press√£o de bolha)
        if (pressao_psi < pressao_de_bolha_psi) {
            // GOR aumenta conforme press√£o diminui (comportamento t√≠pico)
            double gor_increment = 200.0 * (pressao_de_bolha_psi - pressao_psi) / pressao_de_bolha_psi;
            gas_oil_ratio = std::min(gas_oil_ratio + gor_increment * (tempo_passado_s / 86400.0), LIMITE_GOR_CRITICO);
            volume_gas_m3 += oleo_produzido_bbl * gas_oil_ratio / 178.1; // Convers√£o scf para m¬≥
        }
        
        // Coning de √°gua (caracter√≠stico do MLS-3A)
        simularConingMLS3A();
        
        // Produ√ß√£o de √°gua (BSW crescente)
        double agua_produzida_bbl = oleo_produzido_bbl * water_oil_ratio;
        volume_agua_bbl += agua_produzida_bbl; // √Ågua produzida acumula
        
        // Varia√ß√£o operacional t√≠pica do MLS-3A (¬±2%)
        double variacao = ((rand() % 41) - 20) / 1000.0;
        vazao_oleo_bopd *= (1.0 + variacao);
        vazao_producao *= (1.0 + variacao);  // üîÑ SINCRONIZA√á√ÉO: Aplicar mesma varia√ß√£o
        
        // Aplicar limites operacionais do MLS-3A
        vazao_oleo_bopd = std::max(8000.0, std::min(vazao_oleo_bopd, 42000.0));
        vazao_producao = std::max(8000.0, std::min(vazao_producao, 42000.0));  // üîÑ SINCRONIZA√á√ÉO: Mesmos limites
    }

    void simularConingMLS3A() {
        // Coning caracter√≠stico do MLS-3A (baseado em 26 anos de dados)
        double drawdown = pressao_psi - pressao_poco_psi;
        double drawdown_critico = 900.0; // psi - limite para coning severo
        
        if (drawdown > drawdown_critico) {
            // Coning severo - aumento acelerado de BSW
            double incremento_bsw = 0.002; // 0.2% por ciclo
            water_oil_ratio += incremento_bsw;
            water_oil_ratio = std::min(water_oil_ratio, LIMITE_WOR_CRITICO);
            
            // Gas coning tamb√©m aumenta
            gas_oil_ratio += 15.0; // scf/bbl por ciclo
            gas_oil_ratio = std::min(gas_oil_ratio, LIMITE_GOR_CRITICO);
        } else {
            // Coning controlado - crescimento natural do BSW
            double anos_producao = tempo_simulacao_s / (365.25 * 86400.0);
            double bsw_natural = 0.15 + 0.008 * anos_producao; // Curva real MLS-3A
            water_oil_ratio = std::min(bsw_natural, LIMITE_WOR_CRITICO);
            
            // GOR se mant√©m est√°vel ou cresce lentamente
            if (gas_oil_ratio > 420.0) {
                gas_oil_ratio = std::max(420.0, gas_oil_ratio - 2.0);
            }
        }
    }

    void atualizarEstado(double tempo_passado_s) {
        viscosidade_oleo_cp = calcularViscosidadeOleo(pressao_psi, temperatura_C);
        simularEfeitoProducao(tempo_passado_s);
        verificarEmergencia();
        tempo_simulacao_s += tempo_passado_s;
    }

    void verificarEmergencia() {
        em_emergencia = false;
        em_emergencia = (
            pressao_psi < LIMITE_PRESSAO_CRITICO_MIN ||
            pressao_psi > LIMITE_PRESSAO_CRITICO_MAX ||
            viscosidade_oleo_cp > LIMITE_VISCOSIDADE_CRITICO ||
            volume_gas_m3 > LIMITE_GAS_CRITICO ||
            water_oil_ratio > LIMITE_WOR_CRITICO ||
            gas_oil_ratio > LIMITE_GOR_CRITICO
        );
    }

    // M√©todos de Interven√ß√£o
    void injetarAgua(double volume_bbl, double temp_inj_C) {
        volume_agua_bbl += volume_bbl;
        double fator_temp_pressao = 1.0 + (temp_inj_C - temperatura_C) / 100.0;
        pressao_psi += volume_bbl * FATOR_INJECAO_AGUA_BASE * fator_temp_pressao;
        temperatura_C += volume_bbl * 0.00001 * (temp_inj_C - temperatura_C) / volume_oleo_bbl;
    }

    void injetarGas(double volume_m3, double densidade_gas_ar) {
        volume_gas_m3 += volume_m3;
        double fator_densidade_pressao = 1.0 + (densidade_gas_ar - GRAVIDADE_GAS_PESO_AR) * 0.5;
        pressao_psi += volume_m3 * FATOR_INJECAO_GAS_BASE * fator_densidade_pressao;
    }

    void injetarVapor(double tempo_inundacao_s) {
        temperatura_C += tempo_inundacao_s * 0.1;
        temperatura_C = std::min(200.0, temperatura_C);
    }

    void liberarGasParaQueima(double vazao_scfd) {
        double gas_queimado_m3 = vazao_scfd / 35.315 * (1.0 / 86400.0);
        volume_gas_m3 -= gas_queimado_m3;
        volume_gas_m3 = std::max(0.0, volume_gas_m3);
        pressao_psi -= vazao_scfd * 0.0001;
        pressao_psi = std::max(0.0, pressao_psi);
    }

    /*
    üîß AJUSTE DE V√ÅLVULA CHOKE - CONTROLE DE PRODU√á√ÉO
    
    üìö CONCEITO EDUCACIONAL:
    A v√°lvula choke √© instalada na √°rvore de natal (christmas tree) e
    controla a vaz√£o de produ√ß√£o. √â uma das ferramentas mais importantes
    para otimiza√ß√£o da produ√ß√£o.
    
    üîÑ PRINC√çPIO DE OPERA√á√ÉO:
    ‚Ä¢ FECHAR v√°lvula ‚Üí ‚Üë Press√£o de fundo ‚Üí ‚Üì Vaz√£o
    ‚Ä¢ ABRIR v√°lvula ‚Üí ‚Üì Press√£o de fundo ‚Üí ‚Üë Vaz√£o
    
    ‚öôÔ∏è OTIMIZA√á√ÉO:
    ‚Ä¢ MUITO ABERTA: Water coning, produ√ß√£o de areia
    ‚Ä¢ MUITO FECHADA: Baixa vaz√£o, inefici√™ncia
    ‚Ä¢ PONTO √ìTIMO: M√°xima vaz√£o com controle de coning
    
    üèÜ AUTOMA√á√ÉO: Modernos sistemas ajustam automaticamente
    */
    void ajustarPressaoPoco(double ajuste_psi) {
        // APLICA O AJUSTE SOLICITADO
        pressao_poco_psi += ajuste_psi;
        
        // LIMITES F√çSICOS E OPERACIONAIS
        double pressao_min = 100.0;   // psi - Limite m√≠nimo para opera√ß√£o
        double pressao_max = 1000.0;  // psi - Limite m√°ximo da v√°lvula
        
        // Aplica os limites (clamp function)
        pressao_poco_psi = std::max(pressao_min, std::min(pressao_max, pressao_poco_psi));
        
        /*
        üìù NOTA EDUCACIONAL:
        O controle fino da press√£o de fundo √© uma arte! Engenheiros
        experientes sabem que pequenos ajustes podem ter grandes
        impactos na produ√ß√£o e na vida √∫til do po√ßo.
        
        üìà EXEMPLO REAL:
        No MLS-3A, reduzir Pwf de 2.000 para 1.900 psi pode:
        ‚Ä¢ Aumentar vaz√£o em 15%
        ‚Ä¢ Acelerar water coning em 30%
        ‚Ä¢ Reduzir vida √∫til em 2 anos
        
        ‚ö†Ô∏è DECIS√ÉO: Curto prazo vs longo prazo?
        */
    }

}; // üèÅ FIM DA CLASSE RESERVATORIO - MODELO COMPLETO DO MLS-3A!

/*
üéì ================================================================================
PARAB√âNS! VOC√ä COMPLETOU O ESTUDO DA CLASSE RESERVATORIO!
================================================================================

üìö O QUE VOC√ä APRENDEU:

1Ô∏è‚É£ PROPRIEDADES F√çSICAS: Press√£o, temperatura, viscosidade, volumes
2Ô∏è‚É£ CORRELA√á√ïES PETROLEIRAS: Standing, Vogel, Darcy
3Ô∏è‚É£ FEN√îMENOS OPERACIONAIS: Decl√≠nio, coning, deple√ß√£o
4Ô∏è‚É£ M√âTODOS DE CONTROLE: Inje√ß√£o, choke, flare
5Ô∏è‚É£ SISTEMAS DE SEGURAN√áA: Limites, shutdown, monitoramento

üèÜ DADOS REAIS: Tudo baseado no campo MLS-3A (Marlim Sul)
üî¨ VALIDA√á√ÉO: 26 anos de dados operacionais
üéØ APLICABILIDADE: Conhecimento direto da ind√∫stria brasileira

‚û°Ô∏è PR√ìXIMO PASSO: Estude a interface gr√°fica e sistema de visualiza√ß√£o!

================================================================================
*/

/*
üéì ================================================================================
üìä ESTRUTURA PARA ARMAZENAMENTO DE DADOS HIST√ìRICOS (DATA LOGGING)
================================================================================

üìö CONCEITO EDUCACIONAL:
Esta estrutura representa um "snapshot" (foto instant√¢nea) de todos os par√¢metros
operacionais do reservat√≥rio em um determinado momento no tempo. √â equivalente
aos dados coletados pelos sistemas SCADA em campos reais.

üíæ APLICA√á√ÉO INDUSTRIAL:
‚Ä¢ Sistemas da Petrobras coletam dados a cada 5-15 segundos
‚Ä¢ Permite an√°lise hist√≥rica (trending)
‚Ä¢ Base para relat√≥rios de produ√ß√£o
‚Ä¢ Detec√ß√£o de anomalias operacionais
‚Ä¢ Otimiza√ß√£o de reservat√≥rios

üìà FREQU√äNCIA DE COLETA:
Nosso simulador coleta dados a cada 5 segundos, igual aos sistemas reais!

================================================================================
*/

struct DadosPontos {
    /*
    üìö CAMPOS DE DADOS - EXPLICA√á√ÉO PARA ESTUDANTES:
    
    Cada campo representa uma grandeza fundamental na engenharia de reservat√≥rios:
    */
    
    double tempo_min;          // ‚è±Ô∏è Tempo decorrido [minutos]
                               //     CONCEITO: Eixo temporal para an√°lise de tend√™ncias
                               //     USO: Gr√°ficos de produ√ß√£o vs tempo
                               //     CONVERS√ÉO: segundos ‚Üí minutos (interface mais leg√≠vel)
    
    double vazao_oleo;         // üö¢ Taxa de produ√ß√£o de √≥leo [barris/dia]
                               //     CONCEITO: M√©trica principal de performance do po√ßo
                               //     IMPORT√ÇNCIA: Indica a sa√∫de econ√¥mica do campo
                               //     RANGE MLS-3A: 8.000-45.000 bopd (hist√≥rico)
    
    double pressao;            // üå°Ô∏è Press√£o do reservat√≥rio [psi]
                               //     CONCEITO: Energia que impulsiona a produ√ß√£o
                               //     DECL√çNIO: Natural com a deple√ß√£o do reservat√≥rio
                               //     CR√çTICO: Abaixo de 1.650 psi = shutdown
    
    double viscosidade_cp;     // üåØ Viscosidade din√¢mica do √≥leo [centipoise]
                               //     CONCEITO: Resist√™ncia do √≥leo ao escoamento
                               //     FATOR: Temperatura ‚Üë = Viscosidade ‚Üì (melhor!)
                               //     CONTROLE: Inje√ß√£o de vapor ou √°gua quente
    
    double volume_oleo;        // üõ¢Ô∏è Volume restante no reservat√≥rio [barris]
                               //     CONCEITO: OOIP atual (Oil Originally In Place)
                               //     DEPLE√á√ÉO: Diminui com a produ√ß√£o
                               //     META: Maximizar recovery factor (% recuperado)
    
    double temperatura;        // üå°Ô∏è Temperatura do reservat√≥rio [¬∞C]
                               //     CONCEITO: Afeta propriedades PVT dos fluidos
                               //     CONTROLE: Inje√ß√£o de vapor (EOR - Enhanced Oil Recovery)
                               //     CONSTANTE: ~92¬∞C no MLS-3A (geot√©rmica)
    
    double gor;               // ‚õΩ Gas-Oil Ratio [scf/bbl] (standard cubic feet per barrel)
                              //     CONCEITO: Volume de g√°s por barril de √≥leo produzido
                              //     PROBLEMA: GOR alto = bombeio menos eficiente
                              //     TEND√äNCIA: Aumenta com deple√ß√£o de press√£o
    
    double wor;               // üíß Water-Oil Ratio [adimensional]
                              //     CONCEITO: Equivale ao BSW (Basic Sediments & Water)
                              //     PROBLEMA: Water coning reduz produ√ß√£o de √≥leo
                              //     AUMENTO: Natural com a vida do campo
    
    /*
    üéØ IMPORT√ÇNCIA DO DATA LOGGING:
    
    ‚úÖ OPERA√á√ÉO DI√ÅRIA:
    ‚Ä¢ Detecta problemas antes que se tornem cr√≠ticos
    ‚Ä¢ Permite ajustes operacionais em tempo real
    ‚Ä¢ Otimiza a produ√ß√£o continuamente
    
    ‚úÖ PLANEJAMENTO:
    ‚Ä¢ Previs√£o de decl√≠nio de produ√ß√£o
    ‚Ä¢ Planejamento de interven√ß√µes (workover)
    ‚Ä¢ Decis√µes de abandono do po√ßo
    
    ‚úÖ REGULAT√ìRIO:
    ‚Ä¢ Relat√≥rios para ANP (Ag√™ncia Nacional do Petr√≥leo)
    ‚Ä¢ Controle de royalties e participa√ß√µes especiais
    ‚Ä¢ Auditoria e compliance
    */
};

/*
üéì ================================================================================
üìã CLASSE REPORTDIALOG - SISTEMA DE RELAT√ìRIOS OPERACIONAIS
================================================================================

üìö CONCEITO EDUCACIONAL:
Esta classe implementa um sistema de relat√≥rios similar ao usado na ind√∫stria
petrol√≠fera. √â equivalente aos relat√≥rios de produ√ß√£o di√°rios/mensais gerados
pelos sistemas SCADA da Petrobras.

üè≠ APLICA√á√ÉO INDUSTRIAL:
‚Ä¢ Relat√≥rios de performance di√°ria de po√ßos
‚Ä¢ Documenta√ß√£o para auditorias da ANP
‚Ä¢ An√°lise de efici√™ncia operacional
‚Ä¢ Base para tomada de decis√£o gerencial
‚Ä¢ Compliance regulat√≥rio

üíº PADR√ÉO INDUSTRIAL:
Relat√≥rios estruturados com HTML permitem:
‚Ä¢ Formata√ß√£o profissional
‚Ä¢ Integra√ß√£o com sistemas corporativos
‚Ä¢ Exporta√ß√£o para PDF/Excel
‚Ä¢ Padroniza√ß√£o visual

üìä DADOS INCLU√çDOS:
Todos os par√¢metros operacionais cr√≠ticos do MLS-3A em formato executivo.

================================================================================
*/

class ReportDialog : public QDialog {
    Q_OBJECT

public:
    /*
    üèóÔ∏è ========================================================================
    CONSTRUTOR - INICIALIZA√á√ÉO DO DI√ÅLOGO DE RELAT√ìRIOS
    ========================================================================
    
    üìö PARA ESTUDANTES: O construtor configura a janela e gera automaticamente
    o relat√≥rio com os dados atuais do reservat√≥rio.
    
    PAR√ÇMETROS:
    ‚Ä¢ reservatorio: Ponteiro para o objeto com dados atuais
    ‚Ä¢ dataPoints: Vetor com hist√≥rico de dados para an√°lises
    ‚Ä¢ parent: Widget pai (padr√£o Qt)
    */
    ReportDialog(Reservatorio* reservatorio, const QVector<DadosPontos>& dataPoints, QWidget* parent = nullptr) : QDialog(parent) {
        
        // CONFIGURA√á√ÉO DA JANELA
        setWindowTitle("üìã Relat√≥rio Operacional MLS-3A - Marlim Sul");
        setMinimumSize(800, 600);  // Tamanho m√≠nimo para visualiza√ß√£o adequada
        
        // LAYOUT PRINCIPAL (organiza√ß√£o vertical)
        QVBoxLayout* mainLayout = new QVBoxLayout(this);

        // √ÅREA DE TEXTO PARA O RELAT√ìRIO
        reportTextEdit = new QTextEdit(this);
        reportTextEdit->setReadOnly(true);  // Somente leitura (n√£o edit√°vel)
        
        // ESTILO PROFISSIONAL (similar aos sistemas corporativos)
        reportTextEdit->setStyleSheet(
            "background-color: #f0f0f0; "      // Fundo cinza claro
            "color: #333; "                     // Texto escuro 
            "font-family: monospace; "          // Fonte monoespa√ßada (mais t√©cnica)
            "font-size: 11px; "                 // Tamanho leg√≠vel
            "padding: 10px; "                   // Espa√ßamento interno
        );
        mainLayout->addWidget(reportTextEdit);

        // BOT√ÉO DE FECHAR
        QPushButton* closeButton = new QPushButton("üîö Fechar Relat√≥rio", this);
        closeButton->setStyleSheet(
            "QPushButton { "
                "background-color: #0078D4; "
                "color: white; "
                "font-weight: bold; "
                "padding: 8px 16px; "
                "border: none; "
                "border-radius: 4px; "
            "}"
            "QPushButton:hover { background-color: #106EBE; }"
        );
        mainLayout->addWidget(closeButton);

        // CONECTAR SINAL-SLOT (fechar janela quando bot√£o clicado)
        connect(closeButton, &QPushButton::clicked, this, &ReportDialog::accept);

        // GERAR O RELAT√ìRIO AUTOMATICAMENTE
        generateReports(reservatorio, dataPoints);
        
        /*
        üìù NOTA EDUCACIONAL:
        Este padr√£o (construtor que inicializa e gera conte√∫do) √© comum
        em aplica√ß√µes industriais onde relat√≥rios s√£o gerados automaticamente
        com base em dados operacionais atuais.
        */
    }

private:
    QTextEdit* reportTextEdit;  // Widget para exibir o relat√≥rio HTML

    /*
    üìä ========================================================================
    M√âTODO DE GERA√á√ÉO DE RELAT√ìRIOS - CORE DO SISTEMA
    ========================================================================
    
    üìö CONCEITO: Este m√©todo transforma dados t√©cnicos em um relat√≥rio
    executivo formatado, similar aos relat√≥rios da Petrobras/ANP.
    */
    void generateReports(Reservatorio* reservatorio, const QVector<DadosPontos>& dataPoints) {
        QString reportHtml;

        // CABE√áALHO DO RELAT√ìRIO (HTML estruturado)
        reportHtml += "<div style='text-align: center; margin-bottom: 20px;'>";
        reportHtml += "<h1 style='color: #0056b3; margin: 0;'>üõ¢Ô∏è PETROBRAS - RELAT√ìRIO OPERACIONAL</h1>";
        reportHtml += "<h2 style='color: #0056b3; margin: 5px 0;'>PO√áO MLS-3A - CAMPO DE MARLIM SUL</h2>";
        reportHtml += "<h3 style='color: #666; margin: 5px 0;'>BACIA DE CAMPOS - √ÅGUAS PROFUNDAS</h3>";
        reportHtml += "<hr style='border: 2px solid #0056b3; margin: 15px 0;'>";
        reportHtml += "</div>";

        // SE√á√ÉO PRINCIPAL - PAR√ÇMETROS OPERACIONAIS ATUAIS
        reportHtml += "<h2 style='color:#0056b3; background-color: #f8f9fa; padding: 8px; border-left: 4px solid #0056b3;'>";
        reportHtml += "üìà PAR√ÇMETROS OPERACIONAIS ATUAIS</h2>";
        
        reportHtml += "<table style='width: 100%; border-collapse: collapse; margin: 15px 0;'>";
        reportHtml += "<tr style='background-color: #e9ecef;'><th colspan='2' style='padding: 10px; text-align: center; font-size: 14px;'>DADOS DE PRODU√á√ÉO</th></tr>";
        
        // LINHA DE PRODU√á√ÉO (MAIS IMPORTANTE)
        reportHtml += QString("<tr style='background-color: %1;'><td style='padding: 8px; font-weight: bold; border: 1px solid #dee2e6;'>üö¢ Vaz√£o de √ìleo (atual):</td><td style='padding: 8px; border: 1px solid #dee2e6; font-weight: bold; font-size: 16px;'>%2 bopd</td></tr>")
                     .arg(reservatorio->vazao_oleo_bopd < reservatorio->PRODUCAO_MINIMA_ACEITAVEL_BOPD ? "#ffebee" : "#e8f5e8")
                     .arg(QString::number(reservatorio->vazao_oleo_bopd, 'f', 2));

        // PAR√ÇMETROS DO RESERVAT√ìRIO
        reportHtml += QString("<tr><td style='padding: 8px; border: 1px solid #dee2e6;'><b>üå°Ô∏è Press√£o do Reservat√≥rio:</b></td><td style='padding: 8px; border: 1px solid #dee2e6;'>%1 psi</td></tr>").arg(QString::number(reservatorio->pressao_psi, 'f', 2));
        reportHtml += QString("<tr style='background-color: #f8f9fa;'><td style='padding: 8px; border: 1px solid #dee2e6;'><b>üå°Ô∏è Temperatura do Reservat√≥rio:</b></td><td style='padding: 8px; border: 1px solid #dee2e6;'>%1 ¬∞C</td></tr>").arg(QString::number(reservatorio->temperatura_C, 'f', 2));
        reportHtml += QString("<tr><td style='padding: 8px; border: 1px solid #dee2e6;'><b>üåØ Viscosidade do √ìleo:</b></td><td style='padding: 8px; border: 1px solid #dee2e6;'>%1 cp</td></tr>").arg(QString::number(reservatorio->viscosidade_oleo_cp, 'f', 2));

        // RATIOS CR√çTICOS
        reportHtml += "<tr style='background-color: #e9ecef;'><th colspan='2' style='padding: 10px; text-align: center;'>RATIOS OPERACIONAIS</th></tr>";
        
        // GOR com c√≥digo de cores
        QString gorColor = reservatorio->gas_oil_ratio > reservatorio->LIMITE_GOR_CRITICO ? "#ffebee" : "#e8f5e8";
        reportHtml += QString("<tr style='background-color: %1;'><td style='padding: 8px; border: 1px solid #dee2e6;'><b>‚õΩ GOR (G√°s-√ìleo Ratio):</b></td><td style='padding: 8px; border: 1px solid #dee2e6;'>%2 scf/bbl</td></tr>")
                     .arg(gorColor).arg(QString::number(reservatorio->gas_oil_ratio, 'f', 2));

        // WOR com c√≥digo de cores  
        QString worColor = reservatorio->water_oil_ratio > reservatorio->LIMITE_WOR_CRITICO ? "#ffebee" : "#e8f5e8";
        reportHtml += QString("<tr style='background-color: %1;'><td style='padding: 8px; border: 1px solid #dee2e6;'><b>üíß WOR (√Ågua-√ìleo Ratio):</b></td><td style='padding: 8px; border: 1px solid #dee2e6;'>%2 (BSW: %3%)</td></tr>")
                     .arg(worColor).arg(QString::number(reservatorio->water_oil_ratio, 'f', 3)).arg(QString::number(reservatorio->water_oil_ratio * 100, 'f', 1));

        // STATUS OPERACIONAL (MAIS CR√çTICO)
        QString statusText = reservatorio->em_emergencia ? 
            "<span style='color: red; font-weight: bold; font-size: 16px;'>‚ö†Ô∏è SISTEMA EM EMERG√äNCIA</span>" : 
            "<span style='color: green; font-weight: bold; font-size: 16px;'>‚úÖ OPERA√á√ÉO NORMAL</span>";
        reportHtml += QString("<tr style='background-color: %1;'><td style='padding: 12px; font-weight: bold; border: 1px solid #dee2e6;'>üîç Status do Sistema:</td><td style='padding: 12px; border: 1px solid #dee2e6; text-align: center;'>%2</td></tr>")
                     .arg(reservatorio->em_emergencia ? "#ffebee" : "#e8f5e8").arg(statusText);
        
        reportHtml += "</table>";

        // SE√á√ÉO DE VOLUMES E RESERVAS
        reportHtml += "<h3 style='color:#0056b3; margin-top: 25px;'>üìä VOLUMES E RESERVAS</h3>";
        reportHtml += "<table style='width: 100%; border-collapse: collapse;'>";
        reportHtml += QString("<tr><td style='padding: 6px; border: 1px solid #dee2e6;'><b>üõ¢Ô∏è Volume de √ìleo Restante:</b></td><td style='padding: 6px; border: 1px solid #dee2e6;'>%1 bbl</td></tr>").arg(QString::number(reservatorio->volume_oleo_bbl, 'f', 0));
        reportHtml += QString("<tr style='background-color: #f8f9fa;'><td style='padding: 6px; border: 1px solid #dee2e6;'><b>‚õΩ Volume de G√°s Livre:</b></td><td style='padding: 6px; border: 1px solid #dee2e6;'>%1 m¬≥</td></tr>").arg(QString::number(reservatorio->volume_gas_m3, 'f', 0));
        reportHtml += QString("<tr><td style='padding: 6px; border: 1px solid #dee2e6;'><b>üíß Volume de √Ågua Total:</b></td><td style='padding: 6px; border: 1px solid #dee2e6;'>%1 bbl</td></tr>").arg(QString::number(reservatorio->volume_agua_bbl, 'f', 0));
        reportHtml += "</table>";

        // RODAP√â INSTITUCIONAL
        reportHtml += "<div style='margin-top: 30px; padding: 15px; background-color: #f8f9fa; border-left: 4px solid #0056b3;'>";
        reportHtml += "<p style='margin: 0; font-size: 10px; color: #666;'>";
        reportHtml += "üìã <b>RELAT√ìRIO GERADO AUTOMATICAMENTE</b> pelo Sistema SCADA MLS-3A<br>";
        reportHtml += "üè¢ <b>PETROBRAS</b> - Petr√≥leo Brasileiro S.A.<br>";
        reportHtml += "üåä <b>CAMPO:</b> Marlim Sul ‚Ä¢ <b>BACIA:</b> Campos ‚Ä¢ <b>ESTADO:</b> Rio de Janeiro<br>";
        reportHtml += "‚ö° <b>SISTEMA:</b> Qt5 SCADA Educational Simulator v1.0<br>";
        QString timestamp = QDateTime::currentDateTime().toString("dd/MM/yyyy hh:mm:ss");
        reportHtml += QString("üïê <b>GERADO EM:</b> %1").arg(timestamp);
        reportHtml += "</p></div>";

        // APLICAR HTML AO WIDGET
        reportTextEdit->setHtml(reportHtml);
        
        /*
        üìù NOTA EDUCACIONAL:
        Este formato de relat√≥rio √© padr√£o na ind√∫stria petrol√≠fera:
        ‚Ä¢ HTML para formata√ß√£o flex√≠vel
        ‚Ä¢ C√≥digos de cores para alertas visuais
        ‚Ä¢ Estrutura tabular para f√°cil leitura
        ‚Ä¢ Informa√ß√µes institucionais completas
        ‚Ä¢ Timestamp para auditoria
        */
    }
};

/*
üéì ================================================================================
üñ•Ô∏è CLASSE PRINCIPAL DA APLICA√á√ÉO - INTERFACE SCADA EDUCACIONAL
================================================================================

üìö CONCEITO EDUCACIONAL:
Esta √© a classe principal do simulador, equivalente a uma esta√ß√£o SCADA
(Supervisory Control and Data Acquisition) usada na ind√∫stria petrol√≠fera.
Integra todos os componentes em uma interface profissional.

üè≠ SISTEMAS SCADA REAIS:
‚Ä¢ Sala de controle da Petrobras em Maca√© (CENPES)  
‚Ä¢ Controle remoto de plataformas offshore
‚Ä¢ Monitoramento 24h/7dias de centenas de po√ßos
‚Ä¢ Integra√ß√£o com sistemas corporativos (SAP, PI System)

üéØ COMPONENTES PRINCIPAIS:
‚Ä¢ Dashboard com indicadores em tempo real
‚Ä¢ Gr√°ficos de tend√™ncia hist√≥rica
‚Ä¢ Controles operacionais (v√°lvulas, bombas, inje√ß√£o)
‚Ä¢ Sistema de alarmes e emerg√™ncia
‚Ä¢ Gera√ß√£o autom√°tica de relat√≥rios

üíª TECNOLOGIA:
Qt5 - Mesmo framework usado em sistemas industriais reais da Petrobras.

================================================================================
*/

class SimuladorWindow : public QMainWindow {
    Q_OBJECT

public:
    /*
    üèóÔ∏è ========================================================================
    CONSTRUTOR PRINCIPAL - INICIALIZA√á√ÉO DO SISTEMA SCADA
    ========================================================================
    
    üìö PARA ESTUDANTES: O construtor √© executado quando o programa inicia.
    Aqui configuramos todo o sistema: interface, gr√°ficos, simula√ß√£o e timers.
    
    üîÑ SEQU√äNCIA DE INICIALIZA√á√ÉO:
    1. Gerador de n√∫meros aleat√≥rios (para varia√ß√µes operacionais)
    2. Modelo f√≠sico do reservat√≥rio MLS-3A
    3. Sistema de temporiza√ß√£o (5 segundos como sistemas reais)
    4. Interface gr√°fica (SCADA) 
    5. Sistema de gr√°ficos e visualiza√ß√£o
    6. In√≠cio da simula√ß√£o autom√°tica
    */
    SimuladorWindow(QWidget *parent = nullptr) : QMainWindow(parent) {
        /*
        üé≤ GERADOR DE N√öMEROS ALEAT√ìRIOS:
        Inicializa com timestamp atual para simular varia√ß√µes operacionais
        naturais (ru√≠do de sensores, flutua√ß√µes de produ√ß√£o, etc.)
        */
        srand(static_cast<unsigned int>(time(nullptr)));
        
        /*
        üèóÔ∏è CRIA√á√ÉO DOS OBJETOS PRINCIPAIS:
        */
        // MODELO F√çSICO: Cria inst√¢ncia do reservat√≥rio MLS-3A
        reservatorio = new Reservatorio();  
        
        /*
        üéÆ SISTEMA DIN√ÇMICO: Inicializar motor de eventos estoc√°sticos
        üìö FASE 1.1 IMPLEMENTADA: Motor completo com 11 tipos de eventos
        */
        motor_dinamico = new MotorEventosDinamicos();
        motor_dinamico->setNivelRealismo(NivelRealismo::EDUCACIONAL);  // Come√ßar suave
        
        // TIMER DE SIMULA√á√ÉO: Controla o passo de tempo da simula√ß√£o
        simulationTimer = new QTimer(this);  // Timer Qt (gerenciado pelo pai)
        
        // CONECTA timer ‚Üí gameLoop (padr√£o signal-slot do Qt)
        connect(simulationTimer, &QTimer::timeout, this, &SimuladorWindow::gameLoop);
        
        /*
        üé® INICIALIZA√á√ÉO DA INTERFACE GR√ÅFICA:
        M√©todo modular para organizar melhor o c√≥digo
        */
        setupUI();         // Constr√≥i toda a interface SCADA
        setupCharts();     // Configura os gr√°ficos de tend√™ncia

        /*
        ‚è∞ INICIALIZA√á√ÉO DIFERIDA (100ms ap√≥s interface pronta):
        
        üìö CONCEITO: QTimer::singleShot executa uma fun√ß√£o ap√≥s delay.
        √â usado para garantir que a interface esteja completamente
        constru√≠da antes de iniciar a simula√ß√£o.
        */
        QTimer::singleShot(100, this, [this]() {
            
            /*
            üîÑ IN√çCIO DA SIMULA√á√ÉO EM TEMPO REAL:
            5 segundos = Frequ√™ncia t√≠pica de sistemas SCADA reais
            */
            simulationTimer->start(5000);  // 5000ms = 5 segundos
            
            /*
            üì¢ MENSAGENS DE BOAS-VINDAS (LOG EDUCACIONAL):
            Informa ao usu√°rio sobre os dados reais utilizados
            */
            logMessage("üéì SIMULADOR EDUCACIONAL MLS-3A INICIADO - BEM-VINDO!");
            logMessage("üèÜ Po√ßo: Marlim Sul (Bacia de Campos) - 26 anos de dados reais", "info");
            logMessage("üìà Par√¢metros calibrados com dados da Petrobras/ANP:", "info");
            logMessage("‚Ä¢ Press√£o: 2.850 psi ‚Ä¢ Temp: 92¬∞C ‚Ä¢ API: 29,5¬∞ ‚Ä¢ PI: 8,2 bopd/psi", "info");
            logMessage("‚Ä¢ Produ√ß√£o: 22.000 bopd ‚Ä¢ BSW: 23% ‚Ä¢ GOR: 420 scf/bbl", "info");  
            logMessage("‚ÑπÔ∏è Timestep: 5s (realismo operacional) ‚Ä¢ Interface: SCADA Qt5", "info");
            logMessage("üìö Para estudantes: Explore os gr√°ficos, teste interven√ß√µes!", "info");
            
            /*
            üìà INICIALIZA√á√ÉO DOS GR√ÅFICOS:
            For√ßa primeira atualiza√ß√£o dos gr√°ficos para garantir funcionamento
            */
            atualizarGraficosSeNecessario(true);
            
            /*
            üí° DICA EDUCACIONAL:
            Esta estrutura de inicializa√ß√£o (timer diferido + log de status)
            √© padr√£o em sistemas industriais reais para:
            ‚Ä¢ Verificar se todos os subsistemas est√£o funcionando
            ‚Ä¢ Registrar o in√≠cio de opera√ß√£o para auditoria
            ‚Ä¢ Informar operadores sobre o estado inicial do sistema
            */
        });
    }

    /*
    üíÄ ========================================================================
    DESTRUTOR - CLEANUP SEGURO DO SISTEMA
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL: 
    O destrutor √© chamado automaticamente quando o programa termina.
    √â fundamental para sistemas industriais garantir shutdown seguro.
    
    ‚ö†Ô∏è IMPORT√ÇNCIA NA IND√öSTRIA:
    ‚Ä¢ Evita vazamentos de mem√≥ria
    ‚Ä¢ Para processos de forma controlada  
    ‚Ä¢ Salva dados cr√≠ticos antes do encerramento
    ‚Ä¢ Desliga equipamentos com seguran√ßa
    */
    ~SimuladorWindow() {
        /*
        ‚èπÔ∏è PARADA CONTROLADA DO TIMER:
        Verifica se o timer existe e est√° ativo antes de parar.
        Evita crashes durante o shutdown.
        */
        if (simulationTimer && simulationTimer->isActive()) {
            simulationTimer->stop();  // Para a simula√ß√£o em tempo real
        }
        
        /*
        üßπ LIMPEZA DE MEM√ìRIA:
        Libera a mem√≥ria alocada para o modelo do reservat√≥rio.
        O Qt gerencia automaticamente os widgets filhos.
        */
        delete reservatorio;
        
        /*
        üìù NOTA EDUCACIONAL:
        Em sistemas reais, o destrutor tamb√©m pode:
        ‚Ä¢ Fechar conex√µes de rede/banco de dados
        ‚Ä¢ Salvar estado atual em arquivo de recupera√ß√£o
        ‚Ä¢ Enviar sinal de shutdown para outros sistemas
        ‚Ä¢ Registrar timestamp de encerramento no log
        */
    }

private slots:
    // Slot para o loop da simula√ß√£o
    void gameLoop() {
        if (reservatorio->volume_oleo_bbl <= 0) {
            logMessage("Reservat√≥rio esgotado. Fim da vida √∫til do campo.", "critico");
            // simulationTimer->stop();
            // return;
        }

        if (isProducing) {
            // Simular 5 segundos de opera√ß√£o real a cada ciclo
            reservatorio->atualizarEstado(5.0);
            
            /*
            üéÆ SISTEMA DIN√ÇMICO - FASE 1.1 ATIVO:
            Processa eventos estoc√°sticos a cada ciclo de simula√ß√£o
            üìö CONCEITO: Simula a imprevisibilidade de um campo real
            */
            if (motor_dinamico) {
                motor_dinamico->processar(*reservatorio, 5.0);  // 5 segundos
                
                // Log de eventos ativos (apenas se houver eventos)
                int eventos_ativos = motor_dinamico->getNumeroEventosAtivos();
                if (eventos_ativos > 0 && static_cast<int>(reservatorio->tempo_simulacao_s) % 60 == 0) {
                    logMessage(QString("üéØ Sistema Din√¢mico: %1 evento(s) ativo(s)").arg(eventos_ativos), "info");
                }
            }
        } else {
            // Mesmo sem produ√ß√£o, o tempo avan√ßa
            reservatorio->verificarEmergencia();
            reservatorio->tempo_simulacao_s += 5.0;
            
            /*
            üéÆ EVENTOS DIN√ÇMICOS TAMB√âM EM STANDBY:
            Alguns eventos (manuten√ß√£o, sensor drift) podem ocorrer mesmo parado
            */
            if (motor_dinamico) {
                motor_dinamico->processar(*reservatorio, 5.0);
            }
        }

        // Salvar dados a cada ciclo (representa coleta de dados operacionais)
        // Em um sistema real, isso seria equivalent a dados coletados a cada 5 segundos
        saveDataPoint();

        // Verificar e exibir alertas e sugest√µes
        if (reservatorio->em_emergencia) {
            logMessage("ALERTA CR√çTICO: Shutdown Autom√°tico!", "critico");
            suggestInputWater->setPlaceholderText("Emerg√™ncia");
            suggestInputGas->setPlaceholderText("Emerg√™ncia");
            suggestInputVapor->setPlaceholderText("Emerg√™ncia");
            suggestInputFlare->setPlaceholderText("Emerg√™ncia");
            inputTempAgua->setPlaceholderText("Emerg√™ncia");
            inputDensidadeGas->setPlaceholderText("Emerg√™ncia");
            suggestionExplanationLabel->setText("O sistema est√° em estado de emerg√™ncia e todas as a√ß√µes foram bloqueadas por seguran√ßa. A produ√ß√£o foi interrompida.");
        } else {
            suggestInterventions();
            
            // Alertas com frequ√™ncia controlada (como sistemas reais)
            // Verifica alertas cr√≠ticos a cada 30 segundos (6 ciclos)
            if (static_cast<int>(reservatorio->tempo_simulacao_s) % 30 == 0) {
                if (reservatorio->pressao_psi < 2500) {
                    logMessage("AVISO: Press√£o do reservat√≥rio em decl√≠nio. Inje√ß√£o de √°gua ou g√°s pode ser necess√°ria.", "alerta");
                } else if (reservatorio->viscosidade_oleo_cp > 4.0) {
                    logMessage("AVISO: Viscosidade do √≥leo alta. Inje√ß√£o de vapor ou √°gua quente pode ser necess√°ria.", "alerta");
                }
            }
        }
        updateUI();
        updateIcons(); // Chamada para atualizar os √≠cones SCADA
    }

    void onActionButtonClicked() {
        QPushButton* button = qobject_cast<QPushButton*>(sender());
        if (!button) return;

        if (reservatorio->em_emergencia) {
            QMessageBox::warning(this, "Erro", "O sistema de emerg√™ncia est√° ativo. Interven√ß√µes est√£o bloqueadas.");
            return;
        }

        QString buttonName = button->objectName();
        bool ok;

        if (buttonName == "inj_agua_btn") {
            double volume = suggestInputWater->text().toDouble(&ok);
            double temp = inputTempAgua->text().toDouble(&ok);
            if (ok) {
                reservatorio->injetarAgua(volume, temp);
                logMessage(QString("Injetando %1 bbl de √°gua a %2¬∞C.").arg(volume).arg(temp), "acao");
            } else {
                QMessageBox::warning(this, "Erro de Entrada", "Por favor, insira valores num√©ricos para a inje√ß√£o de √°gua e temperatura.");
            }
        } else if (buttonName == "inj_gas_btn") {
            double volume = suggestInputGas->text().toDouble(&ok);
            double densidade = inputDensidadeGas->text().toDouble(&ok);
            if (ok) {
                reservatorio->injetarGas(volume, densidade);
                logMessage(QString("Injetando %1 m¬≥ de g√°s com densidade de %2.").arg(volume).arg(densidade), "acao");
            } else {
                QMessageBox::warning(this, "Erro de Entrada", "Por favor, insira valores num√©ricos para a inje√ß√£o de g√°s e densidade.");
            }
        } else if (buttonName == "inj_vapor_btn") {
            double tempo = suggestInputVapor->text().toDouble(&ok);
            if (ok) {
                reservatorio->injetarVapor(tempo);
                logMessage(QString("Injetando vapor por %1 segundos.").arg(tempo), "acao");
            } else {
                QMessageBox::warning(this, "Erro de Entrada", "Por favor, insira um valor num√©rico para a inje√ß√£o de vapor.");
            }
        } else if (buttonName == "flare_btn") {
            double vazao = suggestInputFlare->text().toDouble(&ok);
            if (ok) {
                reservatorio->liberarGasParaQueima(vazao);
                logMessage(QString("Acionando libera√ß√£o de g√°s (flare) com vaz√£o de %1 scfd.").arg(vazao), "acao");
            } else {
                QMessageBox::warning(this, "Erro de Entrada", "Por favor, insira um valor num√©rico para a vaz√£o de libera√ß√£o de g√°s.");
            }
        } else if (buttonName == "abrir_valv_btn") {
            reservatorio->ajustarPressaoPoco(-50.0);
            logMessage("Abrindo a v√°lvula de choke. Aumento de vaz√£o esperado.", "acao");
        } else if (buttonName == "fechar_valv_btn") {
            reservatorio->ajustarPressaoPoco(50.0);
            logMessage("Fechando a v√°lvula de choke. Redu√ß√£o de vaz√£o esperada.", "acao");
        } else if (buttonName == "parar_prod_btn") {
            isProducing = false;
            logMessage("Produ√ß√£o interrompida para manuten√ß√£o.", "critico");
        } else if (buttonName == "iniciar_prod_btn") {
            isProducing = true;
            logMessage("Produ√ß√£o retomada.", "acao");
        }
    }

    void onGenerateReportsClicked() {
        ReportDialog dialog(reservatorio, dataPoints, this);
        dialog.exec();
    }

    /*
    üìä ========================================================================
    M√âTODOS DE CONTROLE DE PERIODICIDADE DOS GR√ÅFICOS
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Implementa√ß√£o de controles interativos para diferentes granularidades
    temporais, permitindo an√°lise adapt√°vel √†s necessidades operacionais.
    */
    
    void onPeriodoChanged(int index) {
        // Atualizar per√≠odo baseado na sele√ß√£o
        periodoGraficoSegundos = periodoSelector->itemData(index).toInt();
        
        // Reset do controle temporal
        ultimoTempoGrafico = obterTempoMinutos();
        
        // Log educacional da mudan√ßa
        QString periodoTexto = periodoSelector->currentText();
        logMessage(QString("üìä Per√≠odo de gr√°ficos alterado para: %1").arg(periodoTexto), "info");
        
        // For√ßar atualiza√ß√£o imediata dos gr√°ficos com nova periodicidade
        atualizarGraficosSeNecessario(true);
    }
    
    /*
    üéÆ ====================================================================
    CONTROLE DE N√çVEL DE REALISMO - FASE 1.3
    ====================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Permite que educadores e estudantes ajustem a intensidade dos eventos
    estoc√°sticos conforme o n√≠vel de conhecimento e objetivos pedag√≥gicos.
    */
    void onRealismoChanged(int index) {
        if (!motor_dinamico) return;  // Verifica√ß√£o de seguran√ßa
        
        // Obter n√≠vel selecionado do item data
        int nivel_int = realismoSelector->itemData(index).toInt();
        NivelRealismo novo_nivel = static_cast<NivelRealismo>(nivel_int);
        
        // Atualizar motor din√¢mico
        motor_dinamico->setNivelRealismo(novo_nivel);
        
        // Log educacional da mudan√ßa com explica√ß√£o pedag√≥gica
        QString nivelTexto = realismoSelector->currentText();
        QString explicacao;
        
        switch (novo_nivel) {
            case NivelRealismo::EDUCACIONAL:
                explicacao = "Eventos mais suaves e previs√≠veis para aprendizado inicial";
                break;
            case NivelRealismo::OPERACIONAL:
                explicacao = "Probabilidades reais baseadas em estat√≠sticas da Bacia de Campos";
                break;
            case NivelRealismo::EXTREMO:
                explicacao = "Cen√°rios intensos para treinamento avan√ßado";
                break;
            case NivelRealismo::HISTORICO:
                explicacao = "Replica eventos reais do campo MLS-3A (1999-2025)";
                break;
        }
        
        logMessage(QString("üéØ N√≠vel de Realismo alterado: %1").arg(nivelTexto), "info");
        logMessage(QString("üìö %1").arg(explicacao), "info");
        
        // Se h√° eventos ativos, informar sobre poss√≠vel mudan√ßa de intensidade
        int eventos_ativos = motor_dinamico->getNumeroEventosAtivos();
        if (eventos_ativos > 0) {
            logMessage(QString("‚ö° %1 evento(s) ativo(s) continuar√£o com nova intensidade").arg(eventos_ativos), "alerta");
        }
    }
    
    void onClearChartsClicked() {
        // Limpar todos os gr√°ficos
        producaoSeries->clear();
        pressaoSeries->clear();
        volumeOleoSeries->clear();
        temperaturaSeries->clear();
        viscosidadeSeries->clear();
        gorSeries->clear();
        worSeries->clear();
        
        // Reset do controle temporal
        ultimoTempoGrafico = 0.0;
        
        logMessage("üóëÔ∏è Gr√°ficos limpos - Iniciando nova coleta de dados", "info");
    }

    void onDownloadCSVClicked() {
        if (dataPoints.isEmpty()) {
            QMessageBox::warning(this, "Erro", "Nenhum dado para baixar. A simula√ß√£o ainda n√£o gerou pontos.");
            return;
        }

        QString fileName = "simulacao_petroleo.csv";
        QFile file(fileName);
        if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
            QTextStream out(&file);
            // Removida a coluna de pre√ßo
            out << "tempo_min,vazao_oleo_bopd,pressao_psi,viscosidade_cp,volume_oleo_bbl,temperatura_C,GOR,WOR\n";
            /*
            üìä EXPORTA√á√ÉO DE DADOS (REFATORADO):
            Uso do m√©todo utilit√°rio formatarCampoNumerico() para
            consist√™ncia na formata√ß√£o dos valores exportados
            */
            for (const auto& point : dataPoints) {
                out << point.tempo_min << ","
                    << formatarCampoNumerico(point.vazao_oleo) << ","
                    << formatarCampoNumerico(point.pressao) << ","
                    << formatarCampoNumerico(point.viscosidade_cp) << ","
                    << formatarCampoNumerico(point.volume_oleo) << ","
                    << formatarCampoNumerico(point.temperatura) << ","
                    << formatarCampoNumerico(point.gor) << ","
                    << formatarCampoNumerico(point.wor) << "\n";
            }
            file.close();
            QMessageBox::information(this, "Sucesso", "Arquivo CSV baixado com sucesso!");
        } else {
            QMessageBox::critical(this, "Erro", "N√£o foi poss√≠vel abrir o arquivo para escrita.");
        }
    }

private:
    /*
    üéì ================================================================================
    ‚öôÔ∏è M√âTODOS UTILIT√ÅRIOS SCADA - REFATORA√á√ÉO DE INTERFACE  
    ================================================================================
    
    üìö CONCEITO EDUCACIONAL:
    M√©todos utilit√°rios espec√≠ficos para opera√ß√µes repetitivas da interface
    SCADA, seguindo princ√≠pios de Clean Code e DRY (Don't Repeat Yourself).
    
    üè≠ PADR√ïES INDUSTRIAIS:
    ‚Ä¢ Consist√™ncia visual em todos os elementos
    ‚Ä¢ C√≥digos de cores padronizados por criticidade  
    ‚Ä¢ Formata√ß√£o num√©rica uniforme
    ‚Ä¢ Facilidade de manuten√ß√£o e auditoria
    
    ================================================================================
    */

    /*
    üìä ========================================================================
    M√âTODO UTILIT√ÅRIO: FORMATA√á√ÉO DE CAMPOS NUM√âRICOS DA INTERFACE
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO:
    Centraliza a formata√ß√£o de n√∫meros para exibi√ß√£o na interface,
    eliminando repeti√ß√£o de QString::number() com par√¢metros id√™nticos.
    
    üéØ PADRONIZA√á√ÉO SCADA:
    ‚Ä¢ 2 casas decimais: Padr√£o para par√¢metros operacionais
    ‚Ä¢ 0 casas decimais: Volumes grandes (milh√µes de barris)
    ‚Ä¢ Consist√™ncia visual em toda a interface
    
    PAR√ÇMETROS:
    ‚Ä¢ valor: N√∫mero a ser formatado
    ‚Ä¢ precisao: Casas decimais (padr√£o: 2)
    
    RETORNA: QString formatado para interface
    */
    QString formatarCampoNumerico(double valor, int precisao = 2) const {
        return QString::number(valor, 'f', precisao);
    }

    /*
    ‚è±Ô∏è ========================================================================
    M√âTODO UTILIT√ÅRIO: CONVERS√ÉO TEMPO PARA INTERFACE
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO:
    Centraliza convers√£o segundos‚Üíminutos usada nos gr√°ficos e logs,
    eliminando duplica√ß√£o da opera√ß√£o tempo_simulacao_s / 60.0.
    
    üè≠ APLICA√á√ÉO SCADA:
    ‚Ä¢ Eixos temporais dos gr√°ficos
    ‚Ä¢ Logs de eventos
    ‚Ä¢ Relat√≥rios operacionais
    
    RETORNA: Tempo atual em minutos para interface
    */
    double obterTempoMinutos() const {
        return reservatorio->segundosParaMinutos(reservatorio->tempo_simulacao_s);
    }

    /*
    üé® ========================================================================
    M√âTODO UTILIT√ÅRIO: DETERMINA√á√ÉO DE CORES DE STATUS
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO:
    Centraliza l√≥gica de cores baseadas em limites operacionais,
    eliminando repeti√ß√£o de condicionais tern√°rios complexos.
    
    üö¶ C√ìDIGO DE CORES INDUSTRIAL:
    ‚Ä¢ Verde: Opera√ß√£o normal
    ‚Ä¢ Amarelo/Laranja: Aten√ß√£o/Alerta  
    ‚Ä¢ Vermelho: Cr√≠tico/Emerg√™ncia
    
    PAR√ÇMETROS:
    ‚Ä¢ valor: Valor atual do par√¢metro
    ‚Ä¢ limite_alerta: Threshold de aten√ß√£o
    ‚Ä¢ limite_critico: Threshold cr√≠tico
    ‚Ä¢ invertido: true se valores baixos s√£o cr√≠ticos
    
    RETORNA: String com nome da cor
    */
    QString determinarCorStatus(double valor, double limite_alerta, double limite_critico, bool invertido = false) const {
        if (invertido) {
            // Para par√¢metros onde valores BAIXOS s√£o cr√≠ticos (ex: press√£o, vaz√£o)
            if (valor < limite_critico) return "red";
            if (valor < limite_alerta) return "orange"; 
            return "green";
        } else {
            // Para par√¢metros onde valores ALTOS s√£o cr√≠ticos (ex: temperatura, GOR)
            if (valor > limite_critico) return "red";
            if (valor > limite_alerta) return "orange";
            return "green";
        }
    }

    /*
    üìà ========================================================================
    VARI√ÅVEIS DE CONTROLE DE GR√ÅFICOS INTERATIVOS
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Sistema de periodicidade para dashboards SCADA industriais, permitindo
    diferentes n√≠veis de granularidade temporal para an√°lise operacional.
    
    üè≠ APLICA√á√ÉO INDUSTRIAL:
    ‚Ä¢ Monitoramento em tempo real (1-5min) para opera√ß√£o
    ‚Ä¢ An√°lise de tend√™ncias m√©dias (30-60min) para otimiza√ß√£o  
    ‚Ä¢ Vis√£o estrat√©gica (1 dia) para planejamento
    */
    
    // Vari√°veis de estado original
    Reservatorio* reservatorio;
    bool isProducing = true;
    QTimer* simulationTimer;
    QVector<DadosPontos> dataPoints;
    
    /*
    üéÆ SISTEMA DIN√ÇMICO - FASE 1.1:
    Motor de eventos estoc√°sticos para realismo industrial
    */
    MotorEventosDinamicos* motor_dinamico;

    // Sistema de controle de periodicidade dos gr√°ficos
    int periodoGraficoSegundos = 60;        // Per√≠odo atual em segundos (padr√£o: 1 minuto)
    double ultimoTempoGrafico = 0.0;        // √öltimo tempo que atualizou gr√°ficos  
    QComboBox* periodoSelector;             // Seletor de per√≠odo na interface
    
    /*
    üéÆ SISTEMA DIN√ÇMICO - CONTROLE DE INTERFACE:
    */
    QComboBox* realismoSelector;            // Seletor de n√≠vel de realismo

    // Elementos da interface
    QVector<QLabel*> indicatorLabels;
    QTextEdit* logTextEdit;
    QLineEdit* suggestInputWater;
    QLineEdit* inputTempAgua;
    QLineEdit* suggestInputGas;
    QLineEdit* inputDensidadeGas;
    QLineEdit* suggestInputVapor;
    QLineEdit* suggestInputFlare;
    QLabel* suggestionExplanationLabel;

    // Gr√°ficos
    QLineSeries *producaoSeries;
    QLineSeries *minProducaoSeries;
    QLineSeries *pressaoSeries;
    QLineSeries *volumeOleoSeries;
    QLineSeries *temperaturaSeries;
    QLineSeries *viscosidadeSeries;
    QLineSeries *gorSeries;
    QLineSeries *worSeries;

    // Novos elementos para os √≠cones SCADA
    QLabel* pressaoIconLabel;
    QLabel* temperaturaIconLabel;
    QLabel* vazaoIconLabel;
    QLabel* gorIconLabel;
    QLabel* statusIconLabel;

    // Estiliza√ß√£o dos √≠cones SVG
    const QString svgTemplate = "<svg xmlns='http://www.w3.org/2000/svg' width='48' height='48' viewBox='0 0 24 24'><path fill='%1' d='%2'/></svg>";
    const QString iconPressaoPath = "M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2zm0 18a8 8 0 1 1 8-8 8 8 0 0 1-8 8zM12 4a1.5 1.5 0 0 1 1.5 1.5V12a1.5 1.5 0 0 1-3 0V5.5A1.5 1.5 0 0 1 12 4zM12 12a1 1 0 1 1 1-1 1 1 0 0 1-1 1z'/>";
    const QString iconTemperaturaPath = "M12 3a3 3 0 0 0-3 3v5a5 5 0 0 0 5 5h1a5 5 0 0 0 5-5V6a3 3 0 0 0-3-3zm0 2h3a1 1 0 0 1 1 1v5a3 3 0 0 1-3 3h-1a3 3 0 0 1-3-3V6a1 1 0 0 1 1-1zM10 17v5h4v-5z'/>";
    const QString iconVazaoPath = "M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2zm0 18a8 8 0 1 1 8-8 8 8 0 0 1-8 8zm0-12a4 4 0 1 0 4 4 4 4 0 0 0-4-4z'/>";
    const QString iconGorPath = "M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2zm0 18a8 8 0 1 1 8-8 8 8 0 0 1-8 8zM12 6a1 1 0 0 1 1 1v5a1 1 0 0 1-2 0V7a1 1 0 0 1 1-1zM12 14a1 1 0 1 1 1-1 1 1 0 0 1-1 1z'/>";
    const QString iconStatusPath = "M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2z'/>";

    QIcon createIcon(const QString& color, const QString& path) {
        QString svg = svgTemplate.arg(color, path);
        QByteArray data(svg.toUtf8());
        QBuffer buffer(&data);
        QIcon icon;
        QSize size(48, 48);
        icon.addPixmap(QPixmap::fromImage(QImage::fromData(data, "SVG")), QIcon::Normal, QIcon::On);
        return icon;
    }

    void setupUI() {
        setWindowTitle("Simulador MLS-3A - Po√ßo Marlim Sul (Bacia de Campos)");
        setMinimumSize(1400, 900);

        // Widget principal com scroll
        QScrollArea* scrollArea = new QScrollArea(this);
        QWidget* centralWidget = new QWidget();
        scrollArea->setWidget(centralWidget);
        scrollArea->setWidgetResizable(true);
        setCentralWidget(scrollArea);
        
        // Tema visual melhorado com fundo preto
        setStyleSheet(
            "QMainWindow { background-color: #000000; }"
            "QScrollArea { background-color: #000000; border: none; }"
            "QWidget { background-color: #000000; color: #FFFFFF; }"
            "QGroupBox { "
                "background-color: #1a1a1a; "
                "border: 2px solid #333333; "
                "border-radius: 8px; "
                "margin-top: 8px; "
                "padding-top: 10px; "
                "font-weight: bold; "
            "}"
            "QGroupBox::title { "
                "subcontrol-origin: margin; "
                "subcontrol-position: top center; "
                "padding: 0 8px; "
                "color: #00AAFF; "
            "}"
            "QPushButton { "
                "background-color: #2d2d2d; "
                "border: 2px solid #555555; "
                "border-radius: 6px; "
                "padding: 8px; "
                "font-weight: bold; "
                "min-height: 25px; "
            "}"
            "QPushButton:hover { background-color: #404040; border-color: #777777; }"
            "QPushButton:pressed { background-color: #1a1a1a; }"
            "QLineEdit { "
                "background-color: #2d2d2d; "
                "border: 2px solid #555555; "
                "border-radius: 4px; "
                "padding: 5px; "
                "selection-background-color: #0078d4; "
            "}"
            "QLabel { color: #FFFFFF; }"
            "QTextEdit { "
                "background-color: #1a1a1a; "
                "border: 2px solid #333333; "
                "border-radius: 6px; "
                "color: #CCCCCC; "
            "}"
        );
        
        QVBoxLayout* mainLayout = new QVBoxLayout(centralWidget);
        mainLayout->setSpacing(15);
        mainLayout->setContentsMargins(20, 20, 20, 20);

        // Se√ß√£o de √çcones SCADA em GroupBox
        QGroupBox* scadaGroupBox = new QGroupBox("Monitor SCADA - Status em Tempo Real");
        QHBoxLayout* scadaIconsLayout = new QHBoxLayout(scadaGroupBox);
        scadaIconsLayout->setAlignment(Qt::AlignCenter);
        scadaIconsLayout->setSpacing(30);

        // Cria√ß√£o dos √≠cones SCADA com estilo melhorado
        auto createScadaIcon = [this, scadaIconsLayout](const QString& name, const QString& tooltip) -> QLabel* {
            QVBoxLayout* iconLayout = new QVBoxLayout();
            QLabel* iconLabel = new QLabel();
            iconLabel->setFixedSize(60, 60);
            iconLabel->setAlignment(Qt::AlignCenter);
            iconLabel->setToolTip(tooltip);
            
            QLabel* textLabel = new QLabel(name);
            textLabel->setAlignment(Qt::AlignCenter);
            textLabel->setStyleSheet("color: #FFFFFF; font-weight: bold; font-size: 12px; margin-top: 5px;");
            
            QWidget* container = new QWidget();
            QVBoxLayout* containerLayout = new QVBoxLayout(container);
            containerLayout->addWidget(iconLabel);
            containerLayout->addWidget(textLabel);
            containerLayout->setSpacing(5);
            containerLayout->setContentsMargins(10, 5, 10, 5);
            
            scadaIconsLayout->addWidget(container);
            return iconLabel;
        };

        pressaoIconLabel = createScadaIcon("Press√£o", "Status da Press√£o do Reservat√≥rio");
        temperaturaIconLabel = createScadaIcon("Temperatura", "Status da Temperatura do Reservat√≥rio");  
        vazaoIconLabel = createScadaIcon("Vaz√£o", "Status da Vaz√£o de Produ√ß√£o de √ìleo");
        gorIconLabel = createScadaIcon("GOR", "Status do G√°s-√ìleo Ratio");
        statusIconLabel = createScadaIcon("Sistema", "Status Geral do Sistema");

        mainLayout->addWidget(scadaGroupBox);

        // Se√ß√£o de Indicadores Principais em Grid
        QGroupBox* indicatorsGroupBox = new QGroupBox("Indicadores Operacionais");
        QGridLayout* indicatorsLayout = new QGridLayout(indicatorsGroupBox);
        indicatorsLayout->setSpacing(15);
        
        QStringList titles = {"Produ√ß√£o de Petr√≥leo", "Press√£o do Reservat√≥rio", "Volume de √ìleo", "Temperatura", "Viscosidade", "GOR", "WOR"};
        QStringList units = {"bopd", "psi", "bbl", "¬∞C", "cp", "ratio", "ratio"};
        
        for (int i = 0; i < titles.size(); ++i) {
            // Container para cada indicador
            QFrame* indicatorFrame = new QFrame();
            indicatorFrame->setFrameStyle(QFrame::Box | QFrame::Raised);
            indicatorFrame->setLineWidth(1);
            indicatorFrame->setStyleSheet(
                "QFrame { "
                    "background-color: #2a2a2a; "
                    "border: 2px solid #444444; "
                    "border-radius: 8px; "
                    "padding: 10px; "
                "}"
            );
            
            QVBoxLayout* boxLayout = new QVBoxLayout(indicatorFrame);
            boxLayout->setSpacing(5);
            
            QLabel* titleLabel = new QLabel(titles[i], this);
            titleLabel->setAlignment(Qt::AlignCenter);
            titleLabel->setStyleSheet("font-weight: bold; font-size: 12px; color: #CCCCCC; margin-bottom: 5px;");
            titleLabel->setWordWrap(true);
            
            QLabel* valueLabel = new QLabel("0", this);
            valueLabel->setAlignment(Qt::AlignCenter);
            valueLabel->setStyleSheet("font-size: 20px; font-weight: bold; color: #00FF00; min-height: 30px;");
            indicatorLabels.append(valueLabel);
            
            /*
            üìè ====================================================================
            AJUSTE DE LAYOUT: UNIDADES DE MEDIDA COM FONTE AUMENTADA
            ====================================================================
            
            üìö MELHORIA DE USABILIDADE:
            Aumento da fonte das unidades de medida de 10px para 13px para
            melhor legibilidade dos indicadores operacionais.
            
            üè≠ BENEF√çCIO INDUSTRIAL:
            ‚Ä¢ Identifica√ß√£o mais r√°pida das unidades pelos operadores
            ‚Ä¢ Redu√ß√£o de erros de interpreta√ß√£o de grandezas
            ‚Ä¢ Padr√£o mais adequado para dashboards industriais
            ‚Ä¢ Melhor experi√™ncia visual em monitores grandes (SCADA)
            */
            QLabel* unitLabel = new QLabel(units[i], this);
            unitLabel->setAlignment(Qt::AlignCenter);
            unitLabel->setStyleSheet(
                "font-size: 13px; "      // AUMENTADO: 10px ‚Üí 13px (+30% legibilidade)
                "color: #888888; "       // Cor mantida (contraste adequado)
                "margin-top: 2px; "      // Espa√ßamento mantido
                "font-weight: 500;"      // NOVO: Peso ligeiramente aumentado para destaque
            );
            
            boxLayout->addWidget(titleLabel);
            boxLayout->addWidget(valueLabel);
            boxLayout->addWidget(unitLabel);
            
            // Posicionamento em grid (2 linhas)
            int row = i < 4 ? 0 : 1;
            int col = i < 4 ? i : i - 4;
            indicatorsLayout->addWidget(indicatorFrame, row, col);
        }
        
        mainLayout->addWidget(indicatorsGroupBox);

        // Se√ß√£o de Monitoramento e Gr√°ficos
        QHBoxLayout* monitoringLayout = new QHBoxLayout();
        
        /*
        üìà ====================================================================
        CONTROLE DE PERIODICIDADE DE GR√ÅFICOS - DASHBOARD INTERATIVO
        ====================================================================
        
        üìö CONCEITO EDUCACIONAL:
        Implementa√ß√£o de controle de granularidade temporal para an√°lise
        de dados operacionais, similar aos sistemas SCADA industriais.
        
        üè≠ BENEF√çCIO INDUSTRIAL:
        ‚Ä¢ Flexibilidade de an√°lise conforme necessidade operacional
        ‚Ä¢ Redu√ß√£o de ru√≠do visual em an√°lises de longo prazo  
        ‚Ä¢ Otimiza√ß√£o de performance para grandes volumes de dados
        ‚Ä¢ Adequa√ß√£o a diferentes perfis de usu√°rio (operador vs gestor)
        */
        
        // Container vertical para controles de gr√°fico + gr√°ficos
        QVBoxLayout* chartsContainerLayout = new QVBoxLayout();
        QWidget* chartsContainer = new QWidget();
        chartsContainer->setLayout(chartsContainerLayout);
        
        // Controle de periodicidade dos gr√°ficos
        QHBoxLayout* periodControlLayout = new QHBoxLayout();
        
        QLabel* periodLabel = new QLabel("üìä Per√≠odo de Atualiza√ß√£o dos Gr√°ficos:");
        periodLabel->setStyleSheet("font-weight: bold; color: #00AAFF; font-size: 12px; margin-right: 10px;");
        
        periodoSelector = new QComboBox();
        periodoSelector->addItem("‚ö° 1 Minuto (Tempo Real)", 60);
        periodoSelector->addItem("üîÑ 5 Minutos (Operacional)", 300); 
        periodoSelector->addItem("üìà 10 Minutos (Supervis√£o)", 600);
        periodoSelector->addItem("üìä 30 Minutos (Tend√™ncia)", 1800);
        periodoSelector->addItem("üïê 1 Hora (An√°lise)", 3600);
        periodoSelector->addItem("üìÖ 1 Dia (Estrat√©gico)", 86400);
        
        periodoSelector->setCurrentIndex(0); // Padr√£o: 1 minuto
        periodoSelector->setStyleSheet(
            "QComboBox { "
                "background-color: #2d2d2d; "
                "border: 2px solid #555555; "
                "border-radius: 4px; "
                "padding: 6px; "
                "font-weight: bold; "
                "min-width: 200px; "
                "color: #FFFFFF; "
            "}"
            "QComboBox:hover { border-color: #777777; }"
            "QComboBox::drop-down { "
                "border: none; "
            "}"
            "QComboBox QAbstractItemView { "
                "background-color: #2d2d2d; "
                "border: 1px solid #555555; "
                "color: #FFFFFF; "
                "selection-background-color: #0078d4; "
            "}"
        );
        
        // Bot√£o para limpar gr√°ficos
        QPushButton* clearChartsBtn = new QPushButton("üóëÔ∏è Limpar Gr√°ficos");
        clearChartsBtn->setStyleSheet(
            "QPushButton { "
                "background-color: #DC3545; "
                "border: none; "
                "color: white; "
                "font-weight: bold; "
                "padding: 6px 12px; "
                "border-radius: 4px; "
            "}"
            "QPushButton:hover { background-color: #C82333; }"
        );
        
        periodControlLayout->addWidget(periodLabel);
        periodControlLayout->addWidget(periodoSelector);
        
        /*
        üéÆ CONTROLE DE N√çVEL DE REALISMO DO SISTEMA DIN√ÇMICO - FASE 1.3:
        Permite ao usu√°rio/educador ajustar a intensidade dos eventos estoc√°sticos
        */
        QLabel* realismoLabel = new QLabel("üéØ N√≠vel de Realismo:");
        realismoLabel->setStyleSheet("font-weight: bold; color: #FF6B35; font-size: 12px; margin-left: 30px; margin-right: 10px;");
        
        realismoSelector = new QComboBox();
        realismoSelector->addItem("üéì Educacional (30%)", static_cast<int>(NivelRealismo::EDUCACIONAL));
        realismoSelector->addItem("üè≠ Operacional (100%)", static_cast<int>(NivelRealismo::OPERACIONAL));
        realismoSelector->addItem("‚ö° Extremo (200%)", static_cast<int>(NivelRealismo::EXTREMO));
        realismoSelector->addItem("üìú Hist√≥rico MLS-3A (150%)", static_cast<int>(NivelRealismo::HISTORICO));
        
        realismoSelector->setCurrentIndex(0); // Padr√£o: Educacional
        realismoSelector->setStyleSheet(
            "QComboBox { "
                "background-color: #2d2d2d; "
                "border: 2px solid #FF6B35; "
                "border-radius: 4px; "
                "padding: 6px; "
                "font-weight: bold; "
                "min-width: 180px; "
                "color: #FFFFFF; "
            "}"
            "QComboBox:hover { border-color: #FF8C55; background-color: #353535; }"
            "QComboBox::drop-down { border: none; }"
            "QComboBox QAbstractItemView { "
                "background-color: #2d2d2d; "
                "border: 2px solid #FF6B35; "
                "selection-background-color: #FF6B35; "
                "color: #FFFFFF; "
            "}"
        );
        
        periodControlLayout->addWidget(realismoLabel);
        periodControlLayout->addWidget(realismoSelector);
        periodControlLayout->addWidget(clearChartsBtn);
        periodControlLayout->addStretch(); // Espa√ßo flex√≠vel
        
        chartsContainerLayout->addLayout(periodControlLayout);
        
        // Gr√°ficos organizados em abas
        QTabWidget* chartsTabWidget = new QTabWidget();
        chartsTabWidget->setStyleSheet(
            "QTabWidget::pane { border: 2px solid #333333; background-color: #1a1a1a; }"
            "QTabBar::tab { "
                "background-color: #2d2d2d; "
                "border: 2px solid #555555; "
                "padding: 8px 16px; "
                "margin-right: 2px; "
                "border-top-left-radius: 6px; "
                "border-top-right-radius: 6px; "
            "}"
            "QTabBar::tab:selected { "
                "background-color: #404040; "
                "border-bottom-color: #1a1a1a; "
            "}"
            "QTabBar::tab:hover { background-color: #383838; }"
        );

        // Inicializar s√©ries
        producaoSeries = new QLineSeries();
        producaoSeries->setName("Vaz√£o de √ìleo (bopd)");
        minProducaoSeries = new QLineSeries();
        minProducaoSeries->setColor(Qt::red);
        minProducaoSeries->setName("M√≠nimo Aceit√°vel");

        pressaoSeries = new QLineSeries();
        pressaoSeries->setName("Press√£o do Reservat√≥rio (psi)");

        volumeOleoSeries = new QLineSeries();
        volumeOleoSeries->setName("Volume de √ìleo (bbl)");

        temperaturaSeries = new QLineSeries();
        temperaturaSeries->setName("Temperatura (¬∞C)");

        viscosidadeSeries = new QLineSeries();
        viscosidadeSeries->setName("Viscosidade (cp)");

        gorSeries = new QLineSeries();
        gorSeries->setName("GOR");

        worSeries = new QLineSeries();
        worSeries->setName("WOR");

        // Adicionar gr√°ficos √†s abas
        chartsTabWidget->addTab(createChart("Produ√ß√£o de √ìleo", producaoSeries), "Produ√ß√£o");
        chartsTabWidget->addTab(createChart("Press√£o do Reservat√≥rio", pressaoSeries), "Press√£o");
        chartsTabWidget->addTab(createChart("Volume de √ìleo", volumeOleoSeries), "Volume");
        chartsTabWidget->addTab(createChart("Temperatura", temperaturaSeries), "Temperatura");
        chartsTabWidget->addTab(createChart("Viscosidade", viscosidadeSeries), "Viscosidade");
        
        // Aba combinada para ratios
        QWidget* ratiosWidget = new QWidget();
        QVBoxLayout* ratiosLayout = new QVBoxLayout(ratiosWidget);
        ratiosLayout->addWidget(createChart("GOR (Gas-Oil Ratio)", gorSeries));
        ratiosLayout->addWidget(createChart("WOR (Water-Oil Ratio)", worSeries));
        chartsTabWidget->addTab(ratiosWidget, "Ratios");

        chartsContainerLayout->addWidget(chartsTabWidget);

        monitoringLayout->addWidget(chartsContainer, 3);

        // Log de eventos com t√≠tulo
        QGroupBox* logGroupBox = new QGroupBox("Log de Eventos do Sistema");
        QVBoxLayout* logLayout = new QVBoxLayout(logGroupBox);
        
        logTextEdit = new QTextEdit();
        logTextEdit->setReadOnly(true);
        logTextEdit->setMinimumHeight(300);
        /*
        üìù ========================================================================
        AJUSTE DE LAYOUT: FONTE DO LOG DE EVENTOS AUMENTADA
        ========================================================================
        
        üìö MELHORIA DE USABILIDADE:
        Aumento da fonte de 11px para 14px para melhor legibilidade do log
        de eventos, facilitando o monitoramento operacional em tempo real.
        
        üè≠ BENEF√çCIO INDUSTRIAL:
        ‚Ä¢ Melhor visibilidade para operadores em salas de controle
        ‚Ä¢ Redu√ß√£o da fadiga visual em turnos longos (12h)
        ‚Ä¢ Facilita identifica√ß√£o r√°pida de eventos cr√≠ticos
        ‚Ä¢ Padr√£o mais adequado para monitores industriais
        */
        logTextEdit->setStyleSheet(
            "QTextEdit { "
                "background-color: #0a0a0a; "
                "border: 1px solid #333333; "
                "color: #CCCCCC; "
                "font-family: 'Courier New', monospace; "
                "font-size: 14px; "  // AUMENTADO: 11px ‚Üí 14px (+27% legibilidade)
            "}"
        );
        logLayout->addWidget(logTextEdit);
        
        monitoringLayout->addWidget(logGroupBox, 1);
        
        mainLayout->addLayout(monitoringLayout);

        // Se√ß√£o de Controles Operacionais
        QHBoxLayout* controlsLayout = new QHBoxLayout();
        
        // Controles de Interven√ß√£o em grid
        QGroupBox* interventionGroupBox = new QGroupBox("Controles de Interven√ß√£o");
        QGridLayout* interventionGrid = new QGridLayout(interventionGroupBox);
        interventionGrid->setSpacing(10);

        // Helper function para criar controle de interven√ß√£o
        auto createInterventionControl = [this](const QString& title, const QString& param1Label, 
                                              const QString& param1Default, const QString& param2Label = "",
                                              const QString& param2Default = "") -> QWidget* {
            QFrame* frame = new QFrame();
            frame->setFrameStyle(QFrame::StyledPanel);
            frame->setStyleSheet(
                "QFrame { "
                    "background-color: #252525; "
                    "border: 1px solid #444444; "
                    "border-radius: 6px; "
                    "padding: 8px; "
                "}"
            );
            
            QVBoxLayout* frameLayout = new QVBoxLayout(frame);
            frameLayout->setSpacing(8);
            
            // T√≠tulo
            QLabel* titleLabel = new QLabel(title);
            titleLabel->setStyleSheet("font-weight: bold; color: #00AAFF; font-size: 12px;");
            titleLabel->setAlignment(Qt::AlignCenter);
            frameLayout->addWidget(titleLabel);
            
            // Par√¢metros
            QGridLayout* paramsLayout = new QGridLayout();
            paramsLayout->setSpacing(5);
            
            QLabel* label1 = new QLabel(param1Label);
            label1->setStyleSheet("font-size: 10px; color: #CCCCCC;");
            QLineEdit* input1 = new QLineEdit(param1Default);
            input1->setValidator(new QDoubleValidator(this));
            input1->setFixedWidth(80);
            
            paramsLayout->addWidget(label1, 0, 0);
            paramsLayout->addWidget(input1, 0, 1);
            
            QLineEdit* input2 = nullptr;
            if (!param2Label.isEmpty()) {
                QLabel* label2 = new QLabel(param2Label);
                label2->setStyleSheet("font-size: 10px; color: #CCCCCC;");
                input2 = new QLineEdit(param2Default);
                input2->setValidator(new QDoubleValidator(this));
                input2->setFixedWidth(80);
                
                paramsLayout->addWidget(label2, 1, 0);
                paramsLayout->addWidget(input2, 1, 1);
            }
            
            frameLayout->addLayout(paramsLayout);
            
            // Bot√£o de a√ß√£o
            QPushButton* actionBtn = new QPushButton("Executar");
            actionBtn->setStyleSheet(
                "QPushButton { "
                    "background-color: #0078D4; "
                    "border: none; "
                    "color: white; "
                    "font-weight: bold; "
                    "padding: 6px; "
                    "border-radius: 4px; "
                "}"
                "QPushButton:hover { background-color: #106EBE; }"
                "QPushButton:pressed { background-color: #005A9E; }"
            );
            
            frameLayout->addWidget(actionBtn);
            
            // Armazenar refer√™ncias dos inputs
            frame->setProperty("input1", QVariant::fromValue((QObject*)input1));
            if (input2) frame->setProperty("input2", QVariant::fromValue((QObject*)input2));
            frame->setProperty("button", QVariant::fromValue((QObject*)actionBtn));
            
            return frame;
        };
        
        // Criar controles de interven√ß√£o
        QWidget* waterControl = createInterventionControl("Inje√ß√£o de √Ågua", "Volume (bbl)", "1000", "Temp (¬∞C)", "100");
        QWidget* gasControl = createInterventionControl("Inje√ß√£o de G√°s", "Volume (m¬≥)", "5000", "Densidade", "0.7");
        QWidget* vaporControl = createInterventionControl("Inje√ß√£o de Vapor", "Tempo (s)", "500");
        /*
        üî• ====================================================================
        TERMINOLOGIA H√çBRIDA: EDUCACIONAL + T√âCNICA
        ====================================================================
        
        üìö ABORDAGEM EDUCACIONAL IMPLEMENTADA:
        "Libera√ß√£o de G√°s (Flare)" - Combina clareza did√°tica com precis√£o t√©cnica
        
        ‚Ä¢ DID√ÅTICO PRIMEIRO: "Libera√ß√£o de G√°s" explica a FUN√á√ÉO
        ‚Ä¢ T√âCNICO ENTRE PAR√äNTESES: "(Flare)" ensina o TERMO INDUSTRIAL
        ‚Ä¢ PROGRESS√ÉO NATURAL: Fun√ß√£o ‚Üí Terminologia t√©cnica
        
        üè≠ BENEF√çCIO EDUCACIONAL:
        Estudantes entendem o prop√≥sito antes de aprender o jarg√£o t√©cnico,
        preparando-os adequadamente para a realidade industrial.
        */
        QWidget* flareControl = createInterventionControl("Libera√ß√£o de G√°s (Flare)", "Vaz√£o (scfd)", "5000");
        
        /*
        üí° ====================================================================
        TOOLTIP EDUCACIONAL: SISTEMA DE LIBERA√á√ÉO DE G√ÅS (FLARE)
        ====================================================================
        
        üìö EXPLICA√á√ÉO T√âCNICA PARA ESTUDANTES:
        Adicionando tooltip com explica√ß√£o completa do sistema flare para
        contexto educacional, conectando fun√ß√£o √† terminologia industrial.
        */
        flareControl->setToolTip(
            "üî• LIBERA√á√ÉO DE G√ÅS (FLARE) - SISTEMA DE SEGURAN√áA\n\n"
            "üìö FUN√á√ÉO:\n"
            "‚Ä¢ Queima controlada de gases excedentes\n"
            "‚Ä¢ Sistema de al√≠vio de press√£o por seguran√ßa\n"
            "‚Ä¢ Controle de emiss√µes (melhor queimar que liberar metano)\n\n"
            "üõ¢Ô∏è APLICA√á√ÉO NO MLS-3A:\n"
            "‚Ä¢ Remove g√°s livre em excesso do sistema\n"
            "‚Ä¢ Previne ac√∫mulo perigoso de gases\n"
            "‚Ä¢ Mant√©m efici√™ncia das bombas (evita gas-lock)\n\n"
            "‚ö° OPERA√á√ÉO:\n"
            "‚Ä¢ Vaz√£o t√≠pica: 5.000-15.000 scfd\n"
            "‚Ä¢ Acionamento autom√°tico por alta press√£o\n"
            "‚Ä¢ Monitoramento cont√≠nuo de emiss√µes\n\n"
            "üè≠ REALIDADE INDUSTRIAL:\n"
            "Presente em todas as plataformas offshore da Petrobras.\n"
            "A 'tocha' vis√≠vel nas plataformas √© exatamente este sistema!"
        );
        
        // Posicionar controles em grid 2x2
        interventionGrid->addWidget(waterControl, 0, 0);
        interventionGrid->addWidget(gasControl, 0, 1);
        interventionGrid->addWidget(vaporControl, 1, 0);
        interventionGrid->addWidget(flareControl, 1, 1);
        
        // Recuperar refer√™ncias dos inputs
        suggestInputWater = qobject_cast<QLineEdit*>(waterControl->property("input1").value<QObject*>());
        inputTempAgua = qobject_cast<QLineEdit*>(waterControl->property("input2").value<QObject*>());
        QPushButton* waterBtn = qobject_cast<QPushButton*>(waterControl->property("button").value<QObject*>());
        waterBtn->setObjectName("inj_agua_btn");
        
        suggestInputGas = qobject_cast<QLineEdit*>(gasControl->property("input1").value<QObject*>());
        inputDensidadeGas = qobject_cast<QLineEdit*>(gasControl->property("input2").value<QObject*>());
        QPushButton* gasBtn = qobject_cast<QPushButton*>(gasControl->property("button").value<QObject*>());
        gasBtn->setObjectName("inj_gas_btn");
        
        suggestInputVapor = qobject_cast<QLineEdit*>(vaporControl->property("input1").value<QObject*>());
        QPushButton* vaporBtn = qobject_cast<QPushButton*>(vaporControl->property("button").value<QObject*>());
        vaporBtn->setObjectName("inj_vapor_btn");
        
        suggestInputFlare = qobject_cast<QLineEdit*>(flareControl->property("input1").value<QObject*>());
        QPushButton* flareBtn = qobject_cast<QPushButton*>(flareControl->property("button").value<QObject*>());
        flareBtn->setObjectName("flare_btn");

        controlsLayout->addWidget(interventionGroupBox, 2);
        
        // Coluna direita com controles de produ√ß√£o e sistema
        QVBoxLayout* rightControlsLayout = new QVBoxLayout();
        
        // Controles de Produ√ß√£o
        QGroupBox* productionGroupBox = new QGroupBox("Controles de Produ√ß√£o");
        QVBoxLayout* productionLayout = new QVBoxLayout(productionGroupBox);
        
        // Bot√µes de produ√ß√£o com estilo
        auto createProductionButton = [](const QString& text, const QString& objName, const QString& color) -> QPushButton* {
            QPushButton* btn = new QPushButton(text);
            btn->setObjectName(objName);
            btn->setMinimumHeight(40);
            btn->setStyleSheet(QString(
                "QPushButton { "
                    "background-color: %1; "
                    "border: none; "
                    "color: white; "
                    "font-weight: bold; "
                    "border-radius: 6px; "
                    "font-size: 12px; "
                "}"
                "QPushButton:hover { background-color: %2; }"
                "QPushButton:pressed { background-color: %3; }"
            ).arg(color).arg(color + "CC").arg(color + "AA"));
            return btn;
        };
        
        QPushButton* startBtn = createProductionButton("‚ñ∂ Iniciar Produ√ß√£o", "iniciar_prod_btn", "#28A745");
        QPushButton* stopBtn = createProductionButton("‚è∏ Parar Produ√ß√£o", "parar_prod_btn", "#DC3545");
        QPushButton* openValveBtn = createProductionButton("‚¨Ü Abrir V√°lvula", "abrir_valv_btn", "#17A2B8");
        QPushButton* closeValveBtn = createProductionButton("‚¨á Fechar V√°lvula", "fechar_valv_btn", "#FD7E14");
        
        productionLayout->addWidget(startBtn);
        productionLayout->addWidget(stopBtn);
        productionLayout->addWidget(openValveBtn);
        productionLayout->addWidget(closeValveBtn);
        
        rightControlsLayout->addWidget(productionGroupBox);
        
        // Sugest√µes do Sistema
        QGroupBox* suggestionGroupBox = new QGroupBox("Sugest√µes Inteligentes");
        QVBoxLayout* suggestionLayout = new QVBoxLayout(suggestionGroupBox);
        
suggestionExplanationLabel = new QLabel("üéì SISTEMA DE ENSINO INTELIGENTE:\n\nü§ñ Este painel fornece sugest√µes educacionais baseadas nas condi√ß√µes operacionais.\n\nüí° Explore diferentes interven√ß√µes e observe como cada a√ß√£o afeta os par√¢metros do reservat√≥rio!\n\nüìà Acompanhe os gr√°ficos para entender as rela√ß√µes causa-efeito.");
        suggestionExplanationLabel->setStyleSheet(
            "color: #CCCCCC; "
            "font-style: italic; "
            "padding: 10px; "
            "background-color: #1a1a1a; "
            "border: 1px solid #333333; "
            "border-radius: 4px; "
            "font-size: 11px; "
        );
        suggestionExplanationLabel->setWordWrap(true);
        suggestionExplanationLabel->setMinimumHeight(80);
        
        suggestionLayout->addWidget(suggestionExplanationLabel);
        rightControlsLayout->addWidget(suggestionGroupBox);
        
        // Bot√µes de Sistema
        QGroupBox* systemGroupBox = new QGroupBox("Sistema e Relat√≥rios");
        QVBoxLayout* systemLayout = new QVBoxLayout(systemGroupBox);
        
        QPushButton* reportBtn = createProductionButton("üìä Gerar Relat√≥rios", "report_btn", "#6F42C1");
        QPushButton* downloadBtn = createProductionButton("üíæ Exportar CSV", "download_csv_btn", "#20C997");
        
        systemLayout->addWidget(reportBtn);
        systemLayout->addWidget(downloadBtn);
        
        rightControlsLayout->addWidget(systemGroupBox);
        rightControlsLayout->addStretch(); // Espa√ßo flex√≠vel no final
        
        controlsLayout->addLayout(rightControlsLayout, 1);
        mainLayout->addLayout(controlsLayout);

        // Conecta os bot√µes aos slots
        connect(waterBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(gasBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(vaporBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(flareBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(startBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(stopBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(openValveBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(closeValveBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(reportBtn, &QPushButton::clicked, this, &SimuladorWindow::onGenerateReportsClicked);
        connect(downloadBtn, &QPushButton::clicked, this, &SimuladorWindow::onDownloadCSVClicked);
        
        // Conectar controles de periodicidade dos gr√°ficos
        connect(periodoSelector, QOverload<int>::of(&QComboBox::currentIndexChanged), 
                this, &SimuladorWindow::onPeriodoChanged);
        connect(clearChartsBtn, &QPushButton::clicked, this, &SimuladorWindow::onClearChartsClicked);
        
        /*
        üéÆ CONECTAR CONTROLE DE REALISMO - FASE 1.3:
        Quando usu√°rio muda n√≠vel de realismo, atualiza motor din√¢mico
        */
        connect(realismoSelector, QOverload<int>::of(&QComboBox::currentIndexChanged), 
                this, &SimuladorWindow::onRealismoChanged);
    }

    /*
    üìà ========================================================================
    M√âTODO DE CRIA√á√ÉO DE GR√ÅFICOS - SISTEMA DE VISUALIZA√á√ÉO INDUSTRIAL
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Este m√©todo cria gr√°ficos de linha profissionais similares aos usados
    em sistemas SCADA da ind√∫stria petrol√≠fera. Cada gr√°fico mostra a
    evolu√ß√£o temporal de um par√¢metro operacional.
    
    üè≠ APLICA√á√ÉO INDUSTRIAL:
    ‚Ä¢ Trending em tempo real (similar ao PI System da OSIsoft)
    ‚Ä¢ Detec√ß√£o visual de anomalias operacionais
    ‚Ä¢ An√°lise de correla√ß√£o entre vari√°veis
    ‚Ä¢ Base para otimiza√ß√£o de processos
    
    PAR√ÇMETROS:
    ‚Ä¢ title: T√≠tulo do gr√°fico (ex: "Press√£o do Reservat√≥rio")
    ‚Ä¢ series: S√©rie de dados Qt5 que ser√° exibida
    
    RETORNA: QChartView configurado e pronto para uso
    */
    /*
    üìä ========================================================================
    M√âTODO REFATORADO: CRIA√á√ÉO DE GR√ÅFICOS COM EIXOS ADEQUADOS
    ========================================================================
    
    üîß CORRE√á√ÉO IMPLEMENTADA:
    Configura√ß√£o de ranges apropriados para cada tipo de gr√°fico baseado
    no t√≠tulo, resolvendo problema de invisibilidade dos pontos.
    
    üìè RANGES INDUSTRIAIS CALIBRADOS:
    Baseados nos valores reais do MLS-3A para visualiza√ß√£o adequada.
    */
    QChartView* createChart(const QString& title, QLineSeries* series) {
        /*
        üèóÔ∏è CRIA√á√ÉO DO OBJETO GR√ÅFICO PRINCIPAL:
        QChart √© o container que organiza todos os elementos
        */
        QChart *chart = new QChart();
        chart->setTitle(title);            // Define t√≠tulo do gr√°fico
        chart->legend()->hide();           // Oculta legenda (interface limpa)
        chart->addSeries(series);          // Adiciona a s√©rie de dados
        chart->setTheme(QChart::ChartThemeDark);  // Tema escuro (SCADA padr√£o)

        /*
        üìä CONFIGURA√á√ÉO DO EIXO X (TEMPO) - COM RANGE ADEQUADO:
        Representa o tempo decorrido em minutos desde o in√≠cio da simula√ß√£o
        */
        QValueAxis *axisX = new QValueAxis();
        axisX->setTitleText("Tempo (min)");      // R√≥tulo do eixo
        axisX->setLabelFormat("%.1f");           // CORRE√á√ÉO: Formato com 1 decimal para melhor precis√£o
        axisX->setRange(0.0, 60.0);              // CORRE√á√ÉO: Range inicial 0-60 minutos (1 hora)
        axisX->setTickCount(7);                  // 7 marcas = intervalos de 10 minutos
        chart->addAxis(axisX, Qt::AlignBottom);  // Posi√ß√£o: parte inferior
        series->attachAxis(axisX);               // Vincula s√©rie ao eixo
        
        /*
        üìä CONFIGURA√á√ÉO DO EIXO Y (VALOR) - COM RANGES CALIBRADOS:
        Representa o valor da vari√°vel sendo medida (press√£o, vaz√£o, etc.)
        Ranges baseados nos valores reais do MLS-3A para visualiza√ß√£o adequada
        */
        QValueAxis *axisY = new QValueAxis();
        
        // CORRE√á√ÉO: Configurar range espec√≠fico baseado no tipo de gr√°fico
        if (title.contains("Produ√ß√£o")) {
            axisY->setTitleText("Vaz√£o (bopd)");
            axisY->setRange(5000.0, 50000.0);       // Range: 5K-50K barris/dia
            axisY->setLabelFormat("%.0f");
        } else if (title.contains("Press√£o")) {
            axisY->setTitleText("Press√£o (psi)");
            axisY->setRange(1000.0, 4000.0);        // Range: 1K-4K psi
            axisY->setLabelFormat("%.0f");
        } else if (title.contains("Volume")) {
            axisY->setTitleText("Volume (MM bbl)");
            axisY->setRange(0.0, 80.0);             // Range: 0-80 milh√µes de barris
            axisY->setLabelFormat("%.1f");
            // CORRE√á√ÉO: Converter barris para milh√µes para melhor escala
            // Isso ser√° feito na atualiza√ß√£o dos dados
        } else if (title.contains("Temperatura")) {
            axisY->setTitleText("Temperatura (¬∞C)");
            axisY->setRange(80.0, 120.0);           // Range: 80-120¬∞C
            axisY->setLabelFormat("%.1f");
        } else if (title.contains("Viscosidade")) {
            axisY->setTitleText("Viscosidade (cp)");
            axisY->setRange(0.5, 8.0);              // Range: 0.5-8 cp
            axisY->setLabelFormat("%.2f");
        } else if (title.contains("GOR")) {
            axisY->setTitleText("GOR (scf/bbl)");
            axisY->setRange(200.0, 800.0);          // Range: 200-800 scf/bbl
            axisY->setLabelFormat("%.0f");
        } else if (title.contains("WOR")) {
            axisY->setTitleText("WOR");
            axisY->setRange(0.0, 1.0);              // Range: 0-1 (ratio)
            axisY->setLabelFormat("%.3f");
        } else {
            axisY->setTitleText("Valor");            // Fallback gen√©rico
            axisY->setLabelFormat("%.2f");
        }
        
        chart->addAxis(axisY, Qt::AlignLeft);    // Posi√ß√£o: lado esquerdo
        series->attachAxis(axisY);               // Vincula s√©rie ao eixo

        /*
        üé® CRIA√á√ÉO DO WIDGET VISUALIZADOR:
        QChartView √© o widget que renderiza o gr√°fico na interface
        */
        QChartView *chartView = new QChartView(chart);
        chartView->setRenderHint(QPainter::Antialiasing);  // Suaviza√ß√£o de bordas
        
        /*
        üìù NOTA EDUCACIONAL:
        Antialiasing melhora a qualidade visual das linhas, especialmente
        importante em sistemas de monitoramento onde operadores passam
        horas observando tend√™ncias.
        */
        
        return chartView;  // Retorna o widget pronto para ser inserido na interface
    }

    /*
    ‚öôÔ∏è ========================================================================
    M√âTODO DE CONFIGURA√á√ÉO GERAL DOS GR√ÅFICOS
    ========================================================================
    
    üìö CONCEITO: M√©todo organizacional para configura√ß√µes adicionais dos
    gr√°ficos. Atualmente vazio pois toda configura√ß√£o √© feita em createChart(),
    mas mantido para futuras expans√µes.
    
    üí° POSS√çVEIS EXPANS√ïES FUTURAS:
    ‚Ä¢ Configurar cores espec√≠ficas por tipo de vari√°vel
    ‚Ä¢ Definir ranges autom√°ticos para cada gr√°fico
    ‚Ä¢ Configurar alarmes visuais (linhas de limite)
    ‚Ä¢ Sincronizar zoom entre gr√°ficos relacionados
    */
    void setupCharts() {
        /*
        üìù IMPLEMENTA√á√ÉO ATUAL:
        M√©todo vazio pois toda configura√ß√£o √© feita no createChart().
        Esta estrutura modular facilita futuras melhorias no sistema
        de visualiza√ß√£o.
        
        üîß PATTERN EDUCACIONAL:
        Este √© um padr√£o comum em sistemas industriais: m√©todos
        de setup espec√≠ficos que podem ser expandidos conforme
        necessidades operacionais evoluem.
        */
    }

    /*
    üì± ========================================================================
    M√âTODO REFATORADO: ATUALIZA√á√ÉO DA INTERFACE SCADA
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO APLICADA:
    Substitui√ß√£o de c√≥digo repetitivo por m√©todos utilit√°rios:
    ‚Ä¢ formatarCampoNumerico() para elimina√ß√£o de QString::number repetido
    ‚Ä¢ obterTempoMinutos() para convers√£o temporal centralizada
    ‚Ä¢ Estrutura mais leg√≠vel e manuten√≠vel
    
    üè≠ MELHORIA INDUSTRIAL:
    ‚Ä¢ Redu√ß√£o de 14 linhas repetitivas para 7 linhas funcionais
    ‚Ä¢ Consist√™ncia garantida na formata√ß√£o
    ‚Ä¢ Facilita mudan√ßas futuras nos padr√µes de exibi√ß√£o
    ‚Ä¢ C√≥digo mais audit√°vel para sistemas cr√≠ticos
    */
    void updateUI() {
        /*
        üìä ATUALIZA√á√ÉO DOS INDICADORES NUM√âRICOS (REFATORADO):
        Uso do m√©todo utilit√°rio para formata√ß√£o padronizada
        */
        if (indicatorLabels.size() >= 7) {
            indicatorLabels[0]->setText(formatarCampoNumerico(reservatorio->vazao_oleo_bopd));
            indicatorLabels[1]->setText(formatarCampoNumerico(reservatorio->pressao_psi));
            indicatorLabels[2]->setText(formatarCampoNumerico(reservatorio->volume_oleo_bbl));
            indicatorLabels[3]->setText(formatarCampoNumerico(reservatorio->temperatura_C));
            indicatorLabels[4]->setText(formatarCampoNumerico(reservatorio->viscosidade_oleo_cp));
            indicatorLabels[5]->setText(formatarCampoNumerico(reservatorio->gas_oil_ratio));
            indicatorLabels[6]->setText(formatarCampoNumerico(reservatorio->water_oil_ratio));
        }

        /*
        üìà ATUALIZA√á√ÉO DOS GR√ÅFICOS COM CONTROLE DE PERIODICIDADE (REFATORADO):
        Uso do sistema de periodicidade configur√°vel para an√°lise adapt√°vel
        */
        atualizarGraficosSeNecessario(false);
    }

    /*
    üíæ ========================================================================
    M√âTODO REFATORADO: SALVAMENTO DE DADOS HIST√ìRICOS
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO APLICADA:
    Substitui√ß√£o da convers√£o manual tempo_simulacao_s / 60.0 pelo
    m√©todo utilit√°rio obterTempoMinutos(), mantendo consist√™ncia com
    outros m√©todos da classe.
    
    üè≠ BENEF√çCIO INDUSTRIAL:
    ‚Ä¢ Centraliza√ß√£o da l√≥gica de convers√£o temporal
    ‚Ä¢ Facilita mudan√ßas futuras na unidade de tempo
    ‚Ä¢ Consistency across time-related operations
    */
    void saveDataPoint() {
        DadosPontos ponto;
        
        // USO DO M√âTODO UTILIT√ÅRIO (REFATORA√á√ÉO)
        ponto.tempo_min = obterTempoMinutos();  
        
        ponto.vazao_oleo = reservatorio->vazao_oleo_bopd;
        ponto.pressao = reservatorio->pressao_psi;
        ponto.viscosidade_cp = reservatorio->viscosidade_oleo_cp;
        ponto.volume_oleo = reservatorio->volume_oleo_bbl;
        ponto.temperatura = reservatorio->temperatura_C;
        ponto.gor = reservatorio->gas_oil_ratio;
        ponto.wor = reservatorio->water_oil_ratio;
        dataPoints.append(ponto);
    }

    // M√©todo para logar mensagens na caixa de texto
    void logMessage(const QString& message, const QString& type = "info") {
        QString styledMessage;
        if (type == "acao") {
            styledMessage = QString("<span style='color: #4CAF50;'>[A√á√ÉO] %1</span>").arg(message);
        } else if (type == "alerta") {
            styledMessage = QString("<span style='color: #FFC107;'>[AVISO] %1</span>").arg(message);
        } else if (type == "critico") {
            styledMessage = QString("<span style='color: #F44336;'>[CR√çTICO] %1</span>").arg(message);
        } else {
            styledMessage = QString("<span style='color: #888;'>[INFO] %1</span>").arg(message);
        }
        logTextEdit->append(styledMessage);
    }

    // M√©todo para sugerir interven√ß√µes com base no estado do reservat√≥rio
    void suggestInterventions() {
        QString suggestion = "Sugest√µes de interven√ß√£o:\n";
        bool hasSuggestion = false;

        if (reservatorio->pressao_psi < 2500) {
            suggestion += "- Press√£o baixa: considere injetar √°gua ou g√°s.\n";
            suggestInputWater->setText("5000");
            suggestInputGas->setText("10000");
            hasSuggestion = true;
        }

        if (reservatorio->viscosidade_oleo_cp > 4.0) {
            suggestion += "- Viscosidade alta: considere injetar vapor para aquecer o √≥leo.\n";
            suggestInputVapor->setText("1000");
            hasSuggestion = true;
        }

        if (reservatorio->volume_gas_m3 > 8000) {
            suggestion += "- Volume de g√°s alto: considere ativar libera√ß√£o de g√°s (flare).\n";
            suggestInputFlare->setText("8000");
            hasSuggestion = true;
        }

        if (!hasSuggestion) {
            suggestionExplanationLabel->setText("O sistema est√° em condi√ß√µes operacionais normais. Nenhuma interven√ß√£o √© sugerida no momento.");
            suggestInputWater->setPlaceholderText("Volume √Ågua (bbl)");
            suggestInputGas->setPlaceholderText("Volume G√°s (m¬≥)");
            suggestInputVapor->setPlaceholderText("Tempo Vapor (s)");
            suggestInputFlare->setPlaceholderText("Vaz√£o Libera√ß√£o G√°s (scfd)");
        } else {
            suggestionExplanationLabel->setText(suggestion);
        }
    }

    /*
    üé® ========================================================================
    M√âTODO REFATORADO: ATUALIZA√á√ÉO DE √çCONES SCADA
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO APLICADA:
    Substitui√ß√£o de condicionais tern√°rios repetitivos e complexos pelo
    m√©todo utilit√°rio determinarCorStatus(), simplificando drasticamente
    a l√≥gica de determina√ß√£o de cores.
    
    üè≠ MELHORIA INDUSTRIAL:
    ‚Ä¢ Redu√ß√£o de c√≥digo complexo para l√≥gica limpa e audit√°vel
    ‚Ä¢ Padroniza√ß√£o de thresholds de alerta/cr√≠tico
    ‚Ä¢ Facilita manuten√ß√£o e modifica√ß√£o de limites
    ‚Ä¢ Elimina possibilidade de inconsist√™ncias entre indicadores
    
    üö¶ SISTEMA DE CORES PADRONIZADO:
    Verde: Opera√ß√£o normal | Laranja: Aten√ß√£o | Vermelho: Cr√≠tico
    */
    /*
    üìä ========================================================================
    M√âTODO DE CONTROLE INTELIGENTE DE ATUALIZA√á√ÉO DOS GR√ÅFICOS
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Implementa l√≥gica de consolida√ß√£o temporal para diferentes granularidades
    de an√°lise, otimizando performance e melhorando visualiza√ß√£o conforme
    o per√≠odo selecionado pelo usu√°rio.
    
    üè≠ L√ìGICA INDUSTRIAL:
    ‚Ä¢ Tempo Real (1-5min): Todos os pontos para monitoramento operacional
    ‚Ä¢ Supervis√£o (10-30min): Consolida√ß√£o por m√©dias para an√°lise de tend√™ncia  
    ‚Ä¢ Estrat√©gico (1h-1dia): Pontos de an√°lise gerencial agregados
    
    PAR√ÇMETROS:
    ‚Ä¢ forcarAtualizacao: true para atualizar independente do per√≠odo
    */
    void atualizarGraficosSeNecessario(bool forcarAtualizacao = false) {
        double tempoAtual = obterTempoMinutos();
        double tempoDecorrido = tempoAtual - ultimoTempoGrafico;
        double periodoMinutos = periodoGraficoSegundos / 60.0;
        
        /*
        üïê VERIFICA√á√ÉO DE PERIODICIDADE:
        CORRE√á√ÉO: Se √© a primeira vez ou for√ßado, sempre atualiza
        Sen√£o, s√≥ atualiza se passou tempo suficiente
        */
        if (!forcarAtualizacao && ultimoTempoGrafico > 0.0 && tempoDecorrido < periodoMinutos) {
            return; // Ainda n√£o √© hora de atualizar
        }
        
        /*
        üìà ATUALIZA√á√ÉO DOS GR√ÅFICOS:
        Adiciona ponto atual em todos os gr√°ficos
        */
        /*
        üìä ADI√á√ÉO DE PONTOS COM ESCALAS CORRETAS:
        Alguns valores s√£o convertidos para escalas mais adequadas √† visualiza√ß√£o
        */
        producaoSeries->append(tempoAtual, reservatorio->vazao_oleo_bopd);
        pressaoSeries->append(tempoAtual, reservatorio->pressao_psi);
        volumeOleoSeries->append(tempoAtual, reservatorio->volume_oleo_bbl / 1000000.0);  // CORRE√á√ÉO: Converte para MM bbl
        temperaturaSeries->append(tempoAtual, reservatorio->temperatura_C);
        viscosidadeSeries->append(tempoAtual, reservatorio->viscosidade_oleo_cp);
        gorSeries->append(tempoAtual, reservatorio->gas_oil_ratio);
        worSeries->append(tempoAtual, reservatorio->water_oil_ratio);
        
        // Atualizar timestamp da √∫ltima atualiza√ß√£o
        ultimoTempoGrafico = tempoAtual;
        
        /*
        üìè EXPANS√ÉO DIN√ÇMICA DO EIXO X:
        Aumenta o range do eixo X quando necess√°rio para acomodar novos dados
        */
        atualizarRangeTempoGraficos(tempoAtual);
        
        /*
        üêõ LOG DE DEBUG (apenas para desenvolvimento):
        Confirma que os gr√°ficos est√£o sendo atualizados
        */
        if (forcarAtualizacao) {
            logMessage(QString("üìä Gr√°ficos atualizados (for√ßado) - Tempo: %1 min").arg(tempoAtual, 0, 'f', 1), "info");
        } else {
            logMessage(QString("üìä Gr√°ficos atualizados - Tempo: %1 min (Œî%2 min)")
                      .arg(tempoAtual, 0, 'f', 1).arg(tempoDecorrido, 0, 'f', 1), "info");
        }
        
        /*
        üóÉÔ∏è OTIMIZA√á√ÉO DE PERFORMANCE:
        Para per√≠odos longos, limita o n√∫mero de pontos nos gr√°ficos
        para evitar sobrecarga visual e de mem√≥ria
        */
        if (periodoGraficoSegundos >= 1800) { // 30 minutos ou mais
            limitarPontosGraficos(200); // M√°ximo 200 pontos vis√≠veis
        } else if (periodoGraficoSegundos >= 300) { // 5 minutos ou mais
            limitarPontosGraficos(500); // M√°ximo 500 pontos vis√≠veis
        }
        // Para per√≠odos menores, mant√©m todos os pontos (monitoramento detalhado)
    }
    
    /*
    üóÉÔ∏è ========================================================================
    M√âTODO DE OTIMIZA√á√ÉO: LIMITA√á√ÉO DE PONTOS NOS GR√ÅFICOS
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Remove pontos mais antigos dos gr√°ficos quando excede o limite,
    mantendo performance e evitando sobrecarga visual em an√°lises
    de longo prazo.
    
    üè≠ BENEF√çCIO INDUSTRIAL:
    Sistemas SCADA reais usam esta t√©cnica para manter responsividade
    mesmo com anos de dados hist√≥ricos.
    */
    /*
    üìè ========================================================================
    M√âTODO DE EXPANS√ÉO DIN√ÇMICA DO EIXO TEMPORAL
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Expande automaticamente o range do eixo X (tempo) quando novos dados
    excedem o range atual, mantendo visibilidade adequada dos gr√°ficos.
    
    üè≠ FUNCIONALIDADE SCADA:
    Sistemas industriais reais adaptam escalas dinamicamente para
    acomodar dados de diferentes per√≠odos operacionais.
    */
    void atualizarRangeTempoGraficos(double tempoAtual) {
        // Lista de todos os gr√°ficos criados (precisamos acess√°-los)
        QList<QLineSeries*> todasSeries = {
            producaoSeries, pressaoSeries, volumeOleoSeries, 
            temperaturaSeries, viscosidadeSeries, gorSeries, worSeries
        };
        
        // Expandir eixo X se necess√°rio (com margem de 20%)
        double rangeMinimo = tempoAtual * 1.2;  // 20% de margem
        
        // Garantir range m√≠nimo de 10 minutos para visualiza√ß√£o adequada
        if (rangeMinimo < 10.0) rangeMinimo = 10.0;
        
        // Atualizar eixo X de todas as s√©ries
        for (QLineSeries* series : todasSeries) {
            if (series && series->chart() && !series->chart()->axes(Qt::Horizontal).isEmpty()) {
                QValueAxis* axisX = qobject_cast<QValueAxis*>(series->chart()->axes(Qt::Horizontal).first());
                if (axisX && axisX->max() < rangeMinimo) {
                    axisX->setMax(rangeMinimo);
                    // Ajustar n√∫mero de ticks baseado no range
                    int tickCount = qMin(11, qMax(5, static_cast<int>(rangeMinimo / 10.0) + 1));
                    axisX->setTickCount(tickCount);
                }
            }
        }
    }

    void limitarPontosGraficos(int maxPontos) {
        auto limitarSerie = [maxPontos](QLineSeries* series) {
            while (series->count() > maxPontos) {
                series->remove(0); // Remove o ponto mais antigo
            }
        };
        
        limitarSerie(producaoSeries);
        limitarSerie(pressaoSeries);
        limitarSerie(volumeOleoSeries);
        limitarSerie(temperaturaSeries);
        limitarSerie(viscosidadeSeries);
        limitarSerie(gorSeries);
        limitarSerie(worSeries);
    }

    void updateIcons() {
        /*
        üå°Ô∏è √çCONE DE PRESS√ÉO (REFATORADO):
        Usa m√©todo utilit√°rio com l√≥gica invertida (press√£o baixa = cr√≠tica)
        */
        QString pressaoColor = determinarCorStatus(
            reservatorio->pressao_psi,
            2500.0,  // Limite de alerta (aten√ß√£o)  
            reservatorio->LIMITE_PRESSAO_CRITICO_MIN,  // Limite cr√≠tico
            true     // Invertido: valores baixos s√£o cr√≠ticos
        );
        pressaoIconLabel->setPixmap(createIcon(pressaoColor, iconPressaoPath).pixmap(48, 48));

        /*
        üå°Ô∏è √çCONE DE TEMPERATURA (REFATORADO):
        Usa m√©todo utilit√°rio com l√≥gica normal (temperatura alta = cr√≠tica)
        */
        QString temperaturaColor = determinarCorStatus(
            reservatorio->temperatura_C,
            150.0,  // Limite de alerta
            180.0,  // Limite cr√≠tico
            false   // Normal: valores altos s√£o cr√≠ticos
        );
        temperaturaIconLabel->setPixmap(createIcon(temperaturaColor, iconTemperaturaPath).pixmap(48, 48));

        /*
        üö¢ √çCONE DE VAZ√ÉO (REFATORADO):
        Usa m√©todo utilit√°rio com l√≥gica invertida (vaz√£o baixa = cr√≠tica)
        */
        QString vazaoColor = determinarCorStatus(
            reservatorio->vazao_producao,  // üîÑ CORRIGIDO: usar vazao_producao (mesma que sistema din√¢mico)
            12000.0,  // Limite de alerta (below optimal)
            reservatorio->PRODUCAO_MINIMA_ACEITAVEL_BOPD,  // Limite cr√≠tico
            true      // Invertido: valores baixos s√£o cr√≠ticos
        );
        vazaoIconLabel->setPixmap(createIcon(vazaoColor, iconVazaoPath).pixmap(48, 48));

        /*
        ‚õΩ √çCONE DE GOR (REFATORADO):
        Usa m√©todo utilit√°rio com l√≥gica normal (GOR alto = cr√≠tico)
        */
        QString gorColor = determinarCorStatus(
            reservatorio->gas_oil_ratio,
            500.0,  // Limite de alerta
            reservatorio->LIMITE_GOR_CRITICO,  // Limite cr√≠tico
            false   // Normal: valores altos s√£o cr√≠ticos
        );
        gorIconLabel->setPixmap(createIcon(gorColor, iconGorPath).pixmap(48, 48));

        /*
        üîç √çCONE DE STATUS GERAL (L√ìGICA ESPEC√çFICA):
        Baseado diretamente no flag de emerg√™ncia
        */
        QString statusColor = reservatorio->em_emergencia ? "red" : "green";
        statusIconLabel->setPixmap(createIcon(statusColor, iconStatusPath).pixmap(48, 48));
    }
};

// Inclus√£o necess√°ria para compila√ß√£o Qt (Meta-Object Compiler)
#include "main.moc"

/*
üéì ================================================================================
üöÄ FUN√á√ÉO MAIN - PONTO DE ENTRADA DO SIMULADOR EDUCACIONAL MLS-3A
================================================================================

üìö CONCEITO EDUCACIONAL:
Esta √© a fun√ß√£o principal do programa, chamada automaticamente pelo sistema
operacional quando o usu√°rio executa o simulador. √â o "port√£o de entrada"
de qualquer aplica√ß√£o C++.

üîß RESPONSABILIDADES DA FUN√á√ÉO MAIN:
1. Inicializa√ß√£o do framework Qt5
2. Configura√ß√£o de atributos do sistema gr√°fico
3. Cria√ß√£o e exibi√ß√£o da janela principal
4. Entrada no loop principal de eventos Qt
5. Retorno do c√≥digo de status para o sistema operacional

üíª PAR√ÇMETROS:
‚Ä¢ argc: N√∫mero de argumentos da linha de comando
‚Ä¢ argv: Array de strings com os argumentos da linha de comando

üì± HIGH DPI SUPPORT:
Configura√ß√£o para monitores modernos (4K, Retina, etc.) comuns em
esta√ß√µes de trabalho da ind√∫stria petrol√≠fera.

================================================================================
*/

int main(int argc, char *argv[]) {
    /*
    üñ•Ô∏è CONFIGURA√á√ÉO PARA MONITORES HIGH-DPI:
    
    üìö CONCEITO: Monitores 4K/Retina requerem configura√ß√µes especiais
    para que texto e √≠cones tenham tamanho adequado. Essencial em
    esta√ß√µes SCADA modernas onde operadores trabalham 12h/turno.
    */
    QApplication::setAttribute(Qt::AA_EnableHighDpiScaling, true);   // Escalonamento autom√°tico
    QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps, true);      // √çcones de alta resolu√ß√£o
    
    /*
    üèóÔ∏è CRIA√á√ÉO DA APLICA√á√ÉO Qt:
    
    üìö CONCEITO: QApplication √© o "cora√ß√£o" de qualquer programa Qt.
    Gerencia janelas, eventos, recursos e integra√ß√£o com o OS.
    
    PAR√ÇMETROS: argc e argv permitem configura√ß√£o via linha de comando
    */
    QApplication a(argc, argv);
    
    /*
    üìù IDENTIFICA√á√ÉO DA APLICA√á√ÉO:
    
    üìö CONCEITO: Estas informa√ß√µes aparecem na barra de t√≠tulo,
    task manager e s√£o usadas pelo sistema operacional para
    organizar logs e configura√ß√µes.
    */
    a.setApplicationName("Simulador MLS-3A Marlim Sul");  // Nome completo
    a.setApplicationVersion("1.0");                         // Vers√£o para auditoria
    
    /*
    ü™ü CRIA√á√ÉO DA JANELA PRINCIPAL:
    
    üìö CONCEITO: SimuladorWindow √© nossa classe customizada que
    cont√©m toda a interface SCADA e l√≥gica de simula√ß√£o.
    */
    SimuladorWindow w;  // Cria objeto na stack (destrui√ß√£o autom√°tica)
    
    /*
    üëÅÔ∏è EXIBI√á√ÉO DA JANELA:
    
    üìö CONCEITO: show() torna a janela vis√≠vel na tela.
    Em sistemas reais, interfaces SCADA s√£o exibidas em
    monitores dedicados na sala de controle.
    */
    w.show();
    
    /*
    ‚ö° PROCESSAMENTO INICIAL DE EVENTOS:
    
    üìö CONCEITO: processEvents() for√ßa o Qt a processar
    todos os eventos pendentes (desenhar janela, conectar
    sinais, etc.) antes de continuar.
    
    üí° IMPORT√ÇNCIA: Garante que a interface esteja 100%
    pronta antes de entrar no loop principal.
    */
    a.processEvents();
    
    /*
    üîÑ ENTRADA NO LOOP PRINCIPAL DE EVENTOS:
    
    üìö CONCEITO FUNDAMENTAL: a.exec() √© onde o programa "vive".
    Esta fun√ß√£o s√≥ retorna quando o usu√°rio fecha a aplica√ß√£o.
    
    Durante exec():
    ‚Ä¢ Qt processa cliques do mouse
    ‚Ä¢ Qt processa teclas pressionadas  
    ‚Ä¢ Qt atualiza gr√°ficos e anima√ß√µes
    ‚Ä¢ Qt chama nossos m√©todos (slots) quando necess√°rio
    ‚Ä¢ Timer da simula√ß√£o dispara a cada 5 segundos
    
    üî¢ C√ìDIGO DE RETORNO:
    ‚Ä¢ 0 = Programa terminou normalmente
    ‚Ä¢ != 0 = Erro durante execu√ß√£o
    
    O sistema operacional usa este c√≥digo para detectar crashes.
    */
    return a.exec();  // AQUI O PROGRAMA FICA RODANDO AT√â O USU√ÅRIO FECHAR
    
    /*
    üéØ FLUXO EDUCACIONAL COMPLETO:
    
    1. main() inicia o programa
    2. Qt √© configurado e inicializado
    3. SimuladorWindow √© criado (construtor chamado)
    4. Interface SCADA √© montada (setupUI)
    5. Gr√°ficos s√£o configurados (setupCharts)  
    6. Timer inicia simula√ß√£o a cada 5s (gameLoop)
    7. Usu√°rio interage com controles
    8. Dados s√£o coletados e exibidos em tempo real
    9. Usu√°rio fecha programa (destrutor chamado)
    10. main() retorna 0 para o sistema operacional
    
    üìö ESTA √â A ESS√äNCIA DE QUALQUER SISTEMA SCADA INDUSTRIAL!
    */
}
