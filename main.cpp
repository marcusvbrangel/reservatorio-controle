/*
================================================================================
üéì SIMULADOR DE RESERVAT√ìRIO DE PETR√ìLEO - PO√áO ATS-7B (ATL√ÇNTIDA ORIENTAL)
================================================================================

üìö GUIA EDUCACIONAL PARA ESTUDANTES DE ENGENHARIA DE RESERVAT√ìRIOS

Este simulador √© uma ferramenta did√°tica que reproduz as condi√ß√µes operacionais
reais do po√ßo ATS-7B da Bacia de Atl√¢ntida (OceanOil). Foi desenvolvido para
ensinar conceitos fundamentais de:

‚Ä¢ F√≠sica de Reservat√≥rios (press√£o, temperatura, viscosidade)
‚Ä¢ Curvas de IPR (Inflow Performance Relationship)
‚Ä¢ Modelos de produ√ß√£o (Darcy, Vogel, Standing)
‚Ä¢ Fen√¥menos operacionais (coning, decl√≠nio de produ√ß√£o)
‚Ä¢ M√©todos de recupera√ß√£o (inje√ß√£o de √°gua, g√°s, vapor)
‚Ä¢ Monitoramento e controle de produ√ß√£o

üèÜ DADOS REAIS: Baseado em 26 anos de hist√≥rico operacional do ATS-7B
‚öôÔ∏è TECNOLOGIA: Interface gr√°fica Qt5 com visualiza√ß√µes em tempo real
üéØ P√öBLICO: Estudantes iniciantes de Engenharia de Reservat√≥rios

üîß ================================================================================
‚ö° REFATORA√á√ÉO IMPLEMENTADA - C√ìDIGO LIMPO E MANUTEN√çVEL
================================================================================

üìö CONCEITOS DE REFATORA√á√ÉO APLICADOS:

‚úÖ DRY PRINCIPLE (Don't Repeat Yourself):
   ‚Ä¢ Elimina√ß√£o de c√≥digo duplicado
   ‚Ä¢ Centraliza√ß√£o de l√≥gicas repetitivas
   ‚Ä¢ M√©todos utilit√°rios reutiliz√°veis

‚úÖ SINGLE RESPONSIBILITY PRINCIPLE:
   ‚Ä¢ Cada m√©todo tem uma fun√ß√£o espec√≠fica
   ‚Ä¢ Separa√ß√£o de concerns (formata√ß√£o, c√°lculos, interface)
   ‚Ä¢ C√≥digo mais test√°vel e audit√°vel

‚úÖ CLEAN CODE STANDARDS:
   ‚Ä¢ Nomes descritivos e autoexplicativos
   ‚Ä¢ Fun√ß√µes pequenas e focadas
   ‚Ä¢ Coment√°rios educacionais t√©cnicos
   ‚Ä¢ Estrutura organizacional clara

üè≠ BENEF√çCIOS PARA SISTEMAS INDUSTRIAIS:

‚úÖ MANUTENIBILIDADE:
   ‚Ä¢ Facilita atualiza√ß√µes e corre√ß√µes
   ‚Ä¢ Reduz tempo de debugging
   ‚Ä¢ Simplifica treinamento de equipe

‚úÖ AUDITABILIDADE:
   ‚Ä¢ C√≥digo mais leg√≠vel para revis√µes
   ‚Ä¢ Padr√µes consistentes
   ‚Ä¢ Documenta√ß√£o t√©cnica integrada

‚úÖ CONFIABILIDADE:
   ‚Ä¢ Menos duplica√ß√£o = menos bugs
   ‚Ä¢ L√≥gica centralizada e test√°vel
   ‚Ä¢ Comportamento previs√≠vel

üé® ================================================================================
üñ•Ô∏è AJUSTES DE LAYOUT - MELHORIAS DE USABILIDADE
================================================================================

üìö OTIMIZA√á√ïES VISUAIS IMPLEMENTADAS:

‚úÖ LOG DE EVENTOS:
   ‚Ä¢ Fonte aumentada: 11px ‚Üí 14px (+27% legibilidade)
   ‚Ä¢ Melhor visibilidade para monitoramento em tempo real
   ‚Ä¢ Reduz fadiga visual em opera√ß√µes de longa dura√ß√£o
   ‚Ä¢ Padr√£o adequado para ambientes industriais 24/7

‚úÖ INDICADORES OPERACIONAIS:
   ‚Ä¢ Unidades de medida: 10px ‚Üí 13px (+30% legibilidade)
   ‚Ä¢ Font-weight aumentado para melhor destaque visual
   ‚Ä¢ Identifica√ß√£o mais r√°pida das grandezas f√≠sicas
   ‚Ä¢ Redu√ß√£o de erros de interpreta√ß√£o operacional

üè≠ BENEF√çCIOS PARA OPERA√á√ÉO INDUSTRIAL:

‚úÖ ERGONOMIA:
   ‚Ä¢ Menor esfor√ßo visual para leitura
   ‚Ä¢ Adequa√ß√£o para monitores grandes (>24")
   ‚Ä¢ Conformidade com padr√µes HMI industriais

‚úÖ SEGURAN√áA OPERACIONAL:
   ‚Ä¢ Redu√ß√£o de erros por m√° interpreta√ß√£o visual  
   ‚Ä¢ Identifica√ß√£o mais r√°pida de eventos cr√≠ticos
   ‚Ä¢ Melhor experi√™ncia do usu√°rio em situa√ß√µes de stress

‚úÖ PRODUTIVIDADE:
   ‚Ä¢ Menor tempo para localizar informa√ß√µes
   ‚Ä¢ Interface mais intuitiva e profissional
   ‚Ä¢ Redu√ß√£o de treinamento necess√°rio

üî• ================================================================================
üìö MELHORIA EDUCACIONAL: TERMINOLOGIA H√çBRIDA FLARE
================================================================================

üìö ABORDAGEM PEDAG√ìGICA IMPLEMENTADA:

‚úÖ PROBLEMA IDENTIFICADO:
   ‚Ä¢ Termo "Flare" em ingl√™s pode confundir estudantes iniciantes
   ‚Ä¢ Foco no equipamento ao inv√©s da fun√ß√£o
   ‚Ä¢ Barreira lingu√≠stica para compreens√£o imediata

‚úÖ SOLU√á√ÉO H√çBRIDA ADOTADA:
   ‚Ä¢ Interface: "Libera√ß√£o de G√°s (Flare)"  
   ‚Ä¢ DID√ÅTICO PRIMEIRO: Explica a fun√ß√£o (o que faz)
   ‚Ä¢ T√âCNICO SEGUNDO: Ensina o termo industrial (como se chama)
   ‚Ä¢ Progress√£o natural: Compreens√£o ‚Üí Terminologia

‚úÖ BENEF√çCIOS EDUCACIONAIS:
   ‚Ä¢ Clareza imediata para estudantes iniciantes
   ‚Ä¢ Prepara√ß√£o adequada para ambiente profissional  
   ‚Ä¢ Conex√£o fun√ß√£o-terminologia bem estabelecida
   ‚Ä¢ Tooltips explicativos com contexto industrial completo

‚úÖ IMPLEMENTA√á√ÉO T√âCNICA:
   ‚Ä¢ Labels de interface atualizados
   ‚Ä¢ Mensagens de log mais descritivas
   ‚Ä¢ Tooltips educacionais detalhados
   ‚Ä¢ Preserva√ß√£o da precis√£o t√©cnica

üè≠ CONTEXTO INDUSTRIAL PRESERVADO:
O termo "flare" continua sendo usado nos logs e documenta√ß√£o t√©cnica,
mantendo a precis√£o profissional enquanto melhora a did√°tica inicial.

üìä ================================================================================
‚ö° GR√ÅFICOS INTERATIVOS - DASHBOARD SCADA PROFISSIONAL
================================================================================

üìö FUNCIONALIDADE IMPLEMENTADA:

‚úÖ PROBLEMA RESOLVIDO:
   ‚Ä¢ Gr√°ficos com pontos muito pr√≥ximos (pouco interativos)
   ‚Ä¢ Falta de controle de granularidade temporal
   ‚Ä¢ Performance degradada com excesso de dados
   ‚Ä¢ Inadequa√ß√£o para diferentes tipos de an√°lise

‚úÖ SOLU√á√ÉO DASHBOARD SCADA:
   ‚Ä¢ Controle de periodicidade configur√°vel
   ‚Ä¢ Per√≠odos: 1min, 5min, 10min, 30min, 1h, 1 dia
   ‚Ä¢ Otimiza√ß√£o autom√°tica de performance
   ‚Ä¢ Interface profissional com bot√£o "Limpar Gr√°ficos"

‚úÖ BENEF√çCIOS OPERACIONAIS:
   ‚Ä¢ TEMPO REAL (1-5min): Monitoramento operacional detalhado
   ‚Ä¢ SUPERVIS√ÉO (10-30min): An√°lise de tend√™ncias operacionais  
   ‚Ä¢ ESTRAT√âGICO (1h-1dia): Vis√£o gerencial e planejamento
   ‚Ä¢ PERFORMANCE: Auto-limita√ß√£o de pontos para fluidez

‚úÖ FUNCIONALIDADES SCADA:
   ‚Ä¢ Sele√ß√£o din√¢mica de per√≠odo (dropdown)
   ‚Ä¢ Reset completo dos gr√°ficos (Clear Charts)
   ‚Ä¢ Logging autom√°tico de mudan√ßas de configura√ß√£o
   ‚Ä¢ Otimiza√ß√£o inteligente baseada no per√≠odo selecionado

‚úÖ IMPLEMENTA√á√ÉO T√âCNICA:
   ‚Ä¢ Sistema de timestamp inteligente
   ‚Ä¢ Controle de consolida√ß√£o temporal
   ‚Ä¢ Limita√ß√£o autom√°tica de pontos (200-500 m√°ximo)
   ‚Ä¢ Interface responsiva e profissional

üè≠ EQUIVAL√äNCIA INDUSTRIAL:
Sistema equivalente aos dashboards da OceanOil e sistemas PI (OSIsoft)
usados em salas de controle da Bacia de Atl√¢ntida, com funcionalidades
profissionais adaptadas para ensino de Engenharia de Reservat√≥rios.

üîß ================================================================================
üìä CORRE√á√ÉO CR√çTICA: VISIBILIDADE DOS GR√ÅFICOS SOLUCIONADA
================================================================================

üö® PROBLEMA IDENTIFICADO:
   ‚Ä¢ Gr√°ficos n√£o mostravam linhas vis√≠veis apesar dos logs indicarem atualiza√ß√µes
   ‚Ä¢ Eixos sem ranges definidos causavam auto-escalonamento inadequado
   ‚Ä¢ Valores com escalas muito diferentes (Volume: 55M vs Temperatura: 92)
   ‚Ä¢ Poucos pontos iniciais geravam escalas inadequadas no Qt Charts

üõ†Ô∏è CORRE√á√ïES T√âCNICAS IMPLEMENTADAS:

‚úÖ RANGES CALIBRADOS POR TIPO DE GR√ÅFICO:
   üìà Produ√ß√£o: 5.000-50.000 bopd (baseado hist√≥rico ATS-7B)
   üå°Ô∏è Press√£o: 1.000-4.000 psi (range operacional t√≠pico)
   üõ¢Ô∏è Volume: 0-80 MM bbl (convertido para milh√µes p/ legibilidade)
   üå°Ô∏è Temperatura: 80-120¬∞C (range geot√©rmico + inje√ß√£o vapor)
   üåØ Viscosidade: 0.5-8.0 cp (range fluido leve-pesado)
   ‚õΩ GOR: 200-800 scf/bbl (range t√≠pico reservat√≥rio maduro)  
   üíß WOR: 0.0-1.0 ratio (percentual √°gua produzida)

‚úÖ EIXO TEMPORAL INTELIGENTE:
   ‚Ä¢ Range inicial: 0-60 minutos (1 hora de visualiza√ß√£o)
   ‚Ä¢ Formato: 1 casa decimal (precis√£o de 6 segundos)
   ‚Ä¢ Expans√£o autom√°tica: Cresce 20% al√©m do tempo atual
   ‚Ä¢ Range m√≠nimo: 10 minutos (visualiza√ß√£o adequada)
   ‚Ä¢ Ticks adaptativos: 5-11 marca√ß√µes conforme escala

‚úÖ CONVERS√ïES DE ESCALA:
   ‚Ä¢ Volume: barris ‚Üí milh√µes de barris (55.0 MM vs 55.000.000)
   ‚Ä¢ Melhor legibilidade em dashboards industriais
   ‚Ä¢ Mant√©m precis√£o com formata√ß√£o adequada

‚úÖ EXPANS√ÉO DIN√ÇMICA DOS EIXOS:
   ‚Ä¢ Sistema autom√°tico de ajuste de ranges
   ‚Ä¢ Acompanha crescimento temporal dos dados
   ‚Ä¢ Mant√©m margem visual de 20% para conforto
   ‚Ä¢ Atualiza√ß√£o de ticks proporcional ao range

üéØ GRANULARIDADES DOCUMENTADAS:

üìè EIXO X (TEMPORAL):
   ‚Ä¢ 1 minuto = 60 segundos de simula√ß√£o
   ‚Ä¢ Precis√£o: 0.1 minuto (6 segundos)
   ‚Ä¢ Atualiza√ß√£o visual: Conforme per√≠odo selecionado (1-1440min)
   ‚Ä¢ Expans√£o: Autom√°tica quando dados excedem range atual

üìè EIXO Y (VALORES POR MINUTO):
   ‚Ä¢ Produ√ß√£o: 22.000 bopd √∑ 1440 = 15,3 barris/minuto
   ‚Ä¢ Press√£o: Decl√≠nio t√≠pico 0,1-0,5 psi/minuto  
   ‚Ä¢ Volume: Deple√ß√£o = produ√ß√£o (15,3 barris/minuto)
   ‚Ä¢ Temperatura: Relativamente est√°vel (~0,01¬∞C/minuto)
   ‚Ä¢ Viscosidade: Varia com temperatura e press√£o
   ‚Ä¢ GOR: Aumenta com deple√ß√£o (~0,1 scf/bbl por minuto)
   ‚Ä¢ WOR: Aumenta com water coning (~0,0001/minuto)

üîç DEBUGGING IMPLEMENTADO:
   ‚Ä¢ Logs detalhados de atualiza√ß√µes gr√°ficas
   ‚Ä¢ Timestamps precisos para rastreamento
   ‚Ä¢ Diferencial temporal (Œît) para verifica√ß√£o
   ‚Ä¢ Confirma√ß√£o de adi√ß√£o de pontos nos gr√°ficos

üé® MELHORIAS VISUAIS:
   ‚Ä¢ Labels espec√≠ficos por tipo de grandeza
   ‚Ä¢ Formata√ß√£o num√©rica adequada (0-3 casas decimais)
   ‚Ä¢ Ticks organizados e leg√≠veis
   ‚Ä¢ Tema escuro profissional (SCADA padr√£o)

üí° L√ìGICA DE INICIALIZA√á√ÉO CORRIGIDA:
   ‚Ä¢ Primeira atualiza√ß√£o for√ßada na inicializa√ß√£o
   ‚Ä¢ Verifica√ß√£o de ultimoTempoGrafico > 0.0
   ‚Ä¢ Evita bloqueio de atualiza√ß√µes nos primeiros minutos
   ‚Ä¢ Estabelece referencial temporal correto

üè≠ RESULTADO INDUSTRIAL:
Sistema agora exibe gr√°ficos com visibilidade profissional equivalente
aos sistemas SCADA da OceanOil, com escalas calibradas para valores
reais do ATS-7B e funcionalidade de an√°lise temporal adapt√°vel.

================================================================================
*/

/*
================================================================================
üì¶ BIBLIOTECAS E DEPEND√äNCIAS DO SISTEMA
================================================================================

üîß INSTALA√á√ÉO DAS DEPEND√äNCIAS (Ubuntu/Debian):
sudo apt install libqt5charts5-dev cmake make libqt5svg5-dev
sudo apt install qtbase5-dev libqt5widgets5 libqt5charts5-dev libqt5svg5-dev

üèóÔ∏è COMPILA√á√ÉO DO PROJETO:
rm -rf build          # Remove compila√ß√£o anterior
mkdir build          # Cria diret√≥rio de build
cd build             # Entra no diret√≥rio
cmake ..            # Configura o projeto
make                # Compila o c√≥digo

‚ñ∂Ô∏è EXECU√á√ÉO:
./reservatorio_01   # Executa o simulador

üìù NOTA EDUCACIONAL:
O Qt5 √© um framework multiplataforma usado para criar interfaces gr√°ficas
profissionais. √â amplamente utilizado na ind√∫stria petrol√≠fera para
sistemas SCADA (Supervisory Control and Data Acquisition).

================================================================================
*/

/*
================================================================================
üì¶ INCLUS√ÉO DE BIBLIOTECAS - GUIA EDUCACIONAL
================================================================================

üìö PARA ESTUDANTES: Cada biblioteca tem uma fun√ß√£o espec√≠fica no simulador

üñ•Ô∏è INTERFACE GR√ÅFICA (Qt5 GUI):
*/
#include <QApplication>       // Classe principal da aplica√ß√£o Qt5
#include <QMainWindow>        // Janela principal com menu/toolbar
#include <QVBoxLayout>        // Layout vertical (organiza widgets)
#include <QHBoxLayout>        // Layout horizontal 
#include <QPushButton>        // Bot√µes clic√°veis da interface
#include <QTimer>             // Sistema de timers para alertas
#include <QLabel>            // R√≥tulos de texto est√°tico
#include <QLineEdit>         // Campos de entrada de texto
#include <QTextEdit>         // √Årea de texto multi-linha
#include <QGroupBox>         // Agrupamento visual de controles
#include <QScrollArea>       // √Årea com rolagem para conte√∫do grande
#include <QTabWidget>        // Abas para organizar conte√∫do
#include <QGridLayout>       // Layout em grade (linhas/colunas)
#include <QFrame>            // Molduras e separa√ß√µes visuais
#include <QDialog>           // Janelas de di√°logo
#include <QMessageBox>       // Caixas de alerta e confirma√ß√£o
#include <QComboBox>         // Caixa de sele√ß√£o (dropdown)
#include <QUuid>             // Gera√ß√£o de identificadores √∫nicos universais
#include <QDir>              // Manipula√ß√£o de diret√≥rios e caminhos

/*
üìà GR√ÅFICOS E VISUALIZA√á√ÉO:
*/
#include <QtCharts/QChartView>  // Visualizador de gr√°ficos
#include <QtCharts/QLineSeries> // S√©ries de linha para gr√°ficos
#include <QValueAxis>          // Eixos num√©ricos dos gr√°ficos
#include <QGraphicsSvgItem>    // √çcones SVG escal√°veis
#include <QIcon>               // Sistema de √≠cones

/*
‚è±Ô∏è SISTEMA DE TEMPO E EVENTOS:
*/
#include <QTimer>              // Temporizador para simula√ß√£o cont√≠nua

/*
üíæ MANIPULA√á√ÉO DE DADOS:
*/
#include <QDoubleValidator>    // Valida√ß√£o de n√∫meros decimais
#include <QTextStream>         // Leitura/escrita de texto
#include <QByteArray>          // Manipula√ß√£o de dados bin√°rios
#include <QBuffer>             // Buffer de mem√≥ria
#include <QDateTime>           // Data e hora para timestamps

/*
üßÆ BIBLIOTECAS MATEM√ÅTICAS (C++ STL):
*/
#include <cmath>               // Fun√ß√µes matem√°ticas (pow, exp, log, etc.)
#include <algorithm>           // Algoritmos (max, min, sort, etc.)
#include <cstdlib>             // Fun√ß√µes padr√£o (rand, exit, etc.)
#include <ctime>               // Fun√ß√µes de tempo (time, clock, etc.)

/*
üìù NOTA EDUCACIONAL:
Essas bibliotecas formam a base de qualquer sistema industrial moderno:
‚Ä¢ Qt5: Framework profissional usado em sistemas SCADA da OceanOil
‚Ä¢ STL: Bibliotecas C++ fundamentais para c√°lculos de engenharia
‚Ä¢ Charts: Visualiza√ß√£o essencial para monitoramento de po√ßos
*/

/*
================================================================================
üìä NAMESPACE DOS GR√ÅFICOS QT
================================================================================

üìö CONCEITO EDUCACIONAL:
Esta linha permite usar as classes de gr√°fico do Qt5 sem o prefixo
'QtCharts::', simplificando o c√≥digo. √â uma pr√°tica comum em C++.

‚ö†Ô∏è IMPORTANTE: Namespaces evitam conflitos entre bibliotecas diferentes
             que possam ter classes com nomes similares.
*/
QT_CHARTS_USE_NAMESPACE

/*
üéì ================================================================================
üö´ CLASSE RESERVATORIO - MODELO F√çSICO-MATEM√ÅTICO DO ATS-7B
================================================================================

üìö CONCEITOS FUNDAMENTAIS PARA ESTUDANTES:

Esta classe representa um MODELO DIGITAL do reservat√≥rio real ATS-7B (Atl√¢ntida Oriental).
√â baseada em equa√ß√µes fundamentais da Engenharia de Reservat√≥rios:

‚Ä¢ LEI DE DARCY: Fluxo de fluidos em meio poroso
‚Ä¢ EQUA√á√ÉO DE VOGEL: IPR para fluxo bif√°sico (g√°s + √≥leo)
‚Ä¢ CORRELA√á√ïES DE STANDING: Propriedades PVT
‚Ä¢ MODELO DE DECL√çNIO: Ber√£o hiperb√≥lico/exponencial

üèÜ DADOS REAIS: Calibrado com 26 anos de dados operacionais do ATS-7B
üîç VALIDA√á√ÉO: Benchmarking com dados da OceanOil/ANP

================================================================================
*/

class Reservatorio {
public:
    /*
    üå°Ô∏è ========================================================================
    VARI√ÅVEIS DE ESTADO - PROPRIEDADES FUNDAMENTAIS DO RESERVAT√ìRIO
    ========================================================================
    
    üìö PARA ESTUDANTES: Estas s√£o as vari√°veis que descrevem o estado
    atual do reservat√≥rio e mudam com o tempo durante a produ√ß√£o:
    */
    
    double pressao_psi;        // üå°Ô∏è Press√£o do reservat√≥rio [psi]
                               //     CONCEITO: For√ßa que "empurra" o √≥leo para o po√ßo
                               //     RANGE T√çPICO: 1.800-4.200 psi (Bacia de Atl√¢ntida)
                               //     VALOR ATS-7B: 2.850 psi (atual, 2025)
    
    double temperatura_C;      // üå°Ô∏è Temperatura do reservat√≥rio [¬∞C]
                               //     CONCEITO: Afeta viscosidade e densidade dos fluidos
                               //     RANGE T√çPICO: 60-120¬∞C (profundidades 1.000-3.000m)
                               //     VALOR ATS-7B: 92¬∞C (medido em profundidade)
    
    double volume_oleo_bbl;    // üõ¢Ô∏è Volume de √≥leo restante [barris]
                               //     CONCEITO: OOIP restante (Original Oil In Place)
                               //     OOIP ORIGINAL ATS-7B: ~280 milh√µes bbl
                               //     VALOR ATUAL: ~55 milh√µes bbl (80% j√° produzido)
    
    double volume_gas_m3;      // ‚òòÔ∏è Volume de g√°s livre [m¬≥]
                               //     CONCEITO: G√°s que se separa do √≥leo quando P < Pb
                               //     PROBLEMA: Excesso reduz efici√™ncia de bombeio
                               //     CONTROLE: Inje√ß√£o de g√°s ou flare
    
    double volume_agua_bbl;    // üíß Volume de √°gua no sistema [barris]
                               //     CONCEITO: √Ågua connata + injetada + aquifer
                               //     PROBLEMA: Aumenta com water coning
                               //     BSW ATS-7B: ~23% (2025)

    /*
    üßÆ ========================================================================
    PROPRIEDADES DERIVADAS - CALCULADAS A PARTIR DAS VARI√ÅVEIS DE ESTADO
    ========================================================================
    
    üìö CONCEITO: Estas propriedades s√£o calculadas usando correla√ß√µes
    emp√≠ricas e modelos f√≠sicos a cada passo da simula√ß√£o:
    */
    
    double viscosidade_oleo_cp;    // üåØ Viscosidade din√¢mica do √≥leo [cp]
                                   //       CONCEITO: Resist√™ncia do √≥leo ao escoamento
                                   //       F√ìRMULA: Standing correlation (T, P, API)
                                   //       VALOR ATS-7B: ~2,8 cp (92¬∞C, 29,5¬∞ API)
    
    double vazao_oleo_bopd;        // üö¢ Vaz√£o de produ√ß√£o de √≥leo [bopd]
                                   //       CONCEITO: Calculada pela curva IPR (Inflow Performance)
                                   //       F√ìRMULA: Darcy (monof√°sico) + Vogel (bif√°sico)
                                   //       VALOR ATS-7B: ~22.000 bopd (ap√≥s revitaliza√ß√£o)
    
    double pressao_de_bolha_psi;   // üßô Press√£o de satura√ß√£o [psi]
                                   //       CONCEITO: Press√£o onde g√°s come√ßa a se separar do √≥leo
                                   //       IMPORT√ÇNCIA: P < Pb = fluxo bif√°sico (mais complexo)
                                   //       VALOR ATS-7B: 2.950 psi (lab PVT)
    
    double pressao_poco_psi;       // üï≥Ô∏è Press√£o de fundo de po√ßo (BHP) [psi]
                                   //       CONCEITO: Press√£o na forma√ß√£o produtora
                                   //       CONTROLE: V√°lvula choke (‚Üë fecha, ‚Üì abre)
                                   //       VALOR ATS-7B: ~1.950 psi (controlado)
    
    bool em_emergencia;            // ‚ö†Ô∏è Status de emerg√™ncia do sistema
                                   //       CONCEITO: Shutdown autom√°tico por par√¢metros cr√≠ticos
                                   //       TRIGGERS: P < P_min, Œº > Œº_max, GOR > GOR_max
    QString motivo_emergencia;     // üìã Motivo detalhado do √∫ltimo shutdown
    
    double gas_oil_ratio;          // ‚õΩ Raz√£o g√°s-√≥leo (GOR) [scf/bbl]
                                   //       CONCEITO: Volume de g√°s por barril de √≥leo produzido
                                   //       PROBLEMA: GOR alto = baixa efici√™ncia de bombeio
                                   //       VALOR ATS-7B: 420 scf/bbl (normal para √≥leo m√©dio)
    
    double water_oil_ratio;        // üíß Raz√£o √°gua-√≥leo (WOR) [adimensional]
                                   //       CONCEITO: Equivale ao BSW (Basic Sediments & Water)
                                   //       PROBLEMA: Aumenta com water coning e breakthrough
                                   //       VALOR ATS-7B: 0,23 = 23% BSW (2025)
    
    double tempo_simulacao_s;      // ‚è±Ô∏è Tempo decorrido na simula√ß√£o [segundos]
                                   //       CONCEITO: Contador interno para c√°lculos temporais

    /*
    üîç ========================================================================
    CONSTANTES F√çSICAS REAIS DO PO√áO ATS-7B (ATL√ÇNTIDA ORIENTAL)
    ========================================================================
    
    üìö PARA ESTUDANTES: Estas s√£o propriedades REAIS medidas em laborat√≥rio
    e campo, baseadas em 26 anos de dados operacionais do ATS-7B:
    */
    
    const double GRAVIDADE_GAS_PESO_AR = 0.85;    // ‚õΩ Densidade relativa do g√°s
                                                   //     CONCEITO: œÅ_g√°s / œÅ_ar (adimensional)
                                                   //     VALOR 0.85 = G√°s "leve" (rico em metano)
                                                   //     IMPORT√ÇNCIA: Usado em correla√ß√µes PVT
    
    const double GRAVIDADE_API = 29.5;            // üå°Ô∏è Grau API do √≥leo ATS-7B
                                                   //     CONCEITO: Medida de "leveza" do √≥leo
                                                   //     F√ìRMULA: ¬∞API = (141.5/œÅ_60F) - 131.5
                                                   //     CLASSIFICA√á√ÉO: 29.5¬∞ = √ìLEO M√âDIO (bom!)
                                                   //     DENSIDADE: ~0.88 g/cm¬≥ a 60¬∞F
    
    const double PRODUTIVIDADE_POCO_C = 22000.0;  // üö¢ Produ√ß√£o atual ATS-7B [bopd]
                                                   //     CONCEITO: Capacidade m√°xima de produ√ß√£o
                                                   //     HIST√ìRICO: Pico = 45.000 bopd (2010)
                                                   //     ATUAL: 22.000 bopd (ap√≥s revitaliza√ß√£o 2023)
                                                   //     META: Sustentar > 15.000 bopd at√© 2030
    
    const double FATOR_INJECAO_GAS_BASE = 0.05;   // ‚õΩ Fator de resposta √† inje√ß√£o de g√°s
                                                   //     CONCEITO: ŒîP / Volume_gas_injetado
                                                   //     CALIBRA√á√ÉO: Baseada em testes de inje√ß√£o
                                                   //     USO: Gas-lift ou manuten√ß√£o de press√£o
    
    const double FATOR_INJECAO_AGUA_BASE = 0.01;  // üíß Fator de resposta √† inje√ß√£o de √°gua
                                                   //     CONCEITO: Efici√™ncia da inje√ß√£o de √°gua
                                                   //     BAIXO VALOR: Reservat√≥rio j√° com alta press√£o
                                                   //     USO: Waterflooding secund√°rio
    
    const double PRODUCAO_MINIMA_ACEITAVEL_BOPD = 8000.0; // üí∞ Limite econ√¥mico [bopd]
                                                           //     CONCEITO: Vaz√£o m√≠nima vi√°vel economicamente
                                                           //     C√ÅLCULO: Custos operacionais vs receita
                                                           //     REALIDADE: Custos ATS-7B ~US$ 35/bbl

    /*
    ‚ö†Ô∏è ========================================================================
    LIMITES OPERACIONAIS CR√çTICOS - SEGURAN√áA E VIABILIDADE ECON√îMICA
    ========================================================================
    
    üìö CONCEITO: Estes limites definem as condi√ß√µes de SHUTDOWN AUTOM√ÅTICO
    do po√ßo, baseados em crit√©rios t√©cnicos e econ√¥micos reais da OceanOil:
    */
    
    const double LIMITE_PRESSAO_CRITICO_MIN = 1650.0; // ‚ö†Ô∏è Press√£o m√≠nima segura [psi]
                                                       //     CONCEITO: Abaixo = colapso da forma√ß√£o
                                                       //     GEOMEC√ÇNICA: Tens√£o efetiva > resist√™ncia
                                                       //     VALOR ATS-7B: 1.650 psi (limite atual)
    
    const double LIMITE_PRESSAO_CRITICO_MAX = 4200.0; // ‚ö†Ô∏è Press√£o m√°xima segura [psi]
                                                       //     CONCEITO: Acima = risco de blowout
                                                       //     VALOR HIST√ìRICO: Press√£o inicial ATS-7B (1999)
                                                       //     SEGURAN√áA: Casing e wellhead limits
    
    const double LIMITE_VISCOSIDADE_CRITICO = 4.5;    // ‚ö†Ô∏è Viscosidade m√°xima [cp]
                                                       //     CONCEITO: Acima = bombeio invi√°vel
                                                       //     ESP LIMIT: Equipamentos submers√≠veis
                                                       //     VALOR: T√≠pico para √≥leo 29.5¬∞ API
    
    const double LIMITE_GAS_CRITICO = 15000.0;        // ‚ö†Ô∏è Volume g√°s livre m√°ximo [m¬≥]
                                                       //     CONCEITO: Acima = gas-lock das bombas
                                                       //     PROBLEMA: Bomba perde escorva
                                                       //     SOLU√á√ÉO: Flare ou separa√ß√£o
    
    const double LIMITE_WOR_CRITICO = 0.35;           // ‚ö†Ô∏è Water cut m√°ximo [35%]
                                                       //     CONCEITO: Acima = tratamento invi√°vel
                                                       //     CUSTOS: Separa√ß√£o e descarte de √°gua
                                                       //     LIMITE REAL: ATS-7B opera at√© 40%
    
    const double LIMITE_GOR_CRITICO = 600.0;          // ‚ö†Ô∏è GOR m√°ximo [scf/bbl]
                                                       //     CONCEITO: Acima = produ√ß√£o de √≥leo invi√°vel
                                                       //     PROBLEMA: Muito g√°s, pouco √≥leo
                                                       //     T√çPICO: √ìleo m√©dio < 500 scf/bbl

    /*
    üèóÔ∏è ========================================================================
    CONSTRUTOR - INICIALIZA√á√ÉO COM DADOS REAIS DO ATS-7B (2025)
    ========================================================================
    
    üìö PARA ESTUDANTES: O construtor define o ESTADO INICIAL do reservat√≥rio.
    Todos os valores s√£o baseados em dados reais coletados no ATS-7B em 2025,
    ap√≥s 26 anos de produ√ß√£o (in√≠cio: 1999).
    
    üìÖ DADOS HIST√ìRICOS:
    ‚Ä¢ 1999: Descoberta e in√≠cio da produ√ß√£o
    ‚Ä¢ 2010: Pico de produ√ß√£o (45.000 bopd)
    ‚Ä¢ 2015: In√≠cio do decl√≠nio acentuado
    ‚Ä¢ 2023: Projeto de revitaliza√ß√£o
    ‚Ä¢ 2025: Estado atual (simulado)
    
    üîç FONTE DOS DADOS: Relat√≥rios ANP + OceanOil + Literatura T√©cnica
    */
    Reservatorio() :
        pressao_psi(2850.0),           // üå°Ô∏è 2.850 psi - Press√£o atual (2025)
                                       //     HIST√ìRICO: 4.200 psi (inicial, 1999)
                                       //     DECL√çNIO: ~32% em 26 anos
                                       //     STATUS: Ainda acima da press√£o cr√≠tica
        
        temperatura_C(92.0),           // üå°Ô∏è 92¬∞C - Temperatura do reservat√≥rio
                                       //     MEDIDA: Em profundidade (2.100-2.400m)
                                       //     CONSTANTE: N√£o muda significativamente
                                       //     GRADIENTE: ~3¬∞C/100m (geot√©rmico normal)
        
        volume_oleo_bbl(55000000.0),   // üõ¢Ô∏è 55 MM bbl - Volume restante (2025)
                                       //     OOIP ORIGINAL: ~280 MM bbl (estimativa)
                                       //     PRODUZIDO: ~225 MM bbl (80% recovery!)
                                       //     EXCELENTE: Recovery factor muito alto
                                       //     PREVIS√ÉO: ~10-15 anos de vida √∫til
        
        volume_gas_m3(8500.0),         // ‚õΩ 8.500 m¬≥ - G√°s livre atual
                                       //     CONCEITO: G√°s separado na planta
                                       //     NORMAL: Press√£o < Pbubble point
                                       //     DESTINO: Gas-lift ou comercializa√ß√£o
        
        volume_agua_bbl(125000.0),     // üíß 125.000 bbl - √Ågua total no sistema
                                       //     COMPOSI√á√ÉO: Connata + injetada + aqu√≠fero
                                       //     AUMENTO: Water coning progredindo
                                       //     TRATAMENTO: Separa√ß√£o + reinje√ß√£o
        
        viscosidade_oleo_cp(2.8),      // üåØ 2,8 cp - Viscosidade nas condi√ß√µes atuais
                                       //     C√ÅLCULO: Standing correlation
                                       //     PAR√ÇMETROS: 92¬∞C + 29,5¬∞API + 2.850 psi
                                       //     QUALIDADE: Baixa viscosidade = bom!
        
        vazao_oleo_bopd(22000.0),      // üö¢ 22.000 bopd - Produ√ß√£o atual
                                       //     SUCESSO: Revitaliza√ß√£o 2023 aumentou 40%
                                       //     ANTERIOR: ~15.000 bopd (antes do projeto)
                                       //     META: Sustentar > 15.000 bopd at√© 2030
        
        pressao_de_bolha_psi(2950.0),  // üßô 2.950 psi - Press√£o de satura√ß√£o
                                       //     LABORAT√ìRIO: Medida em an√°lise PVT
                                       //     IMPORT√ÇNCIA: P_res < P_bubble = fluxo bif√°sico
                                       //     ATUAL: 2.850 < 2.950 = Regime bif√°sico!
        
        pressao_poco_psi(1950.0),      // üï≥Ô∏è 1.950 psi - Bottom Hole Pressure
                                       //     CONTROLE: V√°lvula choke na √°rvore de natal
                                       //     DRAWDOWN: 2.850 - 1.950 = 900 psi
                                       //     OTIMIZA√á√ÉO: Equilibrar vaz√£o vs water coning
        
        em_emergencia(false),          // ‚úÖ false - Sistema operando normalmente
                                       //     VERIFICA√á√ÉO: Todos os par√¢metros dentro dos limites
                                       //     MONITORAMENTO: Cont√≠nuo e autom√°tico
        
        gas_oil_ratio(420.0),          // ‚õΩ 420 scf/bbl - Raz√£o g√°s-√≥leo atual
                                       //     NORMAL: T√≠pico para √≥leo m√©dio (29,5¬∞ API)
                                       //     CONTROLADO: Abaixo do limite cr√≠tico (600)
                                       //     TEND√äNCIA: Pode aumentar com deple√ß√£o
        
        water_oil_ratio(0.23),         // üíß 0,23 = 23% BSW - Water cut atual
                                       //     HIST√ìRICO: 5% (1999) ‚Üí 23% (2025)
                                       //     PROBLEMA: Water coning progredindo
                                       //     LIMITE: 35% (econ√¥mico) - ainda OK!
        
        tempo_simulacao_s(0.0)         // ‚è±Ô∏è 0 segundos - In√≠cio da simula√ß√£o
                                       //     CONTADOR: Ser√° incrementado a cada ciclo
                                       //     TIMESTEP: 5 segundos (realismo operacional)
    
    {} // üèÅ FIM DO CONSTRUTOR - RESERVAT√ìRIO INICIALIZADO!

    /*
    üéì ================================================================================
    ‚öôÔ∏è M√âTODOS UTILIT√ÅRIOS - REFATORA√á√ÉO DE C√ìDIGO REPETIDO  
    ================================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO:
    Refatora√ß√£o √© o processo de reestruturar c√≥digo existente sem alterar seu
    comportamento externo, melhorando legibilidade, manutenibilidade e reutiliza√ß√£o.
    
    üéØ BENEF√çCIOS DA REFATORA√á√ÉO:
    ‚Ä¢ DRY Principle (Don't Repeat Yourself) - Elimina duplica√ß√£o
    ‚Ä¢ Single Responsibility - Cada m√©todo tem uma fun√ß√£o espec√≠fica  
    ‚Ä¢ Facilita manuten√ß√£o e debugging
    ‚Ä¢ Melhora testabilidade do c√≥digo
    ‚Ä¢ Reduz chance de erros por inconsist√™ncia
    
    üè≠ APLICA√á√ÉO INDUSTRIAL:
    Sistemas cr√≠ticos como SCADA requerem c√≥digo altamente organizado para:
    ‚Ä¢ Facilitar auditorias de software
    ‚Ä¢ Reduzir bugs em sistemas de seguran√ßa
    ‚Ä¢ Permitir atualiza√ß√µes r√°pidas e seguras
    ‚Ä¢ Facilitar treinamento de novos engenheiros
    
    ================================================================================
    */

    /*
    üå°Ô∏è ========================================================================
    M√âTODO UTILIT√ÅRIO: CONVERS√ÉO CELSIUS ‚Üí FAHRENHEIT
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Converte temperatura de Celsius para Fahrenheit usando a f√≥rmula padr√£o
    da termodin√¢mica. Muito usado em correla√ß√µes PVT da ind√∫stria petroleira.
    
    üî¨ F√ìRMULA: ¬∞F = (¬∞C √ó 9/5) + 32 = (¬∞C √ó 1.8) + 32
    
    üõ¢Ô∏è APLICA√á√ÉO PETROLEIRA:
    ‚Ä¢ Correla√ß√µes de Standing (viscosidade)
    ‚Ä¢ Propriedades PVT (press√£o-volume-temperatura)  
    ‚Ä¢ C√°lculos de densidade de fluidos
    ‚Ä¢ Interface com equipamentos americanos (sensores ¬∞F)
    
    PAR√ÇMETROS:
    ‚Ä¢ temperatura_C: Temperatura em graus Celsius [¬∞C]
    
    RETORNA: Temperatura em graus Fahrenheit [¬∞F]
    */
    double celsiusParaFahrenheit(double temperatura_C) const {
        return 1.8 * temperatura_C + 32.0;
    }

    /*
    ‚è±Ô∏è ========================================================================
    M√âTODO UTILIT√ÅRIO: CONVERS√ÉO SEGUNDOS ‚Üí MINUTOS
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Converte tempo de segundos para minutos para exibi√ß√£o na interface.
    Melhora legibilidade dos gr√°ficos de tend√™ncia temporal.
    
    üè≠ APLICA√á√ÉO INDUSTRIAL:
    ‚Ä¢ Eixos X de gr√°ficos SCADA (trending)
    ‚Ä¢ Relat√≥rios operacionais
    ‚Ä¢ Logs de eventos temporais
    ‚Ä¢ Sincroniza√ß√£o entre sistemas
    
    PAR√ÇMETROS:
    ‚Ä¢ tempo_segundos: Tempo em segundos [s]
    
    RETORNA: Tempo em minutos [min]
    */
    double segundosParaMinutos(double tempo_segundos) const {
        return tempo_segundos / 60.0;
    }

    /*
    üìä ========================================================================
    M√âTODO UTILIT√ÅRIO: FORMATA√á√ÉO NUM√âRICA PADRONIZADA
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Padroniza a formata√ß√£o de n√∫meros com precis√£o decimal espec√≠fica.
    Essencial para consist√™ncia visual em interfaces SCADA profissionais.
    
    üéØ PADR√ïES DE PRECIS√ÉO:
    ‚Ä¢ 0 casas: Volumes grandes (barris, m¬≥)
    ‚Ä¢ 1 casa: Percentuais (BSW%, recovery factor)  
    ‚Ä¢ 2 casas: Par√¢metros operacionais (press√£o, vaz√£o, temperatura)
    ‚Ä¢ 3 casas: Ratios precisos (WOR, viscosidade fina)
    
    üè≠ APLICA√á√ÉO INDUSTRIAL:
    ‚Ä¢ Relat√≥rios t√©cnicos padronizados
    ‚Ä¢ Interfaces SCADA consistentes
    ‚Ä¢ Exporta√ß√£o de dados (CSV, Excel)
    ‚Ä¢ Comunica√ß√£o entre sistemas
    
    PAR√ÇMETROS:
    ‚Ä¢ valor: N√∫mero a ser formatado
    ‚Ä¢ precisao: N√∫mero de casas decimais (0-3)
    
    RETORNA: QString formatado consistentemente
    */
    QString formatarNumero(double valor, int precisao) const {
        return QString::number(valor, 'f', precisao);
    }

    // M√©todos de C√°lculo e Simula√ß√£o
    /*
    ‚õΩ ========================================================================
    M√âTODO REFATORADO: C√ÅLCULO DE SOLUBILIDADE DE G√ÅS  
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO APLICADA:
    Substitui√ß√£o da convers√£o manual ¬∞C‚Üí¬∞F pelo m√©todo utilit√°rio
    celsiusParaFahrenheit(), eliminando duplica√ß√£o de c√≥digo.
    
    üî¨ CORRELA√á√ÉO DE STANDING (1947):
    Calcula solubilidade de g√°s no √≥leo em condi√ß√µes de reservat√≥rio.
    Fundamental para modelagem PVT e comportamento de fases.
    */
    double calcularSolubilidadeGas(double pressao_psi, double temperatura_C) {
        // USO DO M√âTODO UTILIT√ÅRIO (REFATORA√á√ÉO)
        double temp_F = celsiusParaFahrenheit(temperatura_C);
        
        double resultado = GRAVIDADE_GAS_PESO_AR * pow((pressao_psi / 18.2) * exp(0.0125 * GRAVIDADE_API * exp(0.0011 * temp_F)), 1.2045);
        return resultado;
    }

    /*
    üåØ ========================================================================
    M√âTODO REFATORADO: C√ÅLCULO DE VISCOSIDADE DO √ìLEO
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO APLICADA:
    Substitui√ß√£o da convers√£o manual ¬∞C‚Üí¬∞F pelo m√©todo utilit√°rio,
    mantendo a mesma l√≥gica de c√°lculo calibrada para o ATS-7B.
    */
    double calcularViscosidadeOleo(double pressao_psi, double temperatura_C) {
        // C√°lculo de viscosidade calibrado para √≥leo ATS-7B (29.5¬∞ API)
        
        // USO DO M√âTODO UTILIT√ÅRIO (REFATORA√á√ÉO)
        double temp_F = celsiusParaFahrenheit(temperatura_C);
        
        // Viscosidade morta para √≥leo 29.5¬∞ API a 92¬∞C
        double viscosidade_base = 2.8; // cp - medido no ATS-7B
        
        // Corre√ß√£o por temperatura (Lei de Arrhenius modificada)
        double temp_ref = 92.0; // Temperatura de refer√™ncia ATS-7B
        double fator_temp = exp(500.0 * (1.0/(temperatura_C + 273.15) - 1.0/(temp_ref + 273.15)));
        
        // Corre√ß√£o por press√£o (compressibilidade isotermal)
        double press_ref = 2850.0; // Press√£o de refer√™ncia ATS-7B
        double fator_pressao = 1.0 + 2.5e-6 * (pressao_psi - press_ref);
        
        double resultado = viscosidade_base * fator_temp * fator_pressao;
        
        // Limitar ao range f√≠sico do √≥leo ATS-7B
        return std::max(1.8, std::min(resultado, LIMITE_VISCOSIDADE_CRITICO));
    }

    double calcularVazaoProducao(double pressao_reservatorio_psi) {
        // IPR (Inflow Performance Relationship) calibrada para ATS-7B
        double pi_atual = 8.2; // √çndice de produtividade atual ATS-7B (bopd/psi)
        double q_max = PRODUTIVIDADE_POCO_C;
        
        if (pressao_reservatorio_psi >= pressao_de_bolha_psi) {
            // Fluxo monof√°sico (acima da press√£o de bolha)
            double drawdown = pressao_reservatorio_psi - pressao_poco_psi;
            return pi_atual * drawdown * (1.0 - 0.1 * drawdown / pressao_reservatorio_psi);
        } else {
            // Fluxo bif√°sico (abaixo da press√£o de bolha) - Vogel's IPR modificado para ATS-7B
            double pr_pb = pressao_reservatorio_psi / pressao_de_bolha_psi;
            double pwf_pb = pressao_poco_psi / pressao_de_bolha_psi;
            
            // Vogel's equation ajustada para manter vaz√£o pr√≥xima aos 22,000 bpd do ATS-7B
            // Usando fatores de corre√ß√£o baseados em dados hist√≥ricos
            double drawdown_normalizado = (pressao_reservatorio_psi - pressao_poco_psi) / pressao_de_bolha_psi;
            double eficiencia = 0.95 + 0.05 * drawdown_normalizado; // Efici√™ncia alta para ATS-7B
            
            return q_max * eficiencia;
        }
    }

    void simularEfeitoProducao(double tempo_passado_s) {
        if (em_emergencia) {
            vazao_oleo_bopd = 0.0;
            return;
        }
        
        // C√°lculo de vaz√£o baseado no IPR do ATS-7B
        double vazao_calculada = calcularVazaoProducao(pressao_psi);
        
        // üîç DEBUG: Log para identificar problema do √≠cone laranja
        static bool primeira_vez = true;
        if (primeira_vez) {
            printf("üîç DEBUG VAZAO: Inicial=%.0f, Calculada=%.0f\n", vazao_oleo_bopd, vazao_calculada);
            primeira_vez = false;
        }
        
        vazao_oleo_bopd = vazao_calculada;
        
        // Produ√ß√£o em barris neste intervalo
        double oleo_produzido_bbl = vazao_oleo_bopd * (tempo_passado_s / 86400.0);
        
        // Deple√ß√£o do volume de √≥leo (OOIP ATS-7B)
        volume_oleo_bbl -= oleo_produzido_bbl;
        if (volume_oleo_bbl < 0) volume_oleo_bbl = 0;
        
        // Decl√≠nio de press√£o baseado na curva real do ATS-7B
        // Taxa de decl√≠nio atual: ~8% ao ano = 0.00015 por dia
        double taxa_declinio_diaria = 0.00015; // Calibrada para ATS-7B
        double declinio_pressao = pressao_psi * taxa_declinio_diaria * (tempo_passado_s / 86400.0);
        
        // Fator de deple√ß√£o acelerada (baseado no OOIP original = 280 MM bbl)
        double recovery_factor = 1.0 - (volume_oleo_bbl / 280000000.0);
        declinio_pressao *= (1.0 + 2.0 * recovery_factor); // Acelera√ß√£o progressiva
        
        pressao_psi -= declinio_pressao;
        if (pressao_psi < 0) pressao_psi = 0;
        
        // Libera√ß√£o de g√°s livre (press√£o < press√£o de bolha)
        if (pressao_psi < pressao_de_bolha_psi) {
            // GOR aumenta conforme press√£o diminui (comportamento t√≠pico)
            double gor_increment = 200.0 * (pressao_de_bolha_psi - pressao_psi) / pressao_de_bolha_psi;
            gas_oil_ratio = std::min(gas_oil_ratio + gor_increment * (tempo_passado_s / 86400.0), LIMITE_GOR_CRITICO);
            volume_gas_m3 += oleo_produzido_bbl * gas_oil_ratio / 178.1; // Convers√£o scf para m¬≥
        }
        
        // Coning de √°gua (caracter√≠stico do ATS-7B)
        simularConingMLS3A();
        
        // Produ√ß√£o de √°gua (BSW crescente)
        double agua_produzida_bbl = oleo_produzido_bbl * water_oil_ratio;
        volume_agua_bbl += agua_produzida_bbl; // √Ågua produzida acumula
        
        // Varia√ß√£o operacional t√≠pica do ATS-7B (¬±2%)
        double variacao = ((rand() % 41) - 20) / 1000.0;
        vazao_oleo_bopd *= (1.0 + variacao);
        
        // Aplicar limites operacionais do ATS-7B
        vazao_oleo_bopd = std::max(8000.0, std::min(vazao_oleo_bopd, 42000.0));
    }

    void simularConingMLS3A() {
        // Coning caracter√≠stico do ATS-7B (baseado em 26 anos de dados)
        double drawdown = pressao_psi - pressao_poco_psi;
        double drawdown_critico = 900.0; // psi - limite para coning severo
        
        if (drawdown > drawdown_critico) {
            // Coning severo - aumento acelerado de BSW
            double incremento_bsw = 0.002; // 0.2% por ciclo
            water_oil_ratio += incremento_bsw;
            water_oil_ratio = std::min(water_oil_ratio, LIMITE_WOR_CRITICO);
            
            // Gas coning tamb√©m aumenta
            gas_oil_ratio += 15.0; // scf/bbl por ciclo
            gas_oil_ratio = std::min(gas_oil_ratio, LIMITE_GOR_CRITICO);
        } else {
            // Coning controlado - crescimento natural do BSW
            double anos_producao = tempo_simulacao_s / (365.25 * 86400.0);
            double bsw_natural = 0.15 + 0.008 * anos_producao; // Curva real ATS-7B
            water_oil_ratio = std::min(bsw_natural, LIMITE_WOR_CRITICO);
            
            // GOR se mant√©m est√°vel ou cresce lentamente
            if (gas_oil_ratio > 420.0) {
                gas_oil_ratio = std::max(420.0, gas_oil_ratio - 2.0);
            }
        }
    }

    void atualizarEstado(double tempo_passado_s) {
        viscosidade_oleo_cp = calcularViscosidadeOleo(pressao_psi, temperatura_C);
        simularEfeitoProducao(tempo_passado_s);
        verificarEmergencia();
        tempo_simulacao_s += tempo_passado_s;
    }

    void verificarEmergencia() {
        bool emergencia_anterior = em_emergencia;
        em_emergencia = false;
        QString motivo_shutdown = "";
        
        if (pressao_psi < LIMITE_PRESSAO_CRITICO_MIN) {
            em_emergencia = true;
            motivo_shutdown += QString("PRESS√ÉO CR√çTICA BAIXA: %1 psi < %2 psi; ").arg(pressao_psi, 0, 'f', 1).arg(LIMITE_PRESSAO_CRITICO_MIN);
        }
        if (pressao_psi > LIMITE_PRESSAO_CRITICO_MAX) {
            em_emergencia = true;
            motivo_shutdown += QString("PRESS√ÉO CR√çTICA ALTA: %1 psi > %2 psi; ").arg(pressao_psi, 0, 'f', 1).arg(LIMITE_PRESSAO_CRITICO_MAX);
        }
        if (viscosidade_oleo_cp > LIMITE_VISCOSIDADE_CRITICO) {
            em_emergencia = true;
            motivo_shutdown += QString("VISCOSIDADE CR√çTICA: %1 cp > %2 cp; ").arg(viscosidade_oleo_cp, 0, 'f', 1).arg(LIMITE_VISCOSIDADE_CRITICO);
        }
        if (volume_gas_m3 > LIMITE_GAS_CRITICO) {
            em_emergencia = true;
            motivo_shutdown += QString("VOLUME DE G√ÅS CR√çTICO: %1 m¬≥ > %2 m¬≥ (GAS-LOCK!); ").arg(volume_gas_m3, 0, 'f', 0).arg(LIMITE_GAS_CRITICO);
        }
        if (water_oil_ratio > LIMITE_WOR_CRITICO) {
            em_emergencia = true;
            motivo_shutdown += QString("WOR CR√çTICO: %1% > %2% (BSW alto); ").arg(water_oil_ratio * 100, 0, 'f', 1).arg(LIMITE_WOR_CRITICO * 100);
        }
        if (gas_oil_ratio > LIMITE_GOR_CRITICO) {
            em_emergencia = true;
            motivo_shutdown += QString("GOR CR√çTICO: %1 scf/bbl > %2 scf/bbl; ").arg(gas_oil_ratio, 0, 'f', 0).arg(LIMITE_GOR_CRITICO);
        }
        
        // Log detalhado apenas quando entra em emerg√™ncia (n√£o a cada ciclo)
        if (em_emergencia && !emergencia_anterior) {
            motivo_emergencia = "üö® SHUTDOWN AUTOM√ÅTICO ATIVADO: " + motivo_shutdown;
        }
    }

    // M√©todos de Interven√ß√£o
    void injetarAgua(double volume_bbl, double temp_inj_C) {
        volume_agua_bbl += volume_bbl;
        double fator_temp_pressao = 1.0 + (temp_inj_C - temperatura_C) / 100.0;
        pressao_psi += volume_bbl * FATOR_INJECAO_AGUA_BASE * fator_temp_pressao;
        temperatura_C += volume_bbl * 0.00001 * (temp_inj_C - temperatura_C) / volume_oleo_bbl;
    }

    void injetarGas(double volume_m3, double densidade_gas_ar) {
        volume_gas_m3 += volume_m3;
        double fator_densidade_pressao = 1.0 + (densidade_gas_ar - GRAVIDADE_GAS_PESO_AR) * 0.5;
        pressao_psi += volume_m3 * FATOR_INJECAO_GAS_BASE * fator_densidade_pressao;
    }

    void injetarVapor(double tempo_inundacao_s) {
        temperatura_C += tempo_inundacao_s * 0.1;
        temperatura_C = std::min(200.0, temperatura_C);
    }

    void liberarGasParaQueima(double vazao_scfd) {
        double gas_queimado_m3 = vazao_scfd / 35.315 * (1.0 / 86400.0);
        volume_gas_m3 -= gas_queimado_m3;
        volume_gas_m3 = std::max(0.0, volume_gas_m3);
        pressao_psi -= vazao_scfd * 0.0001;
        pressao_psi = std::max(0.0, pressao_psi);
    }

    /*
    üîß AJUSTE DE V√ÅLVULA CHOKE - CONTROLE DE PRODU√á√ÉO
    
    üìö CONCEITO EDUCACIONAL:
    A v√°lvula choke √© instalada na √°rvore de natal (christmas tree) e
    controla a vaz√£o de produ√ß√£o. √â uma das ferramentas mais importantes
    para otimiza√ß√£o da produ√ß√£o.
    
    üîÑ PRINC√çPIO DE OPERA√á√ÉO:
    ‚Ä¢ FECHAR v√°lvula ‚Üí ‚Üë Press√£o de fundo ‚Üí ‚Üì Vaz√£o
    ‚Ä¢ ABRIR v√°lvula ‚Üí ‚Üì Press√£o de fundo ‚Üí ‚Üë Vaz√£o
    
    ‚öôÔ∏è OTIMIZA√á√ÉO:
    ‚Ä¢ MUITO ABERTA: Water coning, produ√ß√£o de areia
    ‚Ä¢ MUITO FECHADA: Baixa vaz√£o, inefici√™ncia
    ‚Ä¢ PONTO √ìTIMO: M√°xima vaz√£o com controle de coning
    
    üèÜ AUTOMA√á√ÉO: Modernos sistemas ajustam automaticamente
    */
    void ajustarPressaoPoco(double ajuste_psi) {
        // APLICA O AJUSTE SOLICITADO
        pressao_poco_psi += ajuste_psi;
        
        // LIMITES F√çSICOS E OPERACIONAIS
        double pressao_min = 100.0;   // psi - Limite m√≠nimo para opera√ß√£o
        double pressao_max = 1000.0;  // psi - Limite m√°ximo da v√°lvula
        
        // Aplica os limites (clamp function)
        pressao_poco_psi = std::max(pressao_min, std::min(pressao_max, pressao_poco_psi));
        
        /*
        üìù NOTA EDUCACIONAL:
        O controle fino da press√£o de fundo √© uma arte! Engenheiros
        experientes sabem que pequenos ajustes podem ter grandes
        impactos na produ√ß√£o e na vida √∫til do po√ßo.
        
        üìà EXEMPLO REAL:
        No ATS-7B, reduzir Pwf de 2.000 para 1.900 psi pode:
        ‚Ä¢ Aumentar vaz√£o em 15%
        ‚Ä¢ Acelerar water coning em 30%
        ‚Ä¢ Reduzir vida √∫til em 2 anos
        
        ‚ö†Ô∏è DECIS√ÉO: Curto prazo vs longo prazo?
        */
    }

}; // üèÅ FIM DA CLASSE RESERVATORIO - MODELO COMPLETO DO ATS-7B!

/*
üéì ================================================================================
PARAB√âNS! VOC√ä COMPLETOU O ESTUDO DA CLASSE RESERVATORIO!
================================================================================

üìö O QUE VOC√ä APRENDEU:

1Ô∏è‚É£ PROPRIEDADES F√çSICAS: Press√£o, temperatura, viscosidade, volumes
2Ô∏è‚É£ CORRELA√á√ïES PETROLEIRAS: Standing, Vogel, Darcy
3Ô∏è‚É£ FEN√îMENOS OPERACIONAIS: Decl√≠nio, coning, deple√ß√£o
4Ô∏è‚É£ M√âTODOS DE CONTROLE: Inje√ß√£o, choke, flare
5Ô∏è‚É£ SISTEMAS DE SEGURAN√áA: Limites, shutdown, monitoramento

üèÜ DADOS REAIS: Tudo baseado no campo ATS-7B (Atl√¢ntida Oriental)
üî¨ VALIDA√á√ÉO: 26 anos de dados operacionais
üéØ APLICABILIDADE: Conhecimento direto da ind√∫stria brasileira

‚û°Ô∏è PR√ìXIMO PASSO: Estude a interface gr√°fica e sistema de visualiza√ß√£o!

================================================================================
*/

/*
üéì ================================================================================
üìä ESTRUTURA PARA ARMAZENAMENTO DE DADOS HIST√ìRICOS (DATA LOGGING)
================================================================================

üìö CONCEITO EDUCACIONAL:
Esta estrutura representa um "snapshot" (foto instant√¢nea) de todos os par√¢metros
operacionais do reservat√≥rio em um determinado momento no tempo. √â equivalente
aos dados coletados pelos sistemas SCADA em campos reais.

üíæ APLICA√á√ÉO INDUSTRIAL:
‚Ä¢ Sistemas da OceanOil coletam dados a cada 5-15 segundos
‚Ä¢ Permite an√°lise hist√≥rica (trending)
‚Ä¢ Base para relat√≥rios de produ√ß√£o
‚Ä¢ Detec√ß√£o de anomalias operacionais
‚Ä¢ Otimiza√ß√£o de reservat√≥rios

üìà FREQU√äNCIA DE COLETA:
Nosso simulador coleta dados a cada 5 segundos, igual aos sistemas reais!

================================================================================
*/

struct DadosPontos {
    /*
    üìö CAMPOS DE DADOS - EXPLICA√á√ÉO PARA ESTUDANTES:
    
    Cada campo representa uma grandeza fundamental na engenharia de reservat√≥rios:
    */
    
    QString uuid;              // üîë Identificador √∫nico universal [UUID v4]
                               //     CONCEITO: Chave prim√°ria para streaming/mensageria
                               //     FORMATO: "550e8400-e29b-41d4-a716-446655440000"
                               //     USO: Kafka streaming, deduplica√ß√£o, rastreamento
    
    double tempo_min;          // ‚è±Ô∏è Tempo decorrido [minutos]
                               //     CONCEITO: Eixo temporal para an√°lise de tend√™ncias
                               //     USO: Gr√°ficos de produ√ß√£o vs tempo
                               //     CONVERS√ÉO: segundos ‚Üí minutos (interface mais leg√≠vel)
    
    double vazao_oleo;         // üö¢ Taxa de produ√ß√£o de √≥leo [barris/dia]
                               //     CONCEITO: M√©trica principal de performance do po√ßo
                               //     IMPORT√ÇNCIA: Indica a sa√∫de econ√¥mica do campo
                               //     RANGE ATS-7B: 8.000-45.000 bopd (hist√≥rico)
    
    double pressao;            // üå°Ô∏è Press√£o do reservat√≥rio [psi]
                               //     CONCEITO: Energia que impulsiona a produ√ß√£o
                               //     DECL√çNIO: Natural com a deple√ß√£o do reservat√≥rio
                               //     CR√çTICO: Abaixo de 1.650 psi = shutdown
    
    double viscosidade_cp;     // üåØ Viscosidade din√¢mica do √≥leo [centipoise]
                               //     CONCEITO: Resist√™ncia do √≥leo ao escoamento
                               //     FATOR: Temperatura ‚Üë = Viscosidade ‚Üì (melhor!)
                               //     CONTROLE: Inje√ß√£o de vapor ou √°gua quente
    
    double volume_oleo;        // üõ¢Ô∏è Volume restante no reservat√≥rio [barris]
                               //     CONCEITO: OOIP atual (Oil Originally In Place)
                               //     DEPLE√á√ÉO: Diminui com a produ√ß√£o
                               //     META: Maximizar recovery factor (% recuperado)
    
    double temperatura;        // üå°Ô∏è Temperatura do reservat√≥rio [¬∞C]
                               //     CONCEITO: Afeta propriedades PVT dos fluidos
                               //     CONTROLE: Inje√ß√£o de vapor (EOR - Enhanced Oil Recovery)
                               //     CONSTANTE: ~92¬∞C no ATS-7B (geot√©rmica)
    
    double gor;               // ‚õΩ Gas-Oil Ratio [scf/bbl] (standard cubic feet per barrel)
                              //     CONCEITO: Volume de g√°s por barril de √≥leo produzido
                              //     PROBLEMA: GOR alto = bombeio menos eficiente
                              //     TEND√äNCIA: Aumenta com deple√ß√£o de press√£o
    
    double wor;               // üíß Water-Oil Ratio [adimensional]
                              //     CONCEITO: Equivale ao BSW (Basic Sediments & Water)
                              //     PROBLEMA: Water coning reduz produ√ß√£o de √≥leo
                              //     AUMENTO: Natural com a vida do campo
    
    // NOVOS CAMPOS PARA RASTREAMENTO DE EVENTOS E AN√ÅLISE AVAN√áADA
    QString data_hora;        // üìÖ Timestamp completo [ISO 8601 format]
                              //     CONCEITO: Data/hora exata da coleta de dados
                              //     FORMATO: "2025-08-29T15:30:45"
                              //     USO: An√°lise temporal precisa, auditoria
    
    QString evento_operador;  // üë®‚Äçüíº A√ß√£o do operador [texto descritivo]
                              //     CONCEITO: Interven√ß√µes manuais realizadas
                              //     EXEMPLOS: "Inj √Ågua 1000bbl", "Vapor 500s", "Manual Stop"
                              //     USO: Correlacionar a√ß√µes com resultados
    
    QString evento_fisica;    // ‚öóÔ∏è Evento f√≠sico do reservat√≥rio [texto descritivo]  
                              //     CONCEITO: Fen√¥menos autom√°ticos do sistema
                              //     EXEMPLOS: "Press√£o decl√≠nio", "Water coning", "Gas breakthrough"
                              //     USO: An√°lise de comportamento natural
    
    QString alerta_tipo;      // üö® Tipo de alerta ativo [palavra-chave]
                              //     CONCEITO: Estado de criticidade do sistema
                              //     VALORES: "NORMAL", "ATENCAO", "CRITICO", "SHUTDOWN"
                              //     USO: Filtragem r√°pida, alertas autom√°ticos
    
    /*
    üéØ IMPORT√ÇNCIA DO DATA LOGGING:
    
    ‚úÖ OPERA√á√ÉO DI√ÅRIA:
    ‚Ä¢ Detecta problemas antes que se tornem cr√≠ticos
    ‚Ä¢ Permite ajustes operacionais em tempo real
    ‚Ä¢ Otimiza a produ√ß√£o continuamente
    
    ‚úÖ PLANEJAMENTO:
    ‚Ä¢ Previs√£o de decl√≠nio de produ√ß√£o
    ‚Ä¢ Planejamento de interven√ß√µes (workover)
    ‚Ä¢ Decis√µes de abandono do po√ßo
    
    ‚úÖ REGULAT√ìRIO:
    ‚Ä¢ Relat√≥rios para ANP (Ag√™ncia Nacional do Petr√≥leo)
    ‚Ä¢ Controle de royalties e participa√ß√µes especiais
    ‚Ä¢ Auditoria e compliance
    */
};

/*
üéì ================================================================================
üìã CLASSE REPORTDIALOG - SISTEMA DE RELAT√ìRIOS OPERACIONAIS
================================================================================

üìö CONCEITO EDUCACIONAL:
Esta classe implementa um sistema de relat√≥rios similar ao usado na ind√∫stria
petrol√≠fera. √â equivalente aos relat√≥rios de produ√ß√£o di√°rios/mensais gerados
pelos sistemas SCADA da OceanOil.

üè≠ APLICA√á√ÉO INDUSTRIAL:
‚Ä¢ Relat√≥rios de performance di√°ria de po√ßos
‚Ä¢ Documenta√ß√£o para auditorias da ANP
‚Ä¢ An√°lise de efici√™ncia operacional
‚Ä¢ Base para tomada de decis√£o gerencial
‚Ä¢ Compliance regulat√≥rio

üíº PADR√ÉO INDUSTRIAL:
Relat√≥rios estruturados com HTML permitem:
‚Ä¢ Formata√ß√£o profissional
‚Ä¢ Integra√ß√£o com sistemas corporativos
‚Ä¢ Exporta√ß√£o para PDF/Excel
‚Ä¢ Padroniza√ß√£o visual

üìä DADOS INCLU√çDOS:
Todos os par√¢metros operacionais cr√≠ticos do ATS-7B em formato executivo.

================================================================================
*/

class ReportDialog : public QDialog {
    Q_OBJECT

public:
    /*
    üèóÔ∏è ========================================================================
    CONSTRUTOR - INICIALIZA√á√ÉO DO DI√ÅLOGO DE RELAT√ìRIOS
    ========================================================================
    
    üìö PARA ESTUDANTES: O construtor configura a janela e gera automaticamente
    o relat√≥rio com os dados atuais do reservat√≥rio.
    
    PAR√ÇMETROS:
    ‚Ä¢ reservatorio: Ponteiro para o objeto com dados atuais
    ‚Ä¢ dataPoints: Vetor com hist√≥rico de dados para an√°lises
    ‚Ä¢ parent: Widget pai (padr√£o Qt)
    */
    ReportDialog(Reservatorio* reservatorio, const QVector<DadosPontos>& dataPoints, QWidget* parent = nullptr) : QDialog(parent) {
        
        // CONFIGURA√á√ÉO DA JANELA
        setWindowTitle("üìã Relat√≥rio Operacional ATS-7B - Atl√¢ntida Oriental");
        setMinimumSize(800, 600);  // Tamanho m√≠nimo para visualiza√ß√£o adequada
        
        // LAYOUT PRINCIPAL (organiza√ß√£o vertical)
        QVBoxLayout* mainLayout = new QVBoxLayout(this);

        // √ÅREA DE TEXTO PARA O RELAT√ìRIO
        reportTextEdit = new QTextEdit(this);
        reportTextEdit->setReadOnly(true);  // Somente leitura (n√£o edit√°vel)
        
        // ESTILO PROFISSIONAL (similar aos sistemas corporativos)
        reportTextEdit->setStyleSheet(
            "background-color: #f0f0f0; "      // Fundo cinza claro
            "color: #333; "                     // Texto escuro 
            "font-family: monospace; "          // Fonte monoespa√ßada (mais t√©cnica)
            "font-size: 11px; "                 // Tamanho leg√≠vel
            "padding: 10px; "                   // Espa√ßamento interno
        );
        mainLayout->addWidget(reportTextEdit);

        // BOT√ÉO DE FECHAR
        QPushButton* closeButton = new QPushButton("üîö Fechar Relat√≥rio", this);
        closeButton->setStyleSheet(
            "QPushButton { "
                "background-color: #0078D4; "
                "color: white; "
                "font-weight: bold; "
                "padding: 8px 16px; "
                "border: none; "
                "border-radius: 4px; "
            "}"
            "QPushButton:hover { background-color: #106EBE; }"
        );
        mainLayout->addWidget(closeButton);

        // CONECTAR SINAL-SLOT (fechar janela quando bot√£o clicado)
        connect(closeButton, &QPushButton::clicked, this, &ReportDialog::accept);

        // GERAR O RELAT√ìRIO AUTOMATICAMENTE
        generateReports(reservatorio, dataPoints);
        
        /*
        üìù NOTA EDUCACIONAL:
        Este padr√£o (construtor que inicializa e gera conte√∫do) √© comum
        em aplica√ß√µes industriais onde relat√≥rios s√£o gerados automaticamente
        com base em dados operacionais atuais.
        */
    }

private:
    QTextEdit* reportTextEdit;  // Widget para exibir o relat√≥rio HTML

    /*
    üìä ========================================================================
    M√âTODO DE GERA√á√ÉO DE RELAT√ìRIOS - CORE DO SISTEMA
    ========================================================================
    
    üìö CONCEITO: Este m√©todo transforma dados t√©cnicos em um relat√≥rio
    executivo formatado, similar aos relat√≥rios da OceanOil/ANP.
    */
    void generateReports(Reservatorio* reservatorio, const QVector<DadosPontos>& dataPoints) {
        QString reportHtml;

        // CABE√áALHO DO RELAT√ìRIO (HTML estruturado)
        reportHtml += "<div style='text-align: center; margin-bottom: 20px;'>";
        reportHtml += "<h1 style='color: #0056b3; margin: 0;'>üõ¢Ô∏è OCEANOIL - RELAT√ìRIO OPERACIONAL</h1>";
        reportHtml += "<h2 style='color: #0056b3; margin: 5px 0;'>PO√áO ATS-7B - CAMPO DE ATL√ÇNTIDA ORIENTAL</h2>";
        reportHtml += "<h3 style='color: #666; margin: 5px 0;'>BACIA DE ATL√ÇNTIDA - √ÅGUAS PROFUNDAS</h3>";
        reportHtml += "<hr style='border: 2px solid #0056b3; margin: 15px 0;'>";
        reportHtml += "</div>";

        // SE√á√ÉO PRINCIPAL - PAR√ÇMETROS OPERACIONAIS ATUAIS
        reportHtml += "<h2 style='color:#0056b3; background-color: #f8f9fa; padding: 8px; border-left: 4px solid #0056b3;'>";
        reportHtml += "üìà PAR√ÇMETROS OPERACIONAIS ATUAIS</h2>";
        
        reportHtml += "<table style='width: 100%; border-collapse: collapse; margin: 15px 0;'>";
        reportHtml += "<tr style='background-color: #e9ecef;'><th colspan='2' style='padding: 10px; text-align: center; font-size: 14px;'>DADOS DE PRODU√á√ÉO</th></tr>";
        
        // LINHA DE PRODU√á√ÉO (MAIS IMPORTANTE)
        reportHtml += QString("<tr style='background-color: %1;'><td style='padding: 8px; font-weight: bold; border: 1px solid #dee2e6;'>üö¢ Vaz√£o de √ìleo (atual):</td><td style='padding: 8px; border: 1px solid #dee2e6; font-weight: bold; font-size: 16px;'>%2 bopd</td></tr>")
                     .arg(reservatorio->vazao_oleo_bopd < reservatorio->PRODUCAO_MINIMA_ACEITAVEL_BOPD ? "#ffebee" : "#e8f5e8")
                     .arg(QString::number(reservatorio->vazao_oleo_bopd, 'f', 2));

        // PAR√ÇMETROS DO RESERVAT√ìRIO
        reportHtml += QString("<tr><td style='padding: 8px; border: 1px solid #dee2e6;'><b>üå°Ô∏è Press√£o do Reservat√≥rio:</b></td><td style='padding: 8px; border: 1px solid #dee2e6;'>%1 psi</td></tr>").arg(QString::number(reservatorio->pressao_psi, 'f', 2));
        reportHtml += QString("<tr style='background-color: #f8f9fa;'><td style='padding: 8px; border: 1px solid #dee2e6;'><b>üå°Ô∏è Temperatura do Reservat√≥rio:</b></td><td style='padding: 8px; border: 1px solid #dee2e6;'>%1 ¬∞C</td></tr>").arg(QString::number(reservatorio->temperatura_C, 'f', 2));
        reportHtml += QString("<tr><td style='padding: 8px; border: 1px solid #dee2e6;'><b>üåØ Viscosidade do √ìleo:</b></td><td style='padding: 8px; border: 1px solid #dee2e6;'>%1 cp</td></tr>").arg(QString::number(reservatorio->viscosidade_oleo_cp, 'f', 2));

        // RATIOS CR√çTICOS
        reportHtml += "<tr style='background-color: #e9ecef;'><th colspan='2' style='padding: 10px; text-align: center;'>RATIOS OPERACIONAIS</th></tr>";
        
        // GOR com c√≥digo de cores
        QString gorColor = reservatorio->gas_oil_ratio > reservatorio->LIMITE_GOR_CRITICO ? "#ffebee" : "#e8f5e8";
        reportHtml += QString("<tr style='background-color: %1;'><td style='padding: 8px; border: 1px solid #dee2e6;'><b>‚õΩ GOR (G√°s-√ìleo Ratio):</b></td><td style='padding: 8px; border: 1px solid #dee2e6;'>%2 scf/bbl</td></tr>")
                     .arg(gorColor).arg(QString::number(reservatorio->gas_oil_ratio, 'f', 2));

        // WOR com c√≥digo de cores  
        QString worColor = reservatorio->water_oil_ratio > reservatorio->LIMITE_WOR_CRITICO ? "#ffebee" : "#e8f5e8";
        reportHtml += QString("<tr style='background-color: %1;'><td style='padding: 8px; border: 1px solid #dee2e6;'><b>üíß WOR (√Ågua-√ìleo Ratio):</b></td><td style='padding: 8px; border: 1px solid #dee2e6;'>%2 (BSW: %3%)</td></tr>")
                     .arg(worColor).arg(QString::number(reservatorio->water_oil_ratio, 'f', 3)).arg(QString::number(reservatorio->water_oil_ratio * 100, 'f', 1));

        // STATUS OPERACIONAL (MAIS CR√çTICO)
        QString statusText = reservatorio->em_emergencia ? 
            "<span style='color: red; font-weight: bold; font-size: 16px;'>‚ö†Ô∏è SISTEMA EM EMERG√äNCIA</span>" : 
            "<span style='color: green; font-weight: bold; font-size: 16px;'>‚úÖ OPERA√á√ÉO NORMAL</span>";
        reportHtml += QString("<tr style='background-color: %1;'><td style='padding: 12px; font-weight: bold; border: 1px solid #dee2e6;'>üîç Status do Sistema:</td><td style='padding: 12px; border: 1px solid #dee2e6; text-align: center;'>%2</td></tr>")
                     .arg(reservatorio->em_emergencia ? "#ffebee" : "#e8f5e8").arg(statusText);
        
        reportHtml += "</table>";

        // SE√á√ÉO DE VOLUMES E RESERVAS
        reportHtml += "<h3 style='color:#0056b3; margin-top: 25px;'>üìä VOLUMES E RESERVAS</h3>";
        reportHtml += "<table style='width: 100%; border-collapse: collapse;'>";
        reportHtml += QString("<tr><td style='padding: 6px; border: 1px solid #dee2e6;'><b>üõ¢Ô∏è Volume de √ìleo Restante:</b></td><td style='padding: 6px; border: 1px solid #dee2e6;'>%1 bbl</td></tr>").arg(QString::number(reservatorio->volume_oleo_bbl, 'f', 0));
        reportHtml += QString("<tr style='background-color: #f8f9fa;'><td style='padding: 6px; border: 1px solid #dee2e6;'><b>‚õΩ Volume de G√°s Livre:</b></td><td style='padding: 6px; border: 1px solid #dee2e6;'>%1 m¬≥</td></tr>").arg(QString::number(reservatorio->volume_gas_m3, 'f', 0));
        reportHtml += QString("<tr><td style='padding: 6px; border: 1px solid #dee2e6;'><b>üíß Volume de √Ågua Total:</b></td><td style='padding: 6px; border: 1px solid #dee2e6;'>%1 bbl</td></tr>").arg(QString::number(reservatorio->volume_agua_bbl, 'f', 0));
        reportHtml += "</table>";

        // SE√á√ÉO DE EVENTOS CR√çTICOS E HIST√ìRICO RECENTE
        reportHtml += "<h3 style='color:#0056b3; margin-top: 25px;'>üìã EVENTOS CR√çTICOS E INTERVEN√á√ïES</h3>";
        
        // Mostrar √∫ltimos 10 eventos do hist√≥rico
        int eventosParaMostrar = std::min(10, dataPoints.size());
        if (eventosParaMostrar > 0) {
            reportHtml += "<table style='width: 100%; border-collapse: collapse; font-size: 11px;'>";
            reportHtml += "<tr style='background-color: #e9ecef;'>";
            reportHtml += "<th style='padding: 6px; border: 1px solid #dee2e6; text-align: center;'>Tempo</th>";
            reportHtml += "<th style='padding: 6px; border: 1px solid #dee2e6; text-align: center;'>Evento Operador</th>";
            reportHtml += "<th style='padding: 6px; border: 1px solid #dee2e6; text-align: center;'>Evento F√≠sico</th>";
            reportHtml += "<th style='padding: 6px; border: 1px solid #dee2e6; text-align: center;'>Alerta</th>";
            reportHtml += "</tr>";
            
            // Mostrar √∫ltimos eventos (em ordem reversa)
            for (int i = dataPoints.size() - eventosParaMostrar; i < dataPoints.size(); ++i) {
                const auto& ponto = dataPoints[i];
                
                // Apenas mostrar linha se h√° algum evento significativo
                if (!ponto.evento_operador.isEmpty() || !ponto.evento_fisica.isEmpty() || ponto.alerta_tipo != "NORMAL") {
                    QString corFundo = "#ffffff";
                    if (ponto.alerta_tipo == "SHUTDOWN") corFundo = "#ffebee";
                    else if (ponto.alerta_tipo == "CRITICO") corFundo = "#fff3e0";
                    else if (ponto.alerta_tipo == "ATENCAO") corFundo = "#fffde7";
                    
                    reportHtml += QString("<tr style='background-color: %1;'>").arg(corFundo);
                    reportHtml += QString("<td style='padding: 4px; border: 1px solid #dee2e6; text-align: center;'>%1</td>").arg(ponto.data_hora.mid(11,5)); // Apenas HH:MM
                    reportHtml += QString("<td style='padding: 4px; border: 1px solid #dee2e6;'>%1</td>").arg(ponto.evento_operador.isEmpty() ? "-" : ponto.evento_operador);
                    reportHtml += QString("<td style='padding: 4px; border: 1px solid #dee2e6;'>%1</td>").arg(ponto.evento_fisica.isEmpty() ? "-" : ponto.evento_fisica);
                    reportHtml += QString("<td style='padding: 4px; border: 1px solid #dee2e6; text-align: center; font-weight: bold;'>%1</td>").arg(ponto.alerta_tipo);
                    reportHtml += "</tr>";
                }
            }
            reportHtml += "</table>";
        } else {
            reportHtml += "<p style='color: #666; font-style: italic;'>Nenhum evento registrado ainda. O sistema est√° coletando dados...</p>";
        }

        // RODAP√â INSTITUCIONAL
        reportHtml += "<div style='margin-top: 30px; padding: 15px; background-color: #f8f9fa; border-left: 4px solid #0056b3;'>";
        reportHtml += "<p style='margin: 0; font-size: 10px; color: #666;'>";
        reportHtml += "üìã <b>RELAT√ìRIO GERADO AUTOMATICAMENTE</b> pelo Sistema SCADA ATS-7B<br>";
        reportHtml += "üè¢ <b>OCEANOIL</b> - Oceanic Oil Exploration S.A.<br>";
        reportHtml += "üåä <b>CAMPO:</b> Atl√¢ntida Oriental ‚Ä¢ <b>BACIA:</b> Atl√¢ntida ‚Ä¢ <b>ESTADO:</b> Rio de Janeiro<br>";
        reportHtml += "‚ö° <b>SISTEMA:</b> Qt5 SCADA Educational Simulator v1.0<br>";
        QString timestamp = QDateTime::currentDateTime().toString("dd/MM/yyyy hh:mm:ss");
        reportHtml += QString("üïê <b>GERADO EM:</b> %1").arg(timestamp);
        reportHtml += "</p></div>";

        // APLICAR HTML AO WIDGET
        reportTextEdit->setHtml(reportHtml);
        
        /*
        üìù NOTA EDUCACIONAL:
        Este formato de relat√≥rio √© padr√£o na ind√∫stria petrol√≠fera:
        ‚Ä¢ HTML para formata√ß√£o flex√≠vel
        ‚Ä¢ C√≥digos de cores para alertas visuais
        ‚Ä¢ Estrutura tabular para f√°cil leitura
        ‚Ä¢ Informa√ß√µes institucionais completas
        ‚Ä¢ Timestamp para auditoria
        */
    }
};

/*
üéì ================================================================================
üñ•Ô∏è CLASSE PRINCIPAL DA APLICA√á√ÉO - INTERFACE SCADA EDUCACIONAL
================================================================================

üìö CONCEITO EDUCACIONAL:
Esta √© a classe principal do simulador, equivalente a uma esta√ß√£o SCADA
(Supervisory Control and Data Acquisition) usada na ind√∫stria petrol√≠fera.
Integra todos os componentes em uma interface profissional.

üè≠ SISTEMAS SCADA REAIS:
‚Ä¢ Sala de controle da OceanOil em Maca√© (CENPES)  
‚Ä¢ Controle remoto de plataformas offshore
‚Ä¢ Monitoramento 24h/7dias de centenas de po√ßos
‚Ä¢ Integra√ß√£o com sistemas corporativos (SAP, PI System)

üéØ COMPONENTES PRINCIPAIS:
‚Ä¢ Dashboard com indicadores em tempo real
‚Ä¢ Gr√°ficos de tend√™ncia hist√≥rica
‚Ä¢ Controles operacionais (v√°lvulas, bombas, inje√ß√£o)
‚Ä¢ Sistema de alarmes e emerg√™ncia
‚Ä¢ Gera√ß√£o autom√°tica de relat√≥rios

üíª TECNOLOGIA:
Qt5 - Mesmo framework usado em sistemas industriais reais da OceanOil.

================================================================================
*/

class SimuladorWindow : public QMainWindow {
    Q_OBJECT

public:
    /*
    üèóÔ∏è ========================================================================
    CONSTRUTOR PRINCIPAL - INICIALIZA√á√ÉO DO SISTEMA SCADA
    ========================================================================
    
    üìö PARA ESTUDANTES: O construtor √© executado quando o programa inicia.
    Aqui configuramos todo o sistema: interface, gr√°ficos, simula√ß√£o e timers.
    
    üîÑ SEQU√äNCIA DE INICIALIZA√á√ÉO:
    1. Gerador de n√∫meros aleat√≥rios (para varia√ß√µes operacionais)
    2. Modelo f√≠sico do reservat√≥rio ATS-7B
    3. Sistema de temporiza√ß√£o (5 segundos como sistemas reais)
    4. Interface gr√°fica (SCADA) 
    5. Sistema de gr√°ficos e visualiza√ß√£o
    6. In√≠cio da simula√ß√£o autom√°tica
    */
    SimuladorWindow(QWidget *parent = nullptr) : QMainWindow(parent) {
        /*
        üé≤ GERADOR DE N√öMEROS ALEAT√ìRIOS:
        Inicializa com timestamp atual para simular varia√ß√µes operacionais
        naturais (ru√≠do de sensores, flutua√ß√µes de produ√ß√£o, etc.)
        */
        srand(static_cast<unsigned int>(time(nullptr)));
        
        /*
        üèóÔ∏è CRIA√á√ÉO DOS OBJETOS PRINCIPAIS:
        */
        // MODELO F√çSICO: Cria inst√¢ncia do reservat√≥rio ATS-7B
        reservatorio = new Reservatorio();  
        
        // TIMER DE SIMULA√á√ÉO: Controla o passo de tempo da simula√ß√£o
        simulationTimer = new QTimer(this);  // Timer Qt (gerenciado pelo pai)
        
        // CONECTA timer ‚Üí gameLoop (padr√£o signal-slot do Qt)
        connect(simulationTimer, &QTimer::timeout, this, &SimuladorWindow::gameLoop);
        
        // INICIALIZAR RASTREAMENTO DE EVENTOS
        ultimoEventoOperador = "";
        ultimoEventoFisica = ""; // N√£o registrar evento na inicializa√ß√£o
        tipoAlertaAtual = "NORMAL";
        sistemaInicializado = false;
        
        /*
        üé® INICIALIZA√á√ÉO DA INTERFACE GR√ÅFICA:
        M√©todo modular para organizar melhor o c√≥digo
        */
        setupUI();         // Constr√≥i toda a interface SCADA
        setupCharts();     // Configura os gr√°ficos de tend√™ncia

        /*
        ‚è∞ INICIALIZA√á√ÉO DIFERIDA (100ms ap√≥s interface pronta):
        
        üìö CONCEITO: QTimer::singleShot executa uma fun√ß√£o ap√≥s delay.
        √â usado para garantir que a interface esteja completamente
        constru√≠da antes de iniciar a simula√ß√£o.
        */
        QTimer::singleShot(100, this, [this]() {
            
            /*
            üîÑ IN√çCIO DA SIMULA√á√ÉO EM TEMPO REAL:
            5 segundos = Frequ√™ncia t√≠pica de sistemas SCADA reais
            */
            simulationTimer->start(5000);  // 5000ms = 5 segundos
            
            /*
            üì¢ MENSAGENS DE BOAS-VINDAS (LOG EDUCACIONAL):
            Informa ao usu√°rio sobre os dados reais utilizados
            */
            logMessage("üéì SIMULADOR EDUCACIONAL ATS-7B INICIADO - BEM-VINDO!");
            logMessage("üèÜ Po√ßo: Atl√¢ntida Oriental (Bacia de Atl√¢ntida) - 26 anos de dados reais", "info");
            logMessage("üìà Par√¢metros calibrados com dados da OceanOil/ANP:", "info");
            logMessage("‚Ä¢ Press√£o: 2.850 psi ‚Ä¢ Temp: 92¬∞C ‚Ä¢ API: 29,5¬∞ ‚Ä¢ PI: 8,2 bopd/psi", "info");
            logMessage("‚Ä¢ Produ√ß√£o: 22.000 bopd ‚Ä¢ BSW: 23% ‚Ä¢ GOR: 420 scf/bbl", "info");  
            logMessage("‚ÑπÔ∏è Timestep: 5s (realismo operacional) ‚Ä¢ Interface: SCADA Qt5", "info");
            logMessage("üìö Para estudantes: Explore os gr√°ficos, teste interven√ß√µes!", "info");
            
            /*
            üìà INICIALIZA√á√ÉO DOS GR√ÅFICOS:
            For√ßa primeira atualiza√ß√£o dos gr√°ficos para garantir funcionamento
            */
            atualizarGraficosSeNecessario(true);
            
            /*
            üí° DICA EDUCACIONAL:
            Esta estrutura de inicializa√ß√£o (timer diferido + log de status)
            √© padr√£o em sistemas industriais reais para:
            ‚Ä¢ Verificar se todos os subsistemas est√£o funcionando
            ‚Ä¢ Registrar o in√≠cio de opera√ß√£o para auditoria
            ‚Ä¢ Informar operadores sobre o estado inicial do sistema
            */
        });
    }

    /*
    üíÄ ========================================================================
    DESTRUTOR - CLEANUP SEGURO DO SISTEMA
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL: 
    O destrutor √© chamado automaticamente quando o programa termina.
    √â fundamental para sistemas industriais garantir shutdown seguro.
    
    ‚ö†Ô∏è IMPORT√ÇNCIA NA IND√öSTRIA:
    ‚Ä¢ Evita vazamentos de mem√≥ria
    ‚Ä¢ Para processos de forma controlada  
    ‚Ä¢ Salva dados cr√≠ticos antes do encerramento
    ‚Ä¢ Desliga equipamentos com seguran√ßa
    */
    ~SimuladorWindow() {
        /*
        ‚èπÔ∏è PARADA CONTROLADA DO TIMER:
        Verifica se o timer existe e est√° ativo antes de parar.
        Evita crashes durante o shutdown.
        */
        if (simulationTimer && simulationTimer->isActive()) {
            simulationTimer->stop();  // Para a simula√ß√£o em tempo real
        }
        
        /*
        üßπ LIMPEZA DE MEM√ìRIA:
        Libera a mem√≥ria alocada para o modelo do reservat√≥rio.
        O Qt gerencia automaticamente os widgets filhos.
        */
        delete reservatorio;
        
        /*
        üìù NOTA EDUCACIONAL:
        Em sistemas reais, o destrutor tamb√©m pode:
        ‚Ä¢ Fechar conex√µes de rede/banco de dados
        ‚Ä¢ Salvar estado atual em arquivo de recupera√ß√£o
        ‚Ä¢ Enviar sinal de shutdown para outros sistemas
        ‚Ä¢ Registrar timestamp de encerramento no log
        */
    }

private slots:
    // Slot para o loop da simula√ß√£o
    void gameLoop() {
        if (reservatorio->volume_oleo_bbl <= 0) {
            logMessage("Reservat√≥rio esgotado. Fim da vida √∫til do campo.", "critico");
            // simulationTimer->stop();
            // return;
        }

        if (isProducing) {
            // Simular 5 segundos de opera√ß√£o real a cada ciclo
            reservatorio->atualizarEstado(5.0);
        } else {
            // Mesmo sem produ√ß√£o, o tempo avan√ßa
            reservatorio->verificarEmergencia();
            reservatorio->tempo_simulacao_s += 5.0;
        }

        // Salvar dados a cada ciclo (representa coleta de dados operacionais)
        // Em um sistema real, isso seria equivalent a dados coletados a cada 5 segundos
        saveDataPoint();
        
        // Marcar sistema como inicializado ap√≥s 10 segundos (2 ciclos)
        if (!sistemaInicializado && reservatorio->tempo_simulacao_s >= 10.0) {
            sistemaInicializado = true;
            logMessage("‚úÖ Sistema totalmente inicializado - Monitoramento ativo", "sistema");
        }

        // Verificar e exibir alertas e sugest√µes
        if (reservatorio->em_emergencia) {
            tipoAlertaAtual = "SHUTDOWN";
            // Log detalhado apenas quando h√° novo motivo
            if (!reservatorio->motivo_emergencia.isEmpty()) {
                logMessage(reservatorio->motivo_emergencia, "critico");
                ultimoEventoFisica = "Shutdown: " + reservatorio->motivo_emergencia.mid(24); // Remove "üö® SHUTDOWN AUTOM√ÅTICO ATIVADO: "
                // ALERTA SONORO CR√çTICO PARA SHUTDOWN AUTOM√ÅTICO
                emitirAlertaSonoro("critico");
                reservatorio->motivo_emergencia = ""; // Limpar para n√£o repetir
            } else {
                logMessage("ALERTA CR√çTICO: Shutdown Autom√°tico!", "critico");
            }
            suggestInputWater->setPlaceholderText("Emerg√™ncia");
            suggestInputGas->setPlaceholderText("Emerg√™ncia");
            suggestInputVapor->setPlaceholderText("Emerg√™ncia");
            inputTempAgua->setPlaceholderText("Emerg√™ncia");
            inputDensidadeGas->setPlaceholderText("Emerg√™ncia");
            suggestionExplanationLabel->setText("O sistema est√° em estado de emerg√™ncia e todas as a√ß√µes foram bloqueadas por seguran√ßa. A produ√ß√£o foi interrompida.");
        } else {
            suggestInterventions();
            
            // Alertas com frequ√™ncia controlada (como sistemas reais)
            // Verifica alertas cr√≠ticos a cada 30 segundos (6 ciclos)
            if (static_cast<int>(reservatorio->tempo_simulacao_s) % 30 == 0) {
                if (reservatorio->pressao_psi < 2500) {
                    logMessage("AVISO: Press√£o do reservat√≥rio em decl√≠nio. Inje√ß√£o de √°gua ou g√°s pode ser necess√°ria.", "alerta");
                } else if (reservatorio->viscosidade_oleo_cp > 4.0) {
                    logMessage("AVISO: Viscosidade do √≥leo alta. Inje√ß√£o de vapor ou √°gua quente pode ser necess√°ria.", "alerta");
                }
            }
        }
        updateUI();
        updateIcons(); // Chamada para atualizar os √≠cones SCADA
    }

    void onActionButtonClicked() {
        QPushButton* button = qobject_cast<QPushButton*>(sender());
        if (!button) return;

        if (reservatorio->em_emergencia) {
            QMessageBox::warning(this, "Erro", "O sistema de emerg√™ncia est√° ativo. Interven√ß√µes est√£o bloqueadas.");
            return;
        }

        QString buttonName = button->objectName();
        bool ok;

        if (buttonName == "inj_agua_btn") {
            double volume = suggestInputWater->text().toDouble(&ok);
            double temp = inputTempAgua->text().toDouble(&ok);
            if (ok) {
                reservatorio->injetarAgua(volume, temp);
                ultimoEventoOperador = QString("Inj √Ågua %1bbl %2¬∞C").arg(volume, 0, 'f', 0).arg(temp, 0, 'f', 0);
                logMessage(QString("Injetando %1 bbl de √°gua a %2¬∞C.").arg(volume).arg(temp), "acao");
            } else {
                QMessageBox::warning(this, "Erro de Entrada", "Por favor, insira valores num√©ricos para a inje√ß√£o de √°gua e temperatura.");
            }
        } else if (buttonName == "inj_gas_btn") {
            double volume = suggestInputGas->text().toDouble(&ok);
            double densidade = inputDensidadeGas->text().toDouble(&ok);
            if (ok) {
                reservatorio->injetarGas(volume, densidade);
                ultimoEventoOperador = QString("Inj G√°s %1m¬≥ d%2").arg(volume, 0, 'f', 0).arg(densidade, 0, 'f', 1);
                logMessage(QString("Injetando %1 m¬≥ de g√°s com densidade de %2.").arg(volume).arg(densidade), "acao");
            } else {
                QMessageBox::warning(this, "Erro de Entrada", "Por favor, insira valores num√©ricos para a inje√ß√£o de g√°s e densidade.");
            }
        } else if (buttonName == "inj_vapor_btn") {
            double tempo = suggestInputVapor->text().toDouble(&ok);
            if (ok) {
                reservatorio->injetarVapor(tempo);
                ultimoEventoOperador = QString("Inj Vapor %1s").arg(tempo, 0, 'f', 0);
                logMessage(QString("Injetando vapor por %1 segundos.").arg(tempo), "acao");
            } else {
                QMessageBox::warning(this, "Erro de Entrada", "Por favor, insira um valor num√©rico para a inje√ß√£o de vapor.");
            }
        } else if (buttonName == "abrir_valv_btn") {
            reservatorio->ajustarPressaoPoco(-50.0);
            ultimoEventoOperador = "Abrir Choke";
            logMessage("Abrindo a v√°lvula de choke. Aumento de vaz√£o esperado.", "acao");
        } else if (buttonName == "fechar_valv_btn") {
            reservatorio->ajustarPressaoPoco(50.0);
            ultimoEventoOperador = "Fechar Choke";
            logMessage("Fechando a v√°lvula de choke. Redu√ß√£o de vaz√£o esperada.", "acao");
        } else if (buttonName == "parar_prod_btn") {
            isProducing = false;
            ultimoEventoOperador = "Parar Produ√ß√£o";
            logMessage("Produ√ß√£o interrompida para manuten√ß√£o.", "critico");
        } else if (buttonName == "iniciar_prod_btn") {
            isProducing = true;
            ultimoEventoOperador = "Iniciar Produ√ß√£o";
            logMessage("Produ√ß√£o retomada.", "acao");
        }
    }

    void onGenerateReportsClicked() {
        ReportDialog dialog(reservatorio, dataPoints, this);
        dialog.exec();
    }

    /*
    üìä ========================================================================
    M√âTODOS DE CONTROLE DE PERIODICIDADE DOS GR√ÅFICOS
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Implementa√ß√£o de controles interativos para diferentes granularidades
    temporais, permitindo an√°lise adapt√°vel √†s necessidades operacionais.
    */
    
    void onPeriodoChanged(int index) {
        // Atualizar per√≠odo baseado na sele√ß√£o
        periodoGraficoSegundos = periodoSelector->itemData(index).toInt();
        
        // Reset do controle temporal
        ultimoTempoGrafico = obterTempoMinutos();
        
        // Log educacional da mudan√ßa
        QString periodoTexto = periodoSelector->currentText();
        logMessage(QString("üìä Per√≠odo de gr√°ficos alterado para: %1").arg(periodoTexto), "info");
        
        // For√ßar atualiza√ß√£o imediata dos gr√°ficos com nova periodicidade
        atualizarGraficosSeNecessario(true);
    }
    
    void onPerfilChanged(int index) {
        // üéÆ Atualizar perfil de simula√ß√£o baseado na sele√ß√£o
        int perfil = perfilSelector->itemData(index).toInt();
        QString perfilTexto = perfilSelector->currentText();
        
        // Log educacional da mudan√ßa
        QString explicacao;
        switch(perfil) {
            case 0: // Estudante
                explicacao = "Modo b√°sico com par√¢metros simplificados para aprendizado";
                break;
            case 1: // Operador
                explicacao = "Condi√ß√µes operacionais padr√£o similares √†s industriais";
                break;
            case 2: // Especialista
                explicacao = "Cen√°rios avan√ßados com varia√ß√µes t√©cnicas complexas";
                break;
            case 3: // Engenheiro S√™nior
                explicacao = "Simula√ß√£o realista baseada em dados hist√≥ricos do ATS-7B";
                break;
            case 4: // Analista
                explicacao = "Reprodu√ß√£o de eventos hist√≥ricos reais para an√°lise";
                break;
        }
        
        logMessage(QString("üéØ Perfil alterado para: %1").arg(perfilTexto), "info");
        logMessage(QString("üìö %1").arg(explicacao), "info");
        
        // TODO: Implementar mudan√ßas nos par√¢metros de simula√ß√£o baseado no perfil
        // Por enquanto, apenas registra a mudan√ßa
    }
    
    void onClearChartsClicked() {
        // Limpar todos os gr√°ficos
        producaoSeries->clear();
        pressaoSeries->clear();
        volumeOleoSeries->clear();
        temperaturaSeries->clear();
        viscosidadeSeries->clear();
        gorSeries->clear();
        worSeries->clear();
        
        // Reset do controle temporal
        ultimoTempoGrafico = 0.0;
        
        logMessage("üóëÔ∏è Gr√°ficos limpos - Iniciando nova coleta de dados", "info");
    }

    void onDownloadCSVClicked() {
        if (dataPoints.isEmpty()) {
            QMessageBox::warning(this, "Erro", "Nenhum dado para baixar. A simula√ß√£o ainda n√£o gerou pontos.");
            return;
        }

        // Salvar na pasta raiz do projeto (um n√≠vel acima do execut√°vel)
        QString projectRoot = QCoreApplication::applicationDirPath() + "/../simulacao_petroleo.csv";
        QString fileName = QDir::cleanPath(projectRoot);
        QFile file(fileName);
        if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
            QTextStream out(&file);
            // CABE√áALHO CSV COM UUID PARA KAFKA STREAMING E RASTREAMENTO DE EVENTOS
            out << "uuid,data_hora,tempo_min,vazao_oleo_bopd,pressao_psi,viscosidade_cp,volume_oleo_bbl,temperatura_C,GOR,WOR,evento_operador,evento_fisica,alerta_tipo\n";
            /*
            üìä EXPORTA√á√ÉO DE DADOS (REFATORADO):
            Uso do m√©todo utilit√°rio formatarCampoNumerico() para
            consist√™ncia na formata√ß√£o dos valores exportados
            */
            for (const auto& point : dataPoints) {
                out << "\"" << point.uuid << "\","
                    << "\"" << point.data_hora << "\","
                    << point.tempo_min << ","
                    << formatarCampoNumerico(point.vazao_oleo) << ","
                    << formatarCampoNumerico(point.pressao) << ","
                    << formatarCampoNumerico(point.viscosidade_cp) << ","
                    << formatarCampoNumerico(point.volume_oleo) << ","
                    << formatarCampoNumerico(point.temperatura) << ","
                    << formatarCampoNumerico(point.gor) << ","
                    << formatarCampoNumerico(point.wor) << ","
                    << "\"" << point.evento_operador << "\","
                    << "\"" << point.evento_fisica << "\","
                    << "\"" << point.alerta_tipo << "\"\n";
            }
            file.close();
            QMessageBox::information(this, "Sucesso", QString("Arquivo CSV salvo em:\n%1").arg(fileName));
        } else {
            QMessageBox::critical(this, "Erro", "N√£o foi poss√≠vel abrir o arquivo para escrita.");
        }
    }

private:
    /*
    üéì ================================================================================
    ‚öôÔ∏è M√âTODOS UTILIT√ÅRIOS SCADA - REFATORA√á√ÉO DE INTERFACE  
    ================================================================================
    
    üìö CONCEITO EDUCACIONAL:
    M√©todos utilit√°rios espec√≠ficos para opera√ß√µes repetitivas da interface
    SCADA, seguindo princ√≠pios de Clean Code e DRY (Don't Repeat Yourself).
    
    üè≠ PADR√ïES INDUSTRIAIS:
    ‚Ä¢ Consist√™ncia visual em todos os elementos
    ‚Ä¢ C√≥digos de cores padronizados por criticidade  
    ‚Ä¢ Formata√ß√£o num√©rica uniforme
    ‚Ä¢ Facilidade de manuten√ß√£o e auditoria
    
    ================================================================================
    */

    /*
    üìä ========================================================================
    M√âTODO UTILIT√ÅRIO: FORMATA√á√ÉO DE CAMPOS NUM√âRICOS DA INTERFACE
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO:
    Centraliza a formata√ß√£o de n√∫meros para exibi√ß√£o na interface,
    eliminando repeti√ß√£o de QString::number() com par√¢metros id√™nticos.
    
    üéØ PADRONIZA√á√ÉO SCADA:
    ‚Ä¢ 2 casas decimais: Padr√£o para par√¢metros operacionais
    ‚Ä¢ 0 casas decimais: Volumes grandes (milh√µes de barris)
    ‚Ä¢ Consist√™ncia visual em toda a interface
    
    PAR√ÇMETROS:
    ‚Ä¢ valor: N√∫mero a ser formatado
    ‚Ä¢ precisao: Casas decimais (padr√£o: 2)
    
    RETORNA: QString formatado para interface
    */
    QString formatarCampoNumerico(double valor, int precisao = 2) const {
        return QString::number(valor, 'f', precisao);
    }

    /*
    ‚è±Ô∏è ========================================================================
    M√âTODO UTILIT√ÅRIO: CONVERS√ÉO TEMPO PARA INTERFACE
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO:
    Centraliza convers√£o segundos‚Üíminutos usada nos gr√°ficos e logs,
    eliminando duplica√ß√£o da opera√ß√£o tempo_simulacao_s / 60.0.
    
    üè≠ APLICA√á√ÉO SCADA:
    ‚Ä¢ Eixos temporais dos gr√°ficos
    ‚Ä¢ Logs de eventos
    ‚Ä¢ Relat√≥rios operacionais
    
    RETORNA: Tempo atual em minutos para interface
    */
    double obterTempoMinutos() const {
        return reservatorio->segundosParaMinutos(reservatorio->tempo_simulacao_s);
    }

    /*
    üé® ========================================================================
    M√âTODO UTILIT√ÅRIO: DETERMINA√á√ÉO DE CORES DE STATUS
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO:
    Centraliza l√≥gica de cores baseadas em limites operacionais,
    eliminando repeti√ß√£o de condicionais tern√°rios complexos.
    
    üö¶ C√ìDIGO DE CORES INDUSTRIAL:
    ‚Ä¢ Verde: Opera√ß√£o normal
    ‚Ä¢ Amarelo/Laranja: Aten√ß√£o/Alerta  
    ‚Ä¢ Vermelho: Cr√≠tico/Emerg√™ncia
    
    PAR√ÇMETROS:
    ‚Ä¢ valor: Valor atual do par√¢metro
    ‚Ä¢ limite_alerta: Threshold de aten√ß√£o
    ‚Ä¢ limite_critico: Threshold cr√≠tico
    ‚Ä¢ invertido: true se valores baixos s√£o cr√≠ticos
    
    RETORNA: String com nome da cor
    */
    QString determinarCorStatus(double valor, double limite_alerta, double limite_critico, bool invertido = false) const {
        if (invertido) {
            // Para par√¢metros onde valores BAIXOS s√£o cr√≠ticos (ex: press√£o, vaz√£o)
            if (valor < limite_critico) return "red";
            if (valor < limite_alerta) return "orange"; 
            return "green";
        } else {
            // Para par√¢metros onde valores ALTOS s√£o cr√≠ticos (ex: temperatura, GOR)
            if (valor > limite_critico) return "red";
            if (valor > limite_alerta) return "orange";
            return "green";
        }
    }

    /*
    üìà ========================================================================
    VARI√ÅVEIS DE CONTROLE DE GR√ÅFICOS INTERATIVOS
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Sistema de periodicidade para dashboards SCADA industriais, permitindo
    diferentes n√≠veis de granularidade temporal para an√°lise operacional.
    
    üè≠ APLICA√á√ÉO INDUSTRIAL:
    ‚Ä¢ Monitoramento em tempo real (1-5min) para opera√ß√£o
    ‚Ä¢ An√°lise de tend√™ncias m√©dias (30-60min) para otimiza√ß√£o  
    ‚Ä¢ Vis√£o estrat√©gica (1 dia) para planejamento
    */
    
    // Vari√°veis de estado original
    Reservatorio* reservatorio;
    bool isProducing = true;
    QTimer* simulationTimer;
    QVector<DadosPontos> dataPoints;

    // Sistema de controle de periodicidade dos gr√°ficos
    int periodoGraficoSegundos = 60;        // Per√≠odo atual em segundos (padr√£o: 1 minuto)
    double ultimoTempoGrafico = 0.0;        // √öltimo tempo que atualizou gr√°ficos  
    QComboBox* periodoSelector;             // Seletor de per√≠odo na interface
    QComboBox* perfilSelector;              // üéÆ Seletor de perfil de simula√ß√£o

    // üéì Sistema Educacional de Diagn√≥stico Inteligente
    QWidget* diagnosticoWidget;             // Widget principal do sistema educacional
    QLabel* diagnosticoTituloLabel;         // T√≠tulo do diagn√≥stico atual
    QString diagnosticoAtual;               // Tipo de diagn√≥stico ativo

    // RASTREAMENTO DE EVENTOS PARA AN√ÅLISE DE DADOS
    QString ultimoEventoOperador;           // √öltima a√ß√£o do operador registrada
    QString ultimoEventoFisica;             // √öltimo evento f√≠sico detectado
    QString tipoAlertaAtual;                // Tipo de alerta atual do sistema
    bool sistemaInicializado;               // Flag para evitar alertas durante inicializa√ß√£o

    // Elementos da interface
    QVector<QLabel*> indicatorLabels;
    QTextEdit* logTextEdit;
    QLineEdit* suggestInputWater;
    QLineEdit* inputTempAgua;
    QLineEdit* suggestInputGas;
    QLineEdit* inputDensidadeGas;
    QLineEdit* suggestInputVapor;
    QLabel* suggestionExplanationLabel;

    // Gr√°ficos
    QLineSeries *producaoSeries;
    QLineSeries *minProducaoSeries;
    QLineSeries *pressaoSeries;
    QLineSeries *volumeOleoSeries;
    QLineSeries *temperaturaSeries;
    QLineSeries *viscosidadeSeries;
    QLineSeries *gorSeries;
    QLineSeries *worSeries;

    // Novos elementos para os √≠cones SCADA
    QLabel* pressaoIconLabel;
    QLabel* temperaturaIconLabel;
    QLabel* vazaoIconLabel;
    QLabel* gorIconLabel;
    QLabel* statusIconLabel;

    // Estiliza√ß√£o dos √≠cones SVG
    const QString svgTemplate = "<svg xmlns='http://www.w3.org/2000/svg' width='48' height='48' viewBox='0 0 24 24'><path fill='%1' d='%2'/></svg>";
    const QString iconPressaoPath = "M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2zm0 18a8 8 0 1 1 8-8 8 8 0 0 1-8 8zM12 4a1.5 1.5 0 0 1 1.5 1.5V12a1.5 1.5 0 0 1-3 0V5.5A1.5 1.5 0 0 1 12 4zM12 12a1 1 0 1 1 1-1 1 1 0 0 1-1 1z'/>";
    const QString iconTemperaturaPath = "M12 3a3 3 0 0 0-3 3v5a5 5 0 0 0 5 5h1a5 5 0 0 0 5-5V6a3 3 0 0 0-3-3zm0 2h3a1 1 0 0 1 1 1v5a3 3 0 0 1-3 3h-1a3 3 0 0 1-3-3V6a1 1 0 0 1 1-1zM10 17v5h4v-5z'/>";
    const QString iconVazaoPath = "M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2zm0 18a8 8 0 1 1 8-8 8 8 0 0 1-8 8zm0-12a4 4 0 1 0 4 4 4 4 0 0 0-4-4z'/>";
    const QString iconGorPath = "M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2zm0 18a8 8 0 1 1 8-8 8 8 0 0 1-8 8zM12 6a1 1 0 0 1 1 1v5a1 1 0 0 1-2 0V7a1 1 0 0 1 1-1zM12 14a1 1 0 1 1 1-1 1 1 0 0 1-1 1z'/>";
    const QString iconStatusPath = "M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2z'/>";

    QIcon createIcon(const QString& color, const QString& path) {
        QString svg = svgTemplate.arg(color, path);
        QByteArray data(svg.toUtf8());
        QBuffer buffer(&data);
        QIcon icon;
        QSize size(48, 48);
        icon.addPixmap(QPixmap::fromImage(QImage::fromData(data, "SVG")), QIcon::Normal, QIcon::On);
        return icon;
    }

    void setupUI() {
        setWindowTitle("Simulador ATS-7B - Po√ßo Atl√¢ntida Oriental (Bacia de Atl√¢ntida)");
        setMinimumSize(1400, 900);

        // Widget principal com scroll
        QScrollArea* scrollArea = new QScrollArea(this);
        QWidget* centralWidget = new QWidget();
        scrollArea->setWidget(centralWidget);
        scrollArea->setWidgetResizable(true);
        setCentralWidget(scrollArea);
        
        // Tema visual melhorado com fundo preto
        setStyleSheet(
            "QMainWindow { background-color: #000000; }"
            "QScrollArea { background-color: #000000; border: none; }"
            "QWidget { background-color: #000000; color: #FFFFFF; }"
            "QGroupBox { "
                "background-color: #1a1a1a; "
                "border: 2px solid #333333; "
                "border-radius: 8px; "
                "margin-top: 8px; "
                "padding-top: 10px; "
                "font-weight: bold; "
            "}"
            "QGroupBox::title { "
                "subcontrol-origin: margin; "
                "subcontrol-position: top center; "
                "padding: 0 8px; "
                "color: #00AAFF; "
            "}"
            "QPushButton { "
                "background-color: #2d2d2d; "
                "border: 2px solid #555555; "
                "border-radius: 6px; "
                "padding: 8px; "
                "font-weight: bold; "
                "min-height: 25px; "
            "}"
            "QPushButton:hover { background-color: #404040; border-color: #777777; }"
            "QPushButton:pressed { background-color: #1a1a1a; }"
            "QLineEdit { "
                "background-color: #2d2d2d; "
                "border: 2px solid #555555; "
                "border-radius: 4px; "
                "padding: 5px; "
                "selection-background-color: #0078d4; "
            "}"
            "QLabel { color: #FFFFFF; }"
            "QTextEdit { "
                "background-color: #1a1a1a; "
                "border: 2px solid #333333; "
                "border-radius: 6px; "
                "color: #CCCCCC; "
            "}"
        );
        
        QVBoxLayout* mainLayout = new QVBoxLayout(centralWidget);
        mainLayout->setSpacing(15);
        mainLayout->setContentsMargins(20, 20, 20, 20);

        // Se√ß√£o de √çcones SCADA em GroupBox
        QGroupBox* scadaGroupBox = new QGroupBox("Monitor SCADA - Status em Tempo Real");
        QHBoxLayout* scadaMainLayout = new QHBoxLayout(scadaGroupBox);
        scadaMainLayout->setSpacing(20);
        
        // Container do Logo - alinhado √† esquerda
        QWidget* logoContainer = new QWidget();
        logoContainer->setFixedSize(350, 80);
        QHBoxLayout* logoLayout = new QHBoxLayout(logoContainer);
        logoLayout->setContentsMargins(10, 5, 10, 5);
        logoLayout->setSpacing(15);
        
        // Logo/√çcone 
        QLabel* logoIcon = new QLabel("üõ¢Ô∏è");
        logoIcon->setAlignment(Qt::AlignCenter);
        logoIcon->setFixedSize(60, 60);
        logoIcon->setStyleSheet(
            "QLabel { "
                "font-size: 36px; "
                "background-color: #1a1a1a; "
                "border: 2px solid #ff6b35; "
                "border-radius: 30px; "
                "padding: 5px; "
            "}"
        );
        
        // Texto "Aggressive Oil Club"
        QLabel* clubText = new QLabel("AGGRESSIVE OIL CLUB");
        clubText->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
        clubText->setStyleSheet(
            "QLabel { "
                "color: #ff6b35; "
                "font-size: 16px; "
                "font-weight: bold; "
                "font-family: 'Arial Black', Arial, sans-serif; "
                "letter-spacing: 2px; "
                "background-color: transparent; "
            "}"
        );
        
        logoLayout->addWidget(logoIcon);
        logoLayout->addWidget(clubText);
        logoLayout->addStretch();
        
        // Estilo do container
        logoContainer->setStyleSheet(
            "QWidget { "
                "background-color: #2a2a2a; "
                "border: 1px solid #444444; "
                "border-radius: 8px; "
            "}"
        );
        
        scadaMainLayout->addWidget(logoContainer);
        
        // Layout para os √≠cones SCADA centralizados
        QHBoxLayout* scadaIconsLayout = new QHBoxLayout();
        scadaIconsLayout->setAlignment(Qt::AlignCenter);
        scadaIconsLayout->setSpacing(30);

        // Cria√ß√£o dos √≠cones SCADA com estilo melhorado (formato original)
        auto createScadaIcon = [this, scadaIconsLayout](const QString& name, const QString& tooltip) -> QLabel* {
            QVBoxLayout* iconLayout = new QVBoxLayout();
            QLabel* iconLabel = new QLabel();
            iconLabel->setFixedSize(60, 60);
            iconLabel->setAlignment(Qt::AlignCenter);
            iconLabel->setToolTip(tooltip);
            
            QLabel* textLabel = new QLabel(name);
            textLabel->setAlignment(Qt::AlignCenter);
            textLabel->setStyleSheet("color: #FFFFFF; font-weight: bold; font-size: 12px; margin-top: 5px;");
            
            QWidget* container = new QWidget();
            QVBoxLayout* containerLayout = new QVBoxLayout(container);
            containerLayout->addWidget(iconLabel);
            containerLayout->addWidget(textLabel);
            containerLayout->setSpacing(5);
            containerLayout->setContentsMargins(10, 5, 10, 5);
            
            scadaIconsLayout->addWidget(container);
            return iconLabel;
        };

        pressaoIconLabel = createScadaIcon("Press√£o", "Status da Press√£o do Reservat√≥rio");
        temperaturaIconLabel = createScadaIcon("Temperatura", "Status da Temperatura do Reservat√≥rio");  
        vazaoIconLabel = createScadaIcon("Vaz√£o", "Status da Vaz√£o de Produ√ß√£o de √ìleo");
        gorIconLabel = createScadaIcon("GOR", "Status do G√°s-√ìleo Ratio");
        statusIconLabel = createScadaIcon("Sistema", "Status Geral do Sistema");

        scadaMainLayout->addLayout(scadaIconsLayout);
        mainLayout->addWidget(scadaGroupBox);

        // Se√ß√£o de Indicadores Principais em Grid
        QGroupBox* indicatorsGroupBox = new QGroupBox("Indicadores Operacionais");
        QGridLayout* indicatorsLayout = new QGridLayout(indicatorsGroupBox);
        indicatorsLayout->setSpacing(15);
        
        QStringList titles = {"Produ√ß√£o de Petr√≥leo", "Press√£o do Reservat√≥rio", "Volume de √ìleo", "Temperatura", "Viscosidade", "GOR", "WOR"};
        QStringList units = {"bopd", "psi", "bbl", "¬∞C", "cp", "ratio", "ratio"};
        
        for (int i = 0; i < titles.size(); ++i) {
            // Container para cada indicador
            QFrame* indicatorFrame = new QFrame();
            indicatorFrame->setFrameStyle(QFrame::Box | QFrame::Raised);
            indicatorFrame->setLineWidth(1);
            indicatorFrame->setStyleSheet(
                "QFrame { "
                    "background-color: #2a2a2a; "
                    "border: 2px solid #444444; "
                    "border-radius: 8px; "
                    "padding: 10px; "
                "}"
            );
            
            QVBoxLayout* boxLayout = new QVBoxLayout(indicatorFrame);
            boxLayout->setSpacing(5);
            
            QLabel* titleLabel = new QLabel(titles[i], this);
            titleLabel->setAlignment(Qt::AlignCenter);
            titleLabel->setStyleSheet("font-weight: bold; font-size: 12px; color: #CCCCCC; margin-bottom: 5px;");
            titleLabel->setWordWrap(true);
            
            QLabel* valueLabel = new QLabel("0", this);
            valueLabel->setAlignment(Qt::AlignCenter);
            valueLabel->setStyleSheet("font-size: 20px; font-weight: bold; color: #00FF00; min-height: 30px;");
            indicatorLabels.append(valueLabel);
            
            /*
            üìè ====================================================================
            AJUSTE DE LAYOUT: UNIDADES DE MEDIDA COM FONTE AUMENTADA
            ====================================================================
            
            üìö MELHORIA DE USABILIDADE:
            Aumento da fonte das unidades de medida de 10px para 13px para
            melhor legibilidade dos indicadores operacionais.
            
            üè≠ BENEF√çCIO INDUSTRIAL:
            ‚Ä¢ Identifica√ß√£o mais r√°pida das unidades pelos operadores
            ‚Ä¢ Redu√ß√£o de erros de interpreta√ß√£o de grandezas
            ‚Ä¢ Padr√£o mais adequado para dashboards industriais
            ‚Ä¢ Melhor experi√™ncia visual em monitores grandes (SCADA)
            */
            QLabel* unitLabel = new QLabel(units[i], this);
            unitLabel->setAlignment(Qt::AlignCenter);
            unitLabel->setStyleSheet(
                "font-size: 13px; "      // AUMENTADO: 10px ‚Üí 13px (+30% legibilidade)
                "color: #888888; "       // Cor mantida (contraste adequado)
                "margin-top: 2px; "      // Espa√ßamento mantido
                "font-weight: 500;"      // NOVO: Peso ligeiramente aumentado para destaque
            );
            
            boxLayout->addWidget(titleLabel);
            boxLayout->addWidget(valueLabel);
            boxLayout->addWidget(unitLabel);
            
            // Posicionamento em grid (2 linhas)
            int row = i < 4 ? 0 : 1;
            int col = i < 4 ? i : i - 4;
            indicatorsLayout->addWidget(indicatorFrame, row, col);
        }
        
        mainLayout->addWidget(indicatorsGroupBox);

        // Se√ß√£o de Monitoramento e Gr√°ficos
        QHBoxLayout* monitoringLayout = new QHBoxLayout();
        
        /*
        üìà ====================================================================
        CONTROLE DE PERIODICIDADE DE GR√ÅFICOS - DASHBOARD INTERATIVO
        ====================================================================
        
        üìö CONCEITO EDUCACIONAL:
        Implementa√ß√£o de controle de granularidade temporal para an√°lise
        de dados operacionais, similar aos sistemas SCADA industriais.
        
        üè≠ BENEF√çCIO INDUSTRIAL:
        ‚Ä¢ Flexibilidade de an√°lise conforme necessidade operacional
        ‚Ä¢ Redu√ß√£o de ru√≠do visual em an√°lises de longo prazo  
        ‚Ä¢ Otimiza√ß√£o de performance para grandes volumes de dados
        ‚Ä¢ Adequa√ß√£o a diferentes perfis de usu√°rio (operador vs gestor)
        */
        
        // Container vertical para controles de gr√°fico + gr√°ficos
        QVBoxLayout* chartsContainerLayout = new QVBoxLayout();
        QWidget* chartsContainer = new QWidget();
        chartsContainer->setLayout(chartsContainerLayout);
        
        // Controle de periodicidade dos gr√°ficos
        QHBoxLayout* periodControlLayout = new QHBoxLayout();
        
        QLabel* periodLabel = new QLabel("üìä Per√≠odo de Atualiza√ß√£o dos Gr√°ficos:");
        periodLabel->setStyleSheet("font-weight: bold; color: #00AAFF; font-size: 12px; margin-right: 10px;");
        
        periodoSelector = new QComboBox();
        periodoSelector->addItem("‚ö° 1 Minuto (Tempo Real)", 60);
        periodoSelector->addItem("üîÑ 5 Minutos (Operacional)", 300); 
        periodoSelector->addItem("üìà 10 Minutos (Supervis√£o)", 600);
        periodoSelector->addItem("üìä 30 Minutos (Tend√™ncia)", 1800);
        periodoSelector->addItem("üïê 1 Hora (An√°lise)", 3600);
        periodoSelector->addItem("üìÖ 1 Dia (Estrat√©gico)", 86400);
        
        periodoSelector->setCurrentIndex(0); // Padr√£o: 1 minuto
        periodoSelector->setStyleSheet(
            "QComboBox { "
                "background-color: #2d2d2d; "
                "border: 2px solid #555555; "
                "border-radius: 4px; "
                "padding: 6px; "
                "font-weight: bold; "
                "min-width: 200px; "
                "color: #FFFFFF; "
            "}"
            "QComboBox:hover { border-color: #777777; }"
            "QComboBox::drop-down { "
                "border: none; "
            "}"
            "QComboBox QAbstractItemView { "
                "background-color: #2d2d2d; "
                "border: 1px solid #555555; "
                "color: #FFFFFF; "
                "selection-background-color: #0078d4; "
            "}"
        );
        
        // üéÆ SELETOR DE PERFIL DE SIMULA√á√ÉO
        QLabel* perfilLabel = new QLabel("üéØ Perfil de Simula√ß√£o:");
        perfilLabel->setStyleSheet("font-weight: bold; color: #FF6B35; font-size: 12px; margin-left: 30px; margin-right: 10px;");
        
        perfilSelector = new QComboBox();
        perfilSelector->addItem("üéì Estudante (B√°sico)", 0);
        perfilSelector->addItem("üë®‚Äçüíº Operador (Padr√£o)", 1);
        perfilSelector->addItem("‚ö° Especialista (Avan√ßado)", 2);
        perfilSelector->addItem("üè≠ Engenheiro S√™nior (Realista)", 3);
        perfilSelector->addItem("üìä Analista (Dados Hist√≥ricos)", 4);
        
        perfilSelector->setCurrentIndex(1); // Padr√£o: Operador
        perfilSelector->setStyleSheet(
            "QComboBox { "
                "background-color: #2d2d2d; "
                "border: 1px solid #555555; "
                "border-radius: 4px; "
                "padding: 4px 8px; "
                "min-width: 200px; "
                "color: #FFFFFF; "
            "}"
            "QComboBox:hover { border-color: #FF6B35; }"
            "QComboBox::drop-down { "
                "border: none; "
            "}"
            "QComboBox QAbstractItemView { "
                "background-color: #2d2d2d; "
                "border: 1px solid #555555; "
                "color: #FFFFFF; "
                "selection-background-color: #FF6B35; "
            "}"
        );
        
        // Bot√£o para limpar gr√°ficos
        QPushButton* clearChartsBtn = new QPushButton("üóëÔ∏è Limpar Gr√°ficos");
        clearChartsBtn->setStyleSheet(
            "QPushButton { "
                "background-color: #DC3545; "
                "border: none; "
                "color: white; "
                "font-weight: bold; "
                "padding: 6px 12px; "
                "border-radius: 4px; "
            "}"
            "QPushButton:hover { background-color: #C82333; }"
        );
        
        periodControlLayout->addWidget(periodLabel);
        periodControlLayout->addWidget(periodoSelector);
        periodControlLayout->addWidget(perfilLabel);
        periodControlLayout->addWidget(perfilSelector);
        periodControlLayout->addWidget(clearChartsBtn);
        periodControlLayout->addStretch(); // Espa√ßo flex√≠vel
        
        chartsContainerLayout->addLayout(periodControlLayout);
        
        // Gr√°ficos organizados em abas
        QTabWidget* chartsTabWidget = new QTabWidget();
        chartsTabWidget->setStyleSheet(
            "QTabWidget::pane { border: 2px solid #333333; background-color: #1a1a1a; }"
            "QTabBar::tab { "
                "background-color: #2d2d2d; "
                "border: 2px solid #555555; "
                "padding: 8px 16px; "
                "margin-right: 2px; "
                "border-top-left-radius: 6px; "
                "border-top-right-radius: 6px; "
            "}"
            "QTabBar::tab:selected { "
                "background-color: #404040; "
                "border-bottom-color: #1a1a1a; "
            "}"
            "QTabBar::tab:hover { background-color: #383838; }"
        );

        // Inicializar s√©ries
        producaoSeries = new QLineSeries();
        producaoSeries->setName("Vaz√£o de √ìleo (bopd)");
        minProducaoSeries = new QLineSeries();
        minProducaoSeries->setColor(Qt::red);
        minProducaoSeries->setName("M√≠nimo Aceit√°vel");

        pressaoSeries = new QLineSeries();
        pressaoSeries->setName("Press√£o do Reservat√≥rio (psi)");

        volumeOleoSeries = new QLineSeries();
        volumeOleoSeries->setName("Volume de √ìleo (bbl)");

        temperaturaSeries = new QLineSeries();
        temperaturaSeries->setName("Temperatura (¬∞C)");

        viscosidadeSeries = new QLineSeries();
        viscosidadeSeries->setName("Viscosidade (cp)");

        gorSeries = new QLineSeries();
        gorSeries->setName("GOR");

        worSeries = new QLineSeries();
        worSeries->setName("WOR");

        // Adicionar gr√°ficos √†s abas
        chartsTabWidget->addTab(createChart("Produ√ß√£o de √ìleo", producaoSeries), "Produ√ß√£o");
        chartsTabWidget->addTab(createChart("Press√£o do Reservat√≥rio", pressaoSeries), "Press√£o");
        chartsTabWidget->addTab(createChart("Volume de √ìleo", volumeOleoSeries), "Volume");
        chartsTabWidget->addTab(createChart("Temperatura", temperaturaSeries), "Temperatura");
        chartsTabWidget->addTab(createChart("Viscosidade", viscosidadeSeries), "Viscosidade");
        
        // Aba combinada para ratios
        QWidget* ratiosWidget = new QWidget();
        QVBoxLayout* ratiosLayout = new QVBoxLayout(ratiosWidget);
        ratiosLayout->addWidget(createChart("GOR (Gas-Oil Ratio)", gorSeries));
        ratiosLayout->addWidget(createChart("WOR (Water-Oil Ratio)", worSeries));
        chartsTabWidget->addTab(ratiosWidget, "Ratios");

        chartsContainerLayout->addWidget(chartsTabWidget);

        monitoringLayout->addWidget(chartsContainer, 3);

        // Log de eventos com t√≠tulo
        QGroupBox* logGroupBox = new QGroupBox("Log de Eventos do Sistema");
        QVBoxLayout* logLayout = new QVBoxLayout(logGroupBox);
        
        logTextEdit = new QTextEdit();
        logTextEdit->setReadOnly(true);
        logTextEdit->setMinimumHeight(300);
        /*
        üìù ========================================================================
        AJUSTE DE LAYOUT: FONTE DO LOG DE EVENTOS AUMENTADA
        ========================================================================
        
        üìö MELHORIA DE USABILIDADE:
        Aumento da fonte de 11px para 14px para melhor legibilidade do log
        de eventos, facilitando o monitoramento operacional em tempo real.
        
        üè≠ BENEF√çCIO INDUSTRIAL:
        ‚Ä¢ Melhor visibilidade para operadores em salas de controle
        ‚Ä¢ Redu√ß√£o da fadiga visual em turnos longos (12h)
        ‚Ä¢ Facilita identifica√ß√£o r√°pida de eventos cr√≠ticos
        ‚Ä¢ Padr√£o mais adequado para monitores industriais
        */
        logTextEdit->setStyleSheet(
            "QTextEdit { "
                "background-color: #0a0a0a; "
                "border: 1px solid #333333; "
                "color: #CCCCCC; "
                "font-family: 'Courier New', monospace; "
                "font-size: 14px; "  // AUMENTADO: 11px ‚Üí 14px (+27% legibilidade)
            "}"
        );
        logLayout->addWidget(logTextEdit);
        
        monitoringLayout->addWidget(logGroupBox, 1);
        
        mainLayout->addLayout(monitoringLayout);

        // Se√ß√£o de Controles Operacionais
        QHBoxLayout* controlsLayout = new QHBoxLayout();
        
        // Controles de Interven√ß√£o em grid
        QGroupBox* interventionGroupBox = new QGroupBox("Controles de Interven√ß√£o");
        QGridLayout* interventionGrid = new QGridLayout(interventionGroupBox);
        interventionGrid->setSpacing(10);

        // Helper function para criar controle de interven√ß√£o
        auto createInterventionControl = [this](const QString& title, const QString& param1Label, 
                                              const QString& param1Default, const QString& param2Label = "",
                                              const QString& param2Default = "") -> QWidget* {
            QFrame* frame = new QFrame();
            frame->setFrameStyle(QFrame::StyledPanel);
            frame->setStyleSheet(
                "QFrame { "
                    "background-color: #252525; "
                    "border: 1px solid #444444; "
                    "border-radius: 6px; "
                    "padding: 8px; "
                "}"
            );
            
            QVBoxLayout* frameLayout = new QVBoxLayout(frame);
            frameLayout->setSpacing(8);
            
            // T√≠tulo
            QLabel* titleLabel = new QLabel(title);
            titleLabel->setStyleSheet("font-weight: bold; color: #00AAFF; font-size: 12px;");
            titleLabel->setAlignment(Qt::AlignCenter);
            frameLayout->addWidget(titleLabel);
            
            // Par√¢metros
            QGridLayout* paramsLayout = new QGridLayout();
            paramsLayout->setSpacing(5);
            
            QLabel* label1 = new QLabel(param1Label);
            label1->setStyleSheet("font-size: 10px; color: #CCCCCC;");
            QLineEdit* input1 = new QLineEdit(param1Default);
            input1->setValidator(new QDoubleValidator(this));
            input1->setFixedWidth(80);
            
            paramsLayout->addWidget(label1, 0, 0);
            paramsLayout->addWidget(input1, 0, 1);
            
            QLineEdit* input2 = nullptr;
            if (!param2Label.isEmpty()) {
                QLabel* label2 = new QLabel(param2Label);
                label2->setStyleSheet("font-size: 10px; color: #CCCCCC;");
                input2 = new QLineEdit(param2Default);
                input2->setValidator(new QDoubleValidator(this));
                input2->setFixedWidth(80);
                
                paramsLayout->addWidget(label2, 1, 0);
                paramsLayout->addWidget(input2, 1, 1);
            }
            
            frameLayout->addLayout(paramsLayout);
            
            // Bot√£o de a√ß√£o
            QPushButton* actionBtn = new QPushButton("Executar");
            actionBtn->setStyleSheet(
                "QPushButton { "
                    "background-color: #0078D4; "
                    "border: none; "
                    "color: white; "
                    "font-weight: bold; "
                    "padding: 6px; "
                    "border-radius: 4px; "
                "}"
                "QPushButton:hover { background-color: #106EBE; }"
                "QPushButton:pressed { background-color: #005A9E; }"
            );
            
            frameLayout->addWidget(actionBtn);
            
            // Armazenar refer√™ncias dos inputs
            frame->setProperty("input1", QVariant::fromValue((QObject*)input1));
            if (input2) frame->setProperty("input2", QVariant::fromValue((QObject*)input2));
            frame->setProperty("button", QVariant::fromValue((QObject*)actionBtn));
            
            return frame;
        };
        
        // Criar controles de interven√ß√£o
        QWidget* waterControl = createInterventionControl("Inje√ß√£o de √Ågua", "Volume (bbl)", "1000", "Temp (¬∞C)", "100");
        QWidget* gasControl = createInterventionControl("Inje√ß√£o de G√°s", "Volume (m¬≥)", "5000", "Densidade", "0.7");
        QWidget* vaporControl = createInterventionControl("Inje√ß√£o de Vapor", "Tempo (s)", "500");
        
        
        // Posicionar controles em grid 2x2
        interventionGrid->addWidget(waterControl, 0, 0);
        interventionGrid->addWidget(gasControl, 0, 1);
        interventionGrid->addWidget(vaporControl, 1, 0);
        
        // Recuperar refer√™ncias dos inputs
        suggestInputWater = qobject_cast<QLineEdit*>(waterControl->property("input1").value<QObject*>());
        inputTempAgua = qobject_cast<QLineEdit*>(waterControl->property("input2").value<QObject*>());
        QPushButton* waterBtn = qobject_cast<QPushButton*>(waterControl->property("button").value<QObject*>());
        waterBtn->setObjectName("inj_agua_btn");
        
        suggestInputGas = qobject_cast<QLineEdit*>(gasControl->property("input1").value<QObject*>());
        inputDensidadeGas = qobject_cast<QLineEdit*>(gasControl->property("input2").value<QObject*>());
        QPushButton* gasBtn = qobject_cast<QPushButton*>(gasControl->property("button").value<QObject*>());
        gasBtn->setObjectName("inj_gas_btn");
        
        suggestInputVapor = qobject_cast<QLineEdit*>(vaporControl->property("input1").value<QObject*>());
        QPushButton* vaporBtn = qobject_cast<QPushButton*>(vaporControl->property("button").value<QObject*>());
        vaporBtn->setObjectName("inj_vapor_btn");
        

        controlsLayout->addWidget(interventionGroupBox, 2);
        
        // Coluna direita com controles de produ√ß√£o e sistema
        QVBoxLayout* rightControlsLayout = new QVBoxLayout();
        
        // Controles de Produ√ß√£o
        QGroupBox* productionGroupBox = new QGroupBox("Controles de Produ√ß√£o");
        QVBoxLayout* productionLayout = new QVBoxLayout(productionGroupBox);
        
        // Bot√µes de produ√ß√£o com estilo
        auto createProductionButton = [](const QString& text, const QString& objName, const QString& color) -> QPushButton* {
            QPushButton* btn = new QPushButton(text);
            btn->setObjectName(objName);
            btn->setMinimumHeight(40);
            btn->setStyleSheet(QString(
                "QPushButton { "
                    "background-color: %1; "
                    "border: none; "
                    "color: white; "
                    "font-weight: bold; "
                    "border-radius: 6px; "
                    "font-size: 12px; "
                "}"
                "QPushButton:hover { background-color: %2; }"
                "QPushButton:pressed { background-color: %3; }"
            ).arg(color).arg(color + "CC").arg(color + "AA"));
            return btn;
        };
        
        QPushButton* startBtn = createProductionButton("‚ñ∂ Iniciar Produ√ß√£o", "iniciar_prod_btn", "#28A745");
        QPushButton* stopBtn = createProductionButton("‚è∏ Parar Produ√ß√£o", "parar_prod_btn", "#DC3545");
        QPushButton* openValveBtn = createProductionButton("‚¨Ü Abrir V√°lvula", "abrir_valv_btn", "#17A2B8");
        QPushButton* closeValveBtn = createProductionButton("‚¨á Fechar V√°lvula", "fechar_valv_btn", "#FD7E14");
        
        productionLayout->addWidget(startBtn);
        productionLayout->addWidget(stopBtn);
        productionLayout->addWidget(openValveBtn);
        productionLayout->addWidget(closeValveBtn);
        
        rightControlsLayout->addWidget(productionGroupBox);
        
        // Sugest√µes do Sistema
        QGroupBox* suggestionGroupBox = new QGroupBox("Sugest√µes Inteligentes");
        QVBoxLayout* suggestionLayout = new QVBoxLayout(suggestionGroupBox);
        
suggestionExplanationLabel = new QLabel("üéì SISTEMA DE ENSINO INTELIGENTE:\n\nü§ñ Este painel fornece sugest√µes educacionais baseadas nas condi√ß√µes operacionais.\n\nüí° Explore diferentes interven√ß√µes e observe como cada a√ß√£o afeta os par√¢metros do reservat√≥rio!\n\nüìà Acompanhe os gr√°ficos para entender as rela√ß√µes causa-efeito.");
        suggestionExplanationLabel->setStyleSheet(
            "color: #CCCCCC; "
            "font-style: italic; "
            "padding: 10px; "
            "background-color: #1a1a1a; "
            "border: 1px solid #333333; "
            "border-radius: 4px; "
            "font-size: 11px; "
        );
        suggestionExplanationLabel->setWordWrap(true);
        suggestionExplanationLabel->setMinimumHeight(80);
        
        suggestionLayout->addWidget(suggestionExplanationLabel);
        rightControlsLayout->addWidget(suggestionGroupBox);
        
        // Bot√µes de Sistema
        QGroupBox* systemGroupBox = new QGroupBox("Sistema e Relat√≥rios");
        QVBoxLayout* systemLayout = new QVBoxLayout(systemGroupBox);
        
        QPushButton* reportBtn = createProductionButton("üìä Gerar Relat√≥rios", "report_btn", "#6F42C1");
        QPushButton* downloadBtn = createProductionButton("üíæ Exportar CSV", "download_csv_btn", "#20C997");
        
        systemLayout->addWidget(reportBtn);
        systemLayout->addWidget(downloadBtn);
        
        rightControlsLayout->addWidget(systemGroupBox);
        rightControlsLayout->addStretch(); // Espa√ßo flex√≠vel no final
        
        controlsLayout->addLayout(rightControlsLayout, 1);
        mainLayout->addLayout(controlsLayout);

        // üéì Sistema Educacional de Diagn√≥stico
        QWidget* sistemaEducacional = criarSistemaEducacional();
        mainLayout->addWidget(sistemaEducacional);

        // Conecta os bot√µes aos slots
        connect(waterBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(gasBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(vaporBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(startBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(stopBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(openValveBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(closeValveBtn, &QPushButton::clicked, this, &SimuladorWindow::onActionButtonClicked);
        connect(reportBtn, &QPushButton::clicked, this, &SimuladorWindow::onGenerateReportsClicked);
        connect(downloadBtn, &QPushButton::clicked, this, &SimuladorWindow::onDownloadCSVClicked);
        
        // Conectar controles de periodicidade dos gr√°ficos
        connect(periodoSelector, QOverload<int>::of(&QComboBox::currentIndexChanged), 
                this, &SimuladorWindow::onPeriodoChanged);
        connect(perfilSelector, QOverload<int>::of(&QComboBox::currentIndexChanged), 
                this, &SimuladorWindow::onPerfilChanged);
        connect(clearChartsBtn, &QPushButton::clicked, this, &SimuladorWindow::onClearChartsClicked);
    }

    /*
    üìà ========================================================================
    M√âTODO DE CRIA√á√ÉO DE GR√ÅFICOS - SISTEMA DE VISUALIZA√á√ÉO INDUSTRIAL
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Este m√©todo cria gr√°ficos de linha profissionais similares aos usados
    em sistemas SCADA da ind√∫stria petrol√≠fera. Cada gr√°fico mostra a
    evolu√ß√£o temporal de um par√¢metro operacional.
    
    üè≠ APLICA√á√ÉO INDUSTRIAL:
    ‚Ä¢ Trending em tempo real (similar ao PI System da OSIsoft)
    ‚Ä¢ Detec√ß√£o visual de anomalias operacionais
    ‚Ä¢ An√°lise de correla√ß√£o entre vari√°veis
    ‚Ä¢ Base para otimiza√ß√£o de processos
    
    PAR√ÇMETROS:
    ‚Ä¢ title: T√≠tulo do gr√°fico (ex: "Press√£o do Reservat√≥rio")
    ‚Ä¢ series: S√©rie de dados Qt5 que ser√° exibida
    
    RETORNA: QChartView configurado e pronto para uso
    */
    /*
    üìä ========================================================================
    M√âTODO REFATORADO: CRIA√á√ÉO DE GR√ÅFICOS COM EIXOS ADEQUADOS
    ========================================================================
    
    üîß CORRE√á√ÉO IMPLEMENTADA:
    Configura√ß√£o de ranges apropriados para cada tipo de gr√°fico baseado
    no t√≠tulo, resolvendo problema de invisibilidade dos pontos.
    
    üìè RANGES INDUSTRIAIS CALIBRADOS:
    Baseados nos valores reais do ATS-7B para visualiza√ß√£o adequada.
    */
    QChartView* createChart(const QString& title, QLineSeries* series) {
        /*
        üèóÔ∏è CRIA√á√ÉO DO OBJETO GR√ÅFICO PRINCIPAL:
        QChart √© o container que organiza todos os elementos
        */
        QChart *chart = new QChart();
        chart->setTitle(title);            // Define t√≠tulo do gr√°fico
        chart->legend()->hide();           // Oculta legenda (interface limpa)
        chart->addSeries(series);          // Adiciona a s√©rie de dados
        chart->setTheme(QChart::ChartThemeDark);  // Tema escuro (SCADA padr√£o)

        /*
        üìä CONFIGURA√á√ÉO DO EIXO X (TEMPO) - COM RANGE ADEQUADO:
        Representa o tempo decorrido em minutos desde o in√≠cio da simula√ß√£o
        */
        QValueAxis *axisX = new QValueAxis();
        axisX->setTitleText("Tempo (min)");      // R√≥tulo do eixo
        axisX->setLabelFormat("%.1f");           // CORRE√á√ÉO: Formato com 1 decimal para melhor precis√£o
        axisX->setRange(0.0, 60.0);              // CORRE√á√ÉO: Range inicial 0-60 minutos (1 hora)
        axisX->setTickCount(7);                  // 7 marcas = intervalos de 10 minutos
        chart->addAxis(axisX, Qt::AlignBottom);  // Posi√ß√£o: parte inferior
        series->attachAxis(axisX);               // Vincula s√©rie ao eixo
        
        /*
        üìä CONFIGURA√á√ÉO DO EIXO Y (VALOR) - COM RANGES CALIBRADOS:
        Representa o valor da vari√°vel sendo medida (press√£o, vaz√£o, etc.)
        Ranges baseados nos valores reais do ATS-7B para visualiza√ß√£o adequada
        */
        QValueAxis *axisY = new QValueAxis();
        
        // CORRE√á√ÉO: Configurar range espec√≠fico baseado no tipo de gr√°fico
        if (title.contains("Produ√ß√£o")) {
            axisY->setTitleText("Vaz√£o (bopd)");
            axisY->setRange(5000.0, 50000.0);       // Range: 5K-50K barris/dia
            axisY->setLabelFormat("%.0f");
        } else if (title.contains("Press√£o")) {
            axisY->setTitleText("Press√£o (psi)");
            axisY->setRange(1000.0, 4000.0);        // Range: 1K-4K psi
            axisY->setLabelFormat("%.0f");
        } else if (title.contains("Volume")) {
            axisY->setTitleText("Volume (MM bbl)");
            axisY->setRange(0.0, 80.0);             // Range: 0-80 milh√µes de barris
            axisY->setLabelFormat("%.1f");
            // CORRE√á√ÉO: Converter barris para milh√µes para melhor escala
            // Isso ser√° feito na atualiza√ß√£o dos dados
        } else if (title.contains("Temperatura")) {
            axisY->setTitleText("Temperatura (¬∞C)");
            axisY->setRange(80.0, 120.0);           // Range: 80-120¬∞C
            axisY->setLabelFormat("%.1f");
        } else if (title.contains("Viscosidade")) {
            axisY->setTitleText("Viscosidade (cp)");
            axisY->setRange(0.5, 8.0);              // Range: 0.5-8 cp
            axisY->setLabelFormat("%.2f");
        } else if (title.contains("GOR")) {
            axisY->setTitleText("GOR (scf/bbl)");
            axisY->setRange(200.0, 800.0);          // Range: 200-800 scf/bbl
            axisY->setLabelFormat("%.0f");
        } else if (title.contains("WOR")) {
            axisY->setTitleText("WOR");
            axisY->setRange(0.0, 1.0);              // Range: 0-1 (ratio)
            axisY->setLabelFormat("%.3f");
        } else {
            axisY->setTitleText("Valor");            // Fallback gen√©rico
            axisY->setLabelFormat("%.2f");
        }
        
        chart->addAxis(axisY, Qt::AlignLeft);    // Posi√ß√£o: lado esquerdo
        series->attachAxis(axisY);               // Vincula s√©rie ao eixo

        /*
        üé® CRIA√á√ÉO DO WIDGET VISUALIZADOR:
        QChartView √© o widget que renderiza o gr√°fico na interface
        */
        QChartView *chartView = new QChartView(chart);
        chartView->setRenderHint(QPainter::Antialiasing);  // Suaviza√ß√£o de bordas
        
        /*
        üìù NOTA EDUCACIONAL:
        Antialiasing melhora a qualidade visual das linhas, especialmente
        importante em sistemas de monitoramento onde operadores passam
        horas observando tend√™ncias.
        */
        
        return chartView;  // Retorna o widget pronto para ser inserido na interface
    }

    /*
    ‚öôÔ∏è ========================================================================
    M√âTODO DE CONFIGURA√á√ÉO GERAL DOS GR√ÅFICOS
    ========================================================================
    
    üìö CONCEITO: M√©todo organizacional para configura√ß√µes adicionais dos
    gr√°ficos. Atualmente vazio pois toda configura√ß√£o √© feita em createChart(),
    mas mantido para futuras expans√µes.
    
    üí° POSS√çVEIS EXPANS√ïES FUTURAS:
    ‚Ä¢ Configurar cores espec√≠ficas por tipo de vari√°vel
    ‚Ä¢ Definir ranges autom√°ticos para cada gr√°fico
    ‚Ä¢ Configurar alarmes visuais (linhas de limite)
    ‚Ä¢ Sincronizar zoom entre gr√°ficos relacionados
    */
    void setupCharts() {
        /*
        üìù IMPLEMENTA√á√ÉO ATUAL:
        M√©todo vazio pois toda configura√ß√£o √© feita no createChart().
        Esta estrutura modular facilita futuras melhorias no sistema
        de visualiza√ß√£o.
        
        üîß PATTERN EDUCACIONAL:
        Este √© um padr√£o comum em sistemas industriais: m√©todos
        de setup espec√≠ficos que podem ser expandidos conforme
        necessidades operacionais evoluem.
        */
    }

    /*
    üì± ========================================================================
    M√âTODO REFATORADO: ATUALIZA√á√ÉO DA INTERFACE SCADA
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO APLICADA:
    Substitui√ß√£o de c√≥digo repetitivo por m√©todos utilit√°rios:
    ‚Ä¢ formatarCampoNumerico() para elimina√ß√£o de QString::number repetido
    ‚Ä¢ obterTempoMinutos() para convers√£o temporal centralizada
    ‚Ä¢ Estrutura mais leg√≠vel e manuten√≠vel
    
    üè≠ MELHORIA INDUSTRIAL:
    ‚Ä¢ Redu√ß√£o de 14 linhas repetitivas para 7 linhas funcionais
    ‚Ä¢ Consist√™ncia garantida na formata√ß√£o
    ‚Ä¢ Facilita mudan√ßas futuras nos padr√µes de exibi√ß√£o
    ‚Ä¢ C√≥digo mais audit√°vel para sistemas cr√≠ticos
    */
    void updateUI() {
        /*
        üìä ATUALIZA√á√ÉO DOS INDICADORES NUM√âRICOS (REFATORADO):
        Uso do m√©todo utilit√°rio para formata√ß√£o padronizada
        */
        if (indicatorLabels.size() >= 7) {
            indicatorLabels[0]->setText(formatarCampoNumerico(reservatorio->vazao_oleo_bopd));
            indicatorLabels[1]->setText(formatarCampoNumerico(reservatorio->pressao_psi));
            indicatorLabels[2]->setText(formatarCampoNumerico(reservatorio->volume_oleo_bbl));
            indicatorLabels[3]->setText(formatarCampoNumerico(reservatorio->temperatura_C));
            indicatorLabels[4]->setText(formatarCampoNumerico(reservatorio->viscosidade_oleo_cp));
            indicatorLabels[5]->setText(formatarCampoNumerico(reservatorio->gas_oil_ratio));
            indicatorLabels[6]->setText(formatarCampoNumerico(reservatorio->water_oil_ratio));
        }

        /*
        üìà ATUALIZA√á√ÉO DOS GR√ÅFICOS COM CONTROLE DE PERIODICIDADE (REFATORADO):
        Uso do sistema de periodicidade configur√°vel para an√°lise adapt√°vel
        */
        atualizarGraficosSeNecessario(false);
        
        // üéì Atualizar sistema educacional de diagn√≥stico
        atualizarDiagnosticoEducacional();
    }

    /*
    üéì ========================================================================
    SISTEMA EDUCACIONAL DE DIAGN√ìSTICO INTELIGENTE
    ========================================================================
    
    üìö CONCEITO: Sistema que ensina estudantes a identificar problemas
    operacionais e aplicar as interven√ß√µes corretas no momento adequado.
    
    üéØ FUNCIONALIDADES:
    ‚Ä¢ Detec√ß√£o autom√°tica de cen√°rios cr√≠ticos
    ‚Ä¢ Explica√ß√µes t√©cnicas detalhadas  
    ‚Ä¢ Orienta√ß√µes passo-a-passo para interven√ß√µes
    ‚Ä¢ Valores espec√≠ficos recomendados
    ‚Ä¢ Bot√£o de aplica√ß√£o autom√°tica para aprendizado
    */
    QWidget* criarSistemaEducacional() {
        diagnosticoWidget = new QWidget();
        diagnosticoWidget->setStyleSheet(R"(
            QWidget {
                background-color: black;
                border: 2px solid #007bff;
                border-radius: 8px;
                margin: 5px;
            }
            QLabel {
                padding: 8px;
                font-weight: bold;
                color: white;
            }
            QTextEdit {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 4px;
                padding: 8px;
                font-family: 'Consolas', monospace;
            }
            QPushButton {
                background-color: #28a745;
                color: white;
                font-weight: bold;
                padding: 10px 20px;
                border-radius: 4px;
                border: none;
            }
            QPushButton:hover {
                background-color: #218838;
            }
        )");

        QVBoxLayout* layout = new QVBoxLayout(diagnosticoWidget);

        // T√≠tulo principal
        diagnosticoTituloLabel = new QLabel("üéì SISTEMA EDUCACIONAL - DIAGN√ìSTICO OPERACIONAL");
        diagnosticoTituloLabel->setAlignment(Qt::AlignCenter);
        diagnosticoTituloLabel->setStyleSheet("font-size: 16px; color: #007bff; background-color: white; border: 1px solid #007bff; border-radius: 4px;");
        layout->addWidget(diagnosticoTituloLabel);




        // Bot√£o de a√ß√£o alinhado √† esquerda
        QHBoxLayout* botoesLayout = new QHBoxLayout();
        
        QPushButton* todosPopsBtn = new QPushButton("üìö MANUAL COMPLETO");
        todosPopsBtn->setStyleSheet("background-color: #17a2b8; color: white; font-weight: bold; padding: 10px; border-radius: 4px; border: none; font-size: 12px;");
        todosPopsBtn->setFixedWidth(360);
        connect(todosPopsBtn, &QPushButton::clicked, this, &SimuladorWindow::mostrarTodosProcedimentos);
        
        botoesLayout->addWidget(todosPopsBtn);
        botoesLayout->addStretch(); // Adiciona espa√ßo flex√≠vel √† direita para alinhar √† esquerda
        
        layout->addLayout(botoesLayout);

        return diagnosticoWidget;
    }

    /*
    ‚öôÔ∏è ========================================================================
    SISTEMA DE PROCEDIMENTOS OPERACIONAIS PADR√ÉO (POP)
    ========================================================================
    
    üéì CONCEITO: Para cada problema operacional, gera uma explica√ß√£o completa
    seguindo padr√µes da ind√∫stria petrol√≠fera com:
    ‚Ä¢ Diagn√≥stico situacional (fen√¥meno)
    ‚Ä¢ An√°lise de causa raiz (origem t√©cnica)  
    ‚Ä¢ Proje√ß√£o de consequ√™ncias (an√°lise de risco)
    ‚Ä¢ Procedimento de interven√ß√£o (SOP - Standard Operating Procedure)
    ‚Ä¢ Fundamenta√ß√£o t√©cnica (base cient√≠fica)
    */
    QString gerarProcedimentoOperacional(QString tipoProblema) {
        QString procedimento = "";
        
        if (tipoProblema == "pressao_baixa") {
            procedimento = "‚öôÔ∏è POP-001: RECUPERA√á√ÉO DE PRESS√ÉO DO RESERVAT√ìRIO\n\n";
            
            procedimento += "üîç DIAGN√ìSTICO SITUACIONAL:\n";
            procedimento += "‚Ä¢ Press√£o atual: " + QString::number(reservatorio->pressao_psi, 'f', 0) + " psi (abaixo de 2.500 psi)\n";
            procedimento += "‚Ä¢ Status: Deple√ß√£o cr√≠tica de energia do reservat√≥rio\n";
            procedimento += "‚Ä¢ Analogia: Sistema perdendo 'for√ßa motriz' natural\n\n";
            
            procedimento += "üìã AN√ÅLISE DE CAUSA RAIZ:\n";
            procedimento += "‚Ä¢ Produ√ß√£o cont√≠nua sem reposi√ß√£o de energia\n";
            procedimento += "‚Ä¢ Cada barril extra√≠do reduz press√£o interna\n";
            procedimento += "‚Ä¢ Lei f√≠sica: Volume ‚Üì = Press√£o ‚Üì\n";
            procedimento += "‚Ä¢ Deple√ß√£o natural progressiva do reservat√≥rio\n\n";
            
            procedimento += "‚ö†Ô∏è PROJE√á√ÉO DE CONSEQU√äNCIAS:\n";
            procedimento += "‚Ä¢ CR√çTICO: Vaz√£o em decl√≠nio acelerado\n";
            procedimento += "‚Ä¢ PRAZO: Parada total em 30-60 minutos\n";
            procedimento += "‚Ä¢ ECON√îMICO: Inviabilidade operacional\n";
            procedimento += "‚Ä¢ T√âCNICO: Recupera√ß√£o mais dif√≠cil se atrasar\n\n";
            
            procedimento += "üõ†Ô∏è PROCEDIMENTO DE INTERVEN√á√ÉO (SOP-001):\n";
            double volumeRec = std::max(15000.0, reservatorio->vazao_oleo_bopd * 1.2);
            procedimento += "PASSO 1: Localize 'Inje√ß√£o de √Ågua (bbl/dia)' nos controles\n";
            procedimento += "PASSO 2: Digite exatamente " + QString::number(volumeRec, 'f', 0) + " (volume calculado)\n";
            procedimento += "PASSO 3: Configure temperatura para 60¬∞C (otimiza viscosidade)\n";
            procedimento += "PASSO 4: Clique 'Iniciar Inje√ß√£o de √Ågua'\n";
            procedimento += "PASSO 5: Observe gr√°fico de press√£o nos pr√≥ximos 5-10 minutos\n";
            procedimento += "PASSO 6: Press√£o deve subir gradualmente (sinal de sucesso)\n";
            procedimento += "PASSO 7: Vaz√£o de √≥leo deve aumentar consequentemente\n\n";
            
            procedimento += "üî¨ FUNDAMENTA√á√ÉO T√âCNICA:\n";
            procedimento += "‚Ä¢ √Ågua injetada: Sistema de pressure maintenance\n";
            procedimento += "‚Ä¢ Mecanismo: Empuxe hidr√°ulico direcionado ao po√ßo\n";
            procedimento += "‚Ä¢ F√≠sica: Mant√©m gradiente de press√£o (ŒîP)\n";
            procedimento += "‚Ä¢ Padr√£o global: Waterflooding secund√°rio\n";
            procedimento += "‚Ä¢ T¬∞ 60¬∞C: Redu√ß√£o da viscosidade ¬µ do √≥leo\n";
            procedimento += "‚Ä¢ Volume: 1.2x produ√ß√£o (regra API/SPE)";
            
        } else if (tipoProblema == "gor_elevado") {
            procedimento = "‚öôÔ∏è POP-002: CONTROLE DE GAS-OIL RATIO (GOR)\n\n";
            
            procedimento += "üîç O QUE EST√Å ACONTECENDO:\n";
            procedimento += "‚Ä¢ GOR atual: " + QString::number(reservatorio->gas_oil_ratio, 'f', 0) + " scf/bbl (acima de 2.500)\n";
            procedimento += "‚Ä¢ Muito g√°s saindo junto com o √≥leo\n";
            procedimento += "‚Ä¢ √â como abrir um refrigerante quente - g√°s se liberta\n\n";
            
            procedimento += "‚ùì POR QUE ACONTECEU:\n";
            procedimento += "‚Ä¢ Press√£o caiu abaixo do 'ponto de bolha' (~2.800 psi)\n";
            procedimento += "‚Ä¢ G√°s dissolvido no √≥leo come√ßou a se separar\n";
            procedimento += "‚Ä¢ Como bolhas numa bebida gasosa aquecida\n";
            procedimento += "‚Ä¢ Fen√¥meno natural quando press√£o diminui\n\n";
            
            procedimento += "‚ö†Ô∏è O QUE VAI ACONTECER SE N√ÉO INTERVIR:\n";
            procedimento += "‚Ä¢ Efici√™ncia de produ√ß√£o vai piorar continuamente\n";
            procedimento += "‚Ä¢ G√°s livre ocupa espa√ßo que deveria ser do √≥leo\n";
            procedimento += "‚Ä¢ Viscosidade do √≥leo aumenta (sem g√°s dissolvido)\n";
            procedimento += "‚Ä¢ Equipamentos podem ter problemas com excesso de g√°s\n\n";
            
            procedimento += "üõ†Ô∏è PASSO-A-PASSO DA INTERVEN√á√ÉO:\n";
            double gasRec = std::min(8.0, reservatorio->gas_oil_ratio / 400.0);
            procedimento += "PASSO 1: Localize 'Inje√ß√£o de G√°s (Mm¬≥/dia)' nos controles\n";
            procedimento += "PASSO 2: Digite " + QString::number(gasRec, 'f', 1) + " Mm¬≥/dia (calculado pela f√≥rmula)\n";
            procedimento += "PASSO 3: Configure densidade para 0.8 kg/m¬≥ (g√°s padr√£o)\n";
            procedimento += "PASSO 4: Clique 'Iniciar Inje√ß√£o de G√°s'\n";
            procedimento += "PASSO 5: Monitore GOR - deve diminuir em 15-20 minutos\n";
            procedimento += "PASSO 6: Observe estabiliza√ß√£o da press√£o do reservat√≥rio\n";
            procedimento += "PASSO 7: Produ√ß√£o deve se tornar mais eficiente\n\n";
            
            procedimento += "üéì TEORIA - POR QUE FUNCIONA:\n";
            procedimento += "‚Ä¢ G√°s injetado reestabelece press√£o acima do ponto de bolha\n";
            procedimento += "‚Ä¢ For√ßa o g√°s livre a se redissolver no √≥leo\n";
            procedimento += "‚Ä¢ Restaura viscosidade ideal do √≥leo\n";
            procedimento += "‚Ä¢ T√©cnica: gas lift ou pressure maintenance\n";
            procedimento += "‚Ä¢ Densidade 0.8: otimizada para miscibilidade\n";
            procedimento += "‚Ä¢ F√≥rmula volume: GOR/400 (regra da ind√∫stria)";
            
        } else if (tipoProblema == "excesso_gas") {
            procedimento = "üìã RECEITA: CONTROLE DE EXCESSO DE G√ÅS (FLARE)\n\n";
            
            procedimento += "üîç O QUE EST√Å ACONTECENDO:\n";
            procedimento += "‚Ä¢ Volume de g√°s: " + QString::number(reservatorio->volume_gas_m3, 'f', 0) + " m¬≥ (acima de 8.000 m¬≥)\n";
            procedimento += "‚Ä¢ G√°s acumulando mais r√°pido que pode ser processado\n";
            procedimento += "‚Ä¢ Como encher um bal√£o al√©m da capacidade\n\n";
            
            procedimento += "‚ùì POR QUE ACONTECEU:\n";
            procedimento += "‚Ä¢ Produ√ß√£o de g√°s excedeu capacidade de processamento\n";
            procedimento += "‚Ä¢ Podem ter falhas nos equipamentos de g√°s\n";
            procedimento += "‚Ä¢ GOR alto gerou mais g√°s que o esperado\n";
            procedimento += "‚Ä¢ Sistema n√£o consegue escoar o volume produzido\n\n";
            
            procedimento += "‚ö†Ô∏è O QUE VAI ACONTECER SE N√ÉO INTERVIR:\n";
            procedimento += "‚Ä¢ RISCO DE SEGURAN√áA: sobrepress√£o perigosa\n";
            procedimento += "‚Ä¢ Pode causar parada de emerg√™ncia autom√°tica\n";
            procedimento += "‚Ä¢ Equipamentos podem sofrer danos\n";
            procedimento += "‚Ä¢ Em casos extremos: vazamentos ou explos√£o\n\n";
            
            procedimento += "üõ†Ô∏è PASSO-A-PASSO DA INTERVEN√á√ÉO:\n";
            double flareRec = reservatorio->volume_gas_m3 * 0.3;
            procedimento += "PASSO 1: URGENTE - Localize 'Libera√ß√£o de G√°s - Flare (m¬≥/dia)'\n";
            procedimento += "PASSO 2: Digite " + QString::number(flareRec, 'f', 0) + " m¬≥/dia (30% do volume atual)\n";
            procedimento += "PASSO 3: Clique 'Ativar Flare' IMEDIATAMENTE\n";
            procedimento += "PASSO 4: Observe volume de g√°s diminuir rapidamente\n";
            procedimento += "PASSO 5: Mantenha flare at√© volume < 6.000 m¬≥\n";
            procedimento += "PASSO 6: Investigue causa raiz do excesso de g√°s\n";
            procedimento += "PASSO 7: Ajuste produ√ß√£o se necess√°rio\n\n";
            
            procedimento += "üéì TEORIA - POR QUE FUNCIONA:\n";
            procedimento += "‚Ä¢ Flare = queima controlada e segura do excesso\n";
            procedimento += "‚Ä¢ Remove g√°s do sistema sem criar riscos\n";
            procedimento += "‚Ä¢ Alivia press√£o instantaneamente\n";
            procedimento += "‚Ä¢ Procedimento de seguran√ßa padr√£o mundial\n";
            procedimento += "‚Ä¢ 30% √© taxa segura para n√£o desestabilizar sistema\n";
            procedimento += "‚Ä¢ Queima a alta temperatura: destr√≥i gases t√≥xicos";
            
        } else if (tipoProblema == "producao_baixa") {
            procedimento = "üìã RECEITA: OTIMIZA√á√ÉO DE PRODU√á√ÉO SUB√ìTIMA\n\n";
            
            procedimento += "üîç O QUE EST√Å ACONTECENDO:\n";
            procedimento += "‚Ä¢ Vaz√£o: " + QString::number(reservatorio->vazao_oleo_bopd, 'f', 0) + " bopd (abaixo de 12.000)\n";
            procedimento += "‚Ä¢ Press√£o OK: " + QString::number(reservatorio->pressao_psi, 'f', 0) + " psi (adequada)\n";
            procedimento += "‚Ä¢ Po√ßo n√£o est√° produzindo seu potencial m√°ximo\n\n";
            
            procedimento += "‚ùì POR QUE ACONTECEU (M√öLTIPLAS CAUSAS):\n";
            procedimento += "‚Ä¢ Viscosidade alta do √≥leo (baixa temperatura)\n";
            procedimento += "‚Ä¢ Dano na forma√ß√£o (plugging de poros)\n";
            procedimento += "‚Ä¢ WOR alto (muita √°gua junto)\n";
            procedimento += "‚Ä¢ Choke muito fechado\n";
            procedimento += "‚Ä¢ Coning de √°gua ou g√°s no po√ßo\n\n";
            
            procedimento += "‚ö†Ô∏è O QUE VAI ACONTECER SE N√ÉO INTERVIR:\n";
            procedimento += "‚Ä¢ Perda de receita: produ√ß√£o abaixo do potencial\n";
            procedimento += "‚Ä¢ Reservat√≥rio pode se deteriorar com tempo\n";
            procedimento += "‚Ä¢ Competitividade econ√¥mica reduzida\n";
            procedimento += "‚Ä¢ Pode evoluir para outros problemas\n\n";
            
            procedimento += "üõ†Ô∏è PASSO-A-PASSO DA INVESTIGA√á√ÉO:\n";
            procedimento += "PASSO 1: Analise gr√°ficos - quando come√ßou a declinar?\n";
            procedimento += "PASSO 2: Verifique WOR - se > 2.0, problema √© √°gua\n";
            procedimento += "PASSO 3: Cheque viscosidade vs temperatura\n";
            procedimento += "PASSO 4: Se T¬∞ < 80¬∞C, considere aquecimento\n";
            procedimento += "PASSO 5: Teste inje√ß√£o leve de √°gua (5.000 bbl/dia)\n";
            procedimento += "PASSO 6: Monitore resposta por 30 minutos\n";
            procedimento += "PASSO 7: Se n√£o melhorar, considere vapor ou choke\n\n";
            
            procedimento += "üéì TEORIA - DIAGN√ìSTICO DIFERENCIAL:\n";
            procedimento += "‚Ä¢ Press√£o OK + produ√ß√£o baixa = problema no po√ßo\n";
            procedimento += "‚Ä¢ N√£o √© energia do reservat√≥rio (pressure drive)\n";
            procedimento += "‚Ä¢ Foco: produtividade e fluxo no near-wellbore\n";
            procedimento += "‚Ä¢ Viscosidade inversamente proporcional √† T¬∞\n";
            procedimento += "‚Ä¢ WOR alto indica breakthrough de √°gua\n";
            procedimento += "‚Ä¢ Inje√ß√£o teste: diagn√≥stica sweep efficiency";
            
        } else if (tipoProblema == "wor_elevado") {
            procedimento = "üìã RECEITA: CONTROLE DE WATER-OIL RATIO (WOR)\n\n";
            
            procedimento += "üîç O QUE EST√Å ACONTECENDO:\n";
            procedimento += "‚Ä¢ WOR atual: " + QString::number(reservatorio->water_oil_ratio, 'f', 2) + " (acima de 2.0)\n";
            procedimento += "‚Ä¢ Muita √°gua sendo produzida junto com √≥leo\n";
            procedimento += "‚Ä¢ √â como sugar um milkshake com muito gelo derretido\n\n";
            
            procedimento += "‚ùì POR QUE ACONTECEU:\n";
            procedimento += "‚Ä¢ Coning de √°gua severo: √°gua 'subiu' at√© o po√ßo\n";
            procedimento += "‚Ä¢ Drawdown muito alto (po√ßo 'puxando' √°gua)\n";
            procedimento += "‚Ä¢ Permeabilidade da √°gua maior que do √≥leo\n";
            procedimento += "‚Ä¢ Heterogeneidade do reservat√≥rio\n\n";
            
            procedimento += "‚ö†Ô∏è O QUE VAI ACONTECER SE N√ÉO INTERVIR:\n";
            procedimento += "‚Ä¢ Custo de separa√ß√£o √°gua/√≥leo aumenta\n";
            procedimento += "‚Ä¢ Receita l√≠quida diminui drasticamente\n";
            procedimento += "‚Ä¢ Pode inviabilizar economicamente o po√ßo\n";
            procedimento += "‚Ä¢ Problemas ambientais com descarte de √°gua\n\n";
            
            procedimento += "üõ†Ô∏è PASSO-A-PASSO DA INTERVEN√á√ÉO:\n";
            procedimento += "PASSO 1: Reduza drawdown - 'Fechar V√°lvula de Choke'\n";
            procedimento += "PASSO 2: Monitore WOR por 20-30 minutos\n";
            procedimento += "PASSO 3: Se n√£o melhorar, considere inje√ß√£o de vapor\n";
            procedimento += "PASSO 4: Configure vapor por 300 segundos\n";
            procedimento += "PASSO 5: Vapor reduz viscosidade - facilita separa√ß√£o\n";
            procedimento += "PASSO 6: Avalie viabilidade econ√¥mica cont√≠nua\n";
            procedimento += "PASSO 7: Se WOR n√£o diminuir, po√ßo pode precisar workover\n\n";
            
            procedimento += "üéì TEORIA - POR QUE FUNCIONA:\n";
            procedimento += "‚Ä¢ Menos drawdown = menos 'suc√ß√£o' de √°gua\n";
            procedimento += "‚Ä¢ Vapor aquece: reduz viscosidade relativa √≥leo/√°gua\n";
            procedimento += "‚Ä¢ √Ågua tem mobilidade maior em T¬∞ baixa\n";
            procedimento += "‚Ä¢ Controle de coning √© arte + ci√™ncia\n";
            procedimento += "‚Ä¢ WOR econ√¥mico varia: ~2.0 para Brent, ~5.0 para heavy\n";
            procedimento += "‚Ä¢ Workover = interven√ß√£o f√≠sica no po√ßo";
        }
        
        return procedimento;
    }

    void mostrarTodosProcedimentos() {
        QDialog* popsDialog = new QDialog(this);
        popsDialog->setWindowTitle("üìö MANUAL DE PROCEDIMENTOS OPERACIONAIS PADR√ÉO");
        popsDialog->resize(900, 700);
        
        QVBoxLayout* layout = new QVBoxLayout(popsDialog);
        
        QLabel* titulo = new QLabel("üéì MANUAL DO OPERADOR - POPs INDUSTRIAIS");
        titulo->setAlignment(Qt::AlignCenter);
        titulo->setStyleSheet("font-size: 18px; font-weight: bold; color: #007bff; background-color: white; border: 2px solid #007bff; border-radius: 6px; padding: 10px; margin: 5px;");
        layout->addWidget(titulo);
        
        QTabWidget* abas = new QTabWidget();
        abas->setStyleSheet("QTabWidget::pane { border: 1px solid #dee2e6; } QTabBar::tab { padding: 8px 16px; margin-right: 2px; } QTabBar::tab:selected { background-color: #007bff; color: white; }");
        
        // Aba 1: Press√£o Baixa
        QWidget* pressaoTabWidget = new QWidget();
        QVBoxLayout* pressaoTabLayout = new QVBoxLayout(pressaoTabWidget);
        
        QTextEdit* popPressao = new QTextEdit();
        popPressao->setReadOnly(true);
        popPressao->setText(gerarProcedimentoOperacional("pressao_baixa"));
        popPressao->setStyleSheet("font-family: 'Consolas', monospace; background-color: white; color: black;");
        pressaoTabLayout->addWidget(popPressao);
        
        // Adicionar bot√£o aplicar solu√ß√£o
        QPushButton* aplicarPressaoBtn = new QPushButton("ü§ñ APLICAR SOLU√á√ÉO PARA PRESS√ÉO CR√çTICA");
        aplicarPressaoBtn->setStyleSheet("background-color: #28a745; color: white; font-weight: bold; padding: 10px; border-radius: 4px; border: none; font-size: 12px; margin: 10px;");
        connect(aplicarPressaoBtn, &QPushButton::clicked, [this, popsDialog]() {
            if (diagnosticoAtual == "pressao_baixa") {
                aplicarSolucaoAutomatica();
                popsDialog->accept();
            } else {
                QMessageBox::information(this, "Informa√ß√£o", "Esta solu√ß√£o s√≥ pode ser aplicada quando o sistema detectar press√£o cr√≠tica.");
            }
        });
        pressaoTabLayout->addWidget(aplicarPressaoBtn);
        
        abas->addTab(pressaoTabWidget, "üî¥ Press√£o Cr√≠tica");
        
        // Aba 2: GOR Elevado  
        QWidget* gorTabWidget = new QWidget();
        QVBoxLayout* gorTabLayout = new QVBoxLayout(gorTabWidget);
        
        QTextEdit* receitaGor = new QTextEdit();
        receitaGor->setReadOnly(true);
        receitaGor->setText(gerarProcedimentoOperacional("gor_elevado"));
        receitaGor->setStyleSheet("font-family: 'Consolas', monospace; background-color: white; color: black;");
        gorTabLayout->addWidget(receitaGor);
        
        // Adicionar bot√£o aplicar solu√ß√£o
        QPushButton* aplicarGorBtn = new QPushButton("ü§ñ APLICAR SOLU√á√ÉO PARA GOR ELEVADO");
        aplicarGorBtn->setStyleSheet("background-color: #28a745; color: white; font-weight: bold; padding: 10px; border-radius: 4px; border: none; font-size: 12px; margin: 10px;");
        connect(aplicarGorBtn, &QPushButton::clicked, [this, popsDialog]() {
            if (diagnosticoAtual == "gor_elevado") {
                aplicarSolucaoAutomatica();
                popsDialog->accept();
            } else {
                QMessageBox::information(this, "Informa√ß√£o", "Esta solu√ß√£o s√≥ pode ser aplicada quando o sistema detectar GOR elevado.");
            }
        });
        gorTabLayout->addWidget(aplicarGorBtn);
        
        abas->addTab(gorTabWidget, "üü† GOR Elevado");
        
        // Aba 3: Excesso de G√°s
        QWidget* gasTabWidget = new QWidget();
        QVBoxLayout* gasTabLayout = new QVBoxLayout(gasTabWidget);
        
        QTextEdit* receitaGas = new QTextEdit();
        receitaGas->setReadOnly(true);
        receitaGas->setText(gerarProcedimentoOperacional("excesso_gas"));
        receitaGas->setStyleSheet("font-family: 'Consolas', monospace; background-color: white; color: black;");
        gasTabLayout->addWidget(receitaGas);
        
        // Adicionar bot√£o aplicar solu√ß√£o
        QPushButton* aplicarGasBtn = new QPushButton("ü§ñ APLICAR SOLU√á√ÉO PARA EXCESSO DE G√ÅS");
        aplicarGasBtn->setStyleSheet("background-color: #28a745; color: white; font-weight: bold; padding: 10px; border-radius: 4px; border: none; font-size: 12px; margin: 10px;");
        connect(aplicarGasBtn, &QPushButton::clicked, [this, popsDialog]() {
            if (diagnosticoAtual == "excesso_gas") {
                aplicarSolucaoAutomatica();
                popsDialog->accept();
            } else {
                QMessageBox::information(this, "Informa√ß√£o", "Esta solu√ß√£o s√≥ pode ser aplicada quando o sistema detectar excesso de g√°s.");
            }
        });
        gasTabLayout->addWidget(aplicarGasBtn);
        
        abas->addTab(gasTabWidget, "üü° Excesso G√°s");
        
        // Aba 4: Produ√ß√£o Baixa
        QWidget* producaoTabWidget = new QWidget();
        QVBoxLayout* producaoTabLayout = new QVBoxLayout(producaoTabWidget);
        
        QTextEdit* receitaProducao = new QTextEdit();
        receitaProducao->setReadOnly(true);
        receitaProducao->setText(gerarProcedimentoOperacional("producao_baixa"));
        receitaProducao->setStyleSheet("font-family: 'Consolas', monospace; background-color: white; color: black;");
        producaoTabLayout->addWidget(receitaProducao);
        
        // Adicionar bot√£o aplicar solu√ß√£o
        QPushButton* aplicarProducaoBtn = new QPushButton("ü§ñ APLICAR SOLU√á√ÉO PARA PRODU√á√ÉO BAIXA");
        aplicarProducaoBtn->setStyleSheet("background-color: #28a745; color: white; font-weight: bold; padding: 10px; border-radius: 4px; border: none; font-size: 12px; margin: 10px;");
        connect(aplicarProducaoBtn, &QPushButton::clicked, [this, popsDialog]() {
            if (diagnosticoAtual == "producao_baixa") {
                aplicarSolucaoAutomatica();
                popsDialog->accept();
            } else {
                QMessageBox::information(this, "Informa√ß√£o", "Esta solu√ß√£o s√≥ pode ser aplicada quando o sistema detectar produ√ß√£o baixa.");
            }
        });
        producaoTabLayout->addWidget(aplicarProducaoBtn);
        
        abas->addTab(producaoTabWidget, "üü† Produ√ß√£o Baixa");
        
        // Aba 5: WOR Elevado
        QWidget* worTabWidget = new QWidget();
        QVBoxLayout* worTabLayout = new QVBoxLayout(worTabWidget);
        
        QTextEdit* receitaWor = new QTextEdit();
        receitaWor->setReadOnly(true);
        receitaWor->setText(gerarProcedimentoOperacional("wor_elevado"));
        receitaWor->setStyleSheet("font-family: 'Consolas', monospace; background-color: white; color: black;");
        worTabLayout->addWidget(receitaWor);
        
        // Adicionar bot√£o aplicar solu√ß√£o
        QPushButton* aplicarWorBtn = new QPushButton("ü§ñ APLICAR SOLU√á√ÉO PARA WOR ELEVADO");
        aplicarWorBtn->setStyleSheet("background-color: #28a745; color: white; font-weight: bold; padding: 10px; border-radius: 4px; border: none; font-size: 12px; margin: 10px;");
        connect(aplicarWorBtn, &QPushButton::clicked, [this, popsDialog]() {
            if (diagnosticoAtual == "wor_elevado") {
                aplicarSolucaoAutomatica();
                popsDialog->accept();
            } else {
                QMessageBox::information(this, "Informa√ß√£o", "Esta solu√ß√£o s√≥ pode ser aplicada quando o sistema detectar WOR elevado.");
            }
        });
        worTabLayout->addWidget(aplicarWorBtn);
        
        abas->addTab(worTabWidget, "üü§ WOR Elevado");
        
        // Aba 6: Resumo Geral
        QTextEdit* resumoGeral = new QTextEdit();
        resumoGeral->setReadOnly(true);
        QString resumo = "üìã RESUMO EXECUTIVO - GUIA R√ÅPIDO DE DECIS√ÉO\n\n";
        resumo += "üö® ORDEM DE PRIORIDADE OPERACIONAL:\n\n";
        resumo += "1. PRESS√ÉO BAIXA (<2500 psi) - CR√çTICO ‚ö°\n";
        resumo += "   ‚Üí Inje√ß√£o de √°gua URGENTE\n";
        resumo += "   ‚Üí Sem press√£o = sem produ√ß√£o\n\n";
        resumo += "2. EXCESSO DE G√ÅS (>8000 m¬≥) - SEGURAN√áA üî•\n";
        resumo += "   ‚Üí Flare imediato\n";
        resumo += "   ‚Üí Risco de explos√£o\n\n";
        resumo += "3. GOR ELEVADO (>2500 scf/bbl) - EFICI√äNCIA ‚ö°\n";
        resumo += "   ‚Üí Inje√ß√£o de g√°s\n";
        resumo += "   ‚Üí Restaura qualidade do √≥leo\n\n";
        resumo += "4. WOR ELEVADO (>2.0) - ECONOMIA üí∞\n";
        resumo += "   ‚Üí Controle de choke\n";
        resumo += "   ‚Üí Viabilidade econ√¥mica\n\n";
        resumo += "5. PRODU√á√ÉO BAIXA - OTIMIZA√á√ÉO üìà\n";
        resumo += "   ‚Üí Diagn√≥stico m√∫ltiplas causas\n";
        resumo += "   ‚Üí An√°lise case-by-case\n\n";
        resumo += "üéì REGRAS DE OURO:\n";
        resumo += "‚Ä¢ NUNCA ignore press√£o baixa\n";
        resumo += "‚Ä¢ SEMPRE priorize seguran√ßa (flare)\n";
        resumo += "‚Ä¢ MONITORE tend√™ncias, n√£o valores pontuais\n";
        resumo += "‚Ä¢ DOCUMENTE todas as interven√ß√µes\n";
        resumo += "‚Ä¢ ENTENDA o 'porqu√™' antes de agir\n\n";
        resumo += "üí° DICA FINAL:\n";
        resumo += "Cada reservat√≥rio √© √∫nico, mas os princ√≠pios f√≠sicos\n";
        resumo += "s√£o universais. Use este manual como base e adapte\n";
        resumo += "conforme a experi√™ncia operacional.";
        resumoGeral->setText(resumo);
        resumoGeral->setStyleSheet("font-family: 'Consolas', monospace; background-color: white; color: black;");
        abas->addTab(resumoGeral, "üìä Resumo Geral");
        
        layout->addWidget(abas);
        
        // Bot√£o para fechar
        QPushButton* fecharBtn = new QPushButton("‚úÖ Entendi - Fechar Manual");
        fecharBtn->setStyleSheet("background-color: #28a745; color: white; font-weight: bold; padding: 12px 24px; border-radius: 6px; border: none; font-size: 14px;");
        connect(fecharBtn, &QPushButton::clicked, popsDialog, &QDialog::accept);
        layout->addWidget(fecharBtn);
        
        popsDialog->exec();
    }

    void mostrarProcedimentoAtual() {
        if (diagnosticoAtual == "normal") return;
        
        QDialog* popDialog = new QDialog(this);
        popDialog->setWindowTitle("‚öôÔ∏è PROCEDIMENTO OPERACIONAL ESPEC√çFICO");
        popDialog->resize(800, 600);
        
        QVBoxLayout* layout = new QVBoxLayout(popDialog);
        
        // T√≠tulo com o problema espec√≠fico
        QString tituloProblema;
        if (diagnosticoAtual == "pressao_baixa") tituloProblema = "üî¥ PRESS√ÉO CR√çTICA";
        else if (diagnosticoAtual == "gor_elevado") tituloProblema = "üü† GOR ELEVADO";
        else if (diagnosticoAtual == "excesso_gas") tituloProblema = "üü° EXCESSO DE G√ÅS";
        else if (diagnosticoAtual == "producao_baixa") tituloProblema = "üü† PRODU√á√ÉO BAIXA";
        else if (diagnosticoAtual == "wor_elevado") tituloProblema = "üü§ WOR ELEVADO";
        
        QLabel* titulo = new QLabel(tituloProblema + " - PROCEDIMENTO DETALHADO");
        titulo->setAlignment(Qt::AlignCenter);
        titulo->setStyleSheet("font-size: 16px; font-weight: bold; color: #ffffff; background-color: #dc3545; border-radius: 6px; padding: 12px; margin: 5px;");
        layout->addWidget(titulo);
        
        // Conte√∫do do procedimento
        QTextEdit* procedimentoText = new QTextEdit();
        procedimentoText->setReadOnly(true);
        procedimentoText->setText(gerarProcedimentoOperacional(diagnosticoAtual));
        procedimentoText->setStyleSheet("background-color: #001f3f; color: #ffffff; border: 2px solid #007bff; border-radius: 4px; padding: 12px; font-family: 'Consolas', 'Monaco', monospace; font-size: 13px; font-weight: bold; line-height: 1.4;");
        layout->addWidget(procedimentoText);
        
        // Bot√µes de a√ß√£o
        QHBoxLayout* botoesLayout = new QHBoxLayout();
        
        QPushButton* aplicarBtn = new QPushButton("ü§ñ APLICAR ESTE PROCEDIMENTO");
        aplicarBtn->setStyleSheet("background-color: #28a745; color: white; font-weight: bold; padding: 12px 20px; border-radius: 6px; border: none; font-size: 14px;");
        connect(aplicarBtn, &QPushButton::clicked, [this, popDialog]() {
            aplicarSolucaoAutomatica();
            popDialog->accept();
        });
        botoesLayout->addWidget(aplicarBtn);
        
        QPushButton* fecharBtn = new QPushButton("üìñ ENTENDI - FECHAR");
        fecharBtn->setStyleSheet("background-color: #6c757d; color: white; font-weight: bold; padding: 12px 20px; border-radius: 6px; border: none; font-size: 14px;");
        connect(fecharBtn, &QPushButton::clicked, popDialog, &QDialog::accept);
        botoesLayout->addWidget(fecharBtn);
        
        layout->addLayout(botoesLayout);
        
        popDialog->exec();
    }

    /*
    üîä ========================================================================
    SISTEMA DE ALERTAS SONOROS INDUSTRIAIS
    ========================================================================
    
    üéØ CONCEITO: Alertas auditivos padronizados para ambientes industriais
    ‚Ä¢ CR√çTICO: Frequ√™ncia alta, urgente (press√£o baixa, seguran√ßa)
    ‚Ä¢ ATEN√á√ÉO: Frequ√™ncia moderada, alerta (GOR, WOR, produ√ß√£o)
    */
    void emitirAlertaSonoro(QString tipoAlerta) {
        static qint64 ultimoAlerta = 0;
        qint64 tempoAtual = QDateTime::currentMSecsSinceEpoch();
        
        // Evitar spam sonoro - m√≠nimo 30 segundos entre alertas
        if (tempoAtual - ultimoAlerta < 30000) {
            return;
        }
        ultimoAlerta = tempoAtual;
        
        if (tipoAlerta == "critico") {
            // Padr√£o industrial para alertas cr√≠ticos: 3 beeps r√°pidos
            QApplication::beep();
            QTimer::singleShot(200, []() { QApplication::beep(); });
            QTimer::singleShot(400, []() { QApplication::beep(); });
            
            // Identificar causa espec√≠fica do alerta - DIAGN√ìSTICO COMPLETO
            QString causa = "";
            QStringList problemas;
            
            // Verificar TODOS os par√¢metros cr√≠ticos
            if (reservatorio->pressao_psi < 2500.0) {
                problemas << QString("PRESS√ÉO BAIXA: %1 psi (< 2500)").arg(reservatorio->pressao_psi, 0, 'f', 0);
            }
            if (reservatorio->volume_gas_m3 > 15000.0) {
                problemas << QString("EXCESSO DE G√ÅS: %1 m¬≥ (> 15000)").arg(reservatorio->volume_gas_m3, 0, 'f', 0);
            }
            if (reservatorio->water_oil_ratio > 0.4) {
                problemas << QString("BSW ALTO: %1% (> 40%)").arg(reservatorio->water_oil_ratio * 100, 0, 'f', 1);
            }
            if (reservatorio->gas_oil_ratio > 1000.0) {
                problemas << QString("GOR ALTO: %1 scf/bbl (> 1000)").arg(reservatorio->gas_oil_ratio, 0, 'f', 0);
            }
            if (reservatorio->em_emergencia) {
                problemas << QString("SHUTDOWN: %1").arg(reservatorio->motivo_emergencia);
            }
            
            if (!problemas.isEmpty()) {
                causa = problemas.join(" | ");
            } else {
                // Log detalhado para debug se n√£o identificou a causa
                causa = QString("VALORES ATUAIS: P=%1psi, Gas=%2m¬≥, BSW=%3%, GOR=%4")
                       .arg(reservatorio->pressao_psi, 0, 'f', 0)
                       .arg(reservatorio->volume_gas_m3, 0, 'f', 0)
                       .arg(reservatorio->water_oil_ratio * 100, 0, 'f', 1)
                       .arg(reservatorio->gas_oil_ratio, 0, 'f', 0);
            }
            
            logMessage("üö® ALERTA CR√çTICO: " + causa, "critico");
            
        } else if (tipoAlerta == "atencao") {
            // Padr√£o para aten√ß√£o: 2 beeps mais suaves
            QApplication::beep();
            QTimer::singleShot(500, []() { QApplication::beep(); });
            
            logMessage("‚ö†Ô∏è ALERTA: Situa√ß√£o requer aten√ß√£o operacional.", "alerta");
        }
        
        // Log operacional para auditoria (sem mencionar "sonoro" se n√£o h√° som real)
        QString logMsg = QString("Sistema de alerta ativado - Tipo: %1").arg(tipoAlerta.toUpper());
        logMessage(logMsg, "sistema");
    }

    void atualizarDiagnosticoEducacional() {
        // Durante inicializa√ß√£o, aguardar estabiliza√ß√£o do sistema
        if (!sistemaInicializado) {
            tipoAlertaAtual = "NORMAL";
            diagnosticoAtual = "normal";
            return;
        }
        
        // Aguardar per√≠odo de estabiliza√ß√£o adicional ap√≥s inicializa√ß√£o
        static qint64 tempoInicializacao = 0;
        if (tempoInicializacao == 0) {
            tempoInicializacao = QDateTime::currentMSecsSinceEpoch();
        }
        qint64 tempoDecorrido = QDateTime::currentMSecsSinceEpoch() - tempoInicializacao;
        if (tempoDecorrido < 15000) { // 15 segundos de estabiliza√ß√£o
            tipoAlertaAtual = "NORMAL";
            diagnosticoAtual = "normal";
            return;
        }
        
        // An√°lise de condi√ß√µes cr√≠ticas - M√öLTIPLOS DIAGN√ìSTICOS
        QStringList statusList;
        QStringList explicacaoList;
        QStringList orientacaoList;
        QStringList valoresList;
        QString tipoProblema = "normal";
        bool temProblema = false;
        int problemasEncontrados = 0;

        // 1. DIAGN√ìSTICO: Press√£o baixa (decl√≠nio cr√≠tico) - PRIORIDADE M√ÅXIMA
        if (reservatorio->pressao_psi < 2500.0) {
            problemasEncontrados++;
            statusList << "üî¥ PRESS√ÉO CR√çTICA";
            
            QString exp = "DECL√çNIO DE PRESS√ÉO DETECTADO!\n";
            exp += "‚Ä¢ Press√£o atual: " + QString::number(reservatorio->pressao_psi, 'f', 0) + " psi\n";
            exp += "‚Ä¢ Abaixo de 2.500 psi (limite operacional)\n";
            exp += "‚Ä¢ Causa: Deple√ß√£o natural sem reposi√ß√£o\n";
            exp += "‚Ä¢ Risco: Parada total de produ√ß√£o";
            explicacaoList << exp;

            QString ori = "INTERVEN√á√ÉO URGENTE - INJE√á√ÉO DE √ÅGUA:\n";
            ori += "1. Localize 'Inje√ß√£o de √Ågua (bbl/dia)'\n";
            ori += "2. Use valor recomendado abaixo\n";
            ori += "3. Configure temperatura 60¬∞C\n";
            ori += "4. Monitore press√£o nos pr√≥ximos 10 min";
            orientacaoList << ori;

            double volumeRecomendado = std::max(15000.0, reservatorio->vazao_oleo_bopd * 1.2);
            valoresList << QString("üíß √Ågua: %1 bbl/dia @ 60¬∞C").arg(volumeRecomendado, 0, 'f', 0);
            
            tipoProblema = "pressao_baixa"; // Prioridade m√°xima
            temProblema = true;
        }

        // 2. DIAGN√ìSTICO: GOR elevado
        if (reservatorio->gas_oil_ratio > 2500.0) {
            problemasEncontrados++;
            statusList << "üü† GOR ELEVADO";
            
            QString exp = "GOR (GAS-OIL RATIO) CR√çTICO!\n";
            exp += "‚Ä¢ GOR atual: " + QString::number(reservatorio->gas_oil_ratio, 'f', 0) + " scf/bbl\n";
            exp += "‚Ä¢ Limite: 2.500 scf/bbl\n";
            exp += "‚Ä¢ Causa: Press√£o < ponto de bolha\n";
            exp += "‚Ä¢ Efeito: G√°s livre reduz efici√™ncia";
            explicacaoList << exp;

            QString ori = "INTERVEN√á√ÉO - INJE√á√ÉO DE G√ÅS:\n";
            ori += "1. Localize 'Inje√ß√£o de G√°s (Mm¬≥/dia)'\n";
            ori += "2. Use densidade 0.8 kg/m¬≥\n";
            ori += "3. GOR deve diminuir gradualmente\n";
            ori += "4. Monitore estabiliza√ß√£o da press√£o";
            orientacaoList << ori;

            double gasRecomendado = std::min(8.0, reservatorio->gas_oil_ratio / 400.0);
            valoresList << QString("‚ö° G√°s: %1 Mm¬≥/dia @ 0.8 kg/m¬≥").arg(gasRecomendado, 0, 'f', 1);
            
            if (tipoProblema == "normal") tipoProblema = "gor_elevado";
            temProblema = true;
        }

        // 3. DIAGN√ìSTICO: Volume de g√°s excessivo
        if (reservatorio->volume_gas_m3 > 15000.0) {
            problemasEncontrados++;
            statusList << "üü° EXCESSO DE G√ÅS";
            
            QString exp = "AC√öMULO EXCESSIVO DE G√ÅS!\n";
            exp += "‚Ä¢ Volume: " + QString::number(reservatorio->volume_gas_m3, 'f', 0) + " m¬≥\n";
            exp += "‚Ä¢ Limite seguro: 15.000 m¬≥\n";
            exp += "‚Ä¢ Risco: Sobrepress√£o perigosa\n";
            exp += "‚Ä¢ A√ß√£o: Libera√ß√£o controlada urgente";
            explicacaoList << exp;

            QString ori = "SEGURAN√áA - SISTEMA FLARE:\n";
            ori += "1. Localize 'Libera√ß√£o de G√°s - Flare'\n";
            ori += "2. Use 30% do volume atual\n";
            ori += "3. Queima controlada do excesso\n";
            ori += "4. Volume deve diminuir rapidamente";
            orientacaoList << ori;

            valoresList << QString("üî• Flare: %1 m¬≥/dia").arg(reservatorio->volume_gas_m3 * 0.3, 0, 'f', 0);
            
            if (tipoProblema == "normal") tipoProblema = "excesso_gas";
            temProblema = true;
        }

        // 4. DIAGN√ìSTICO: Produ√ß√£o baixa (mas press√£o OK)
        if (reservatorio->vazao_oleo_bopd < 12000.0 && reservatorio->pressao_psi > 2500.0) {
            problemasEncontrados++;
            statusList << "üü† PRODU√á√ÉO SUB√ìTIMA";
            
            QString exp = "VAZ√ÉO ABAIXO DO POTENCIAL!\n";
            exp += "‚Ä¢ Vaz√£o: " + QString::number(reservatorio->vazao_oleo_bopd, 'f', 0) + " bopd\n";
            exp += "‚Ä¢ Potencial: > 20.000 bopd\n";
            exp += "‚Ä¢ Press√£o OK: " + QString::number(reservatorio->pressao_psi, 'f', 0) + " psi\n";
            exp += "‚Ä¢ Problema: Produtividade do po√ßo";
            explicacaoList << exp;

            QString ori = "AN√ÅLISE E OTIMIZA√á√ÉO:\n";
            ori += "1. Verifique gr√°ficos de hist√≥rico\n";
            ori += "2. Analise viscosidade vs temperatura\n";
            ori += "3. Considere inje√ß√£o leve de √°gua\n";
            ori += "4. Revise WOR se estiver alto";
            orientacaoList << ori;

            valoresList << "üîç M√∫ltiplas causas - an√°lise detalhada";
            
            if (tipoProblema == "normal") tipoProblema = "producao_baixa";
            temProblema = true;
        }

        // 5. DIAGN√ìSTICO: WOR alto (novo diagn√≥stico)
        if (reservatorio->water_oil_ratio > 2.0) {
            problemasEncontrados++;
            statusList << "üü§ WOR ELEVADO";
            
            QString exp = "WATER-OIL RATIO CR√çTICO!\n";
            exp += "‚Ä¢ WOR atual: " + QString::number(reservatorio->water_oil_ratio, 'f', 2) + "\n";
            exp += "‚Ä¢ Limite: 2.0 (econ√¥mico)\n";
            exp += "‚Ä¢ Causa: Coning de √°gua severo\n";
            exp += "‚Ä¢ Efeito: Redu√ß√£o da receita l√≠quida";
            explicacaoList << exp;

            QString ori = "CONTROLE DE CONING:\n";
            ori += "1. Reduza drawdown (feche choke)\n";
            ori += "2. Considere inje√ß√£o de vapor\n";
            ori += "3. Monitore produ√ß√£o de √°gua\n";
            ori += "4. Avalie viabilidade econ√¥mica";
            orientacaoList << ori;

            valoresList << "üéõÔ∏è Controle de choke + monitoramento";
            
            if (tipoProblema == "normal") tipoProblema = "wor_elevado";
            temProblema = true;
        }

        // Compilar informa√ß√µes para interface
        QString statusFinal, explicacaoFinal, orientacaoFinal, valoresFinal;
        
        if (problemasEncontrados == 0) {
            statusFinal = "üü¢ OPERA√á√ÉO NORMAL";
            explicacaoFinal = "‚úÖ Todos os par√¢metros est√£o dentro dos limites operacionais normais.";
            orientacaoFinal = "üéì Continue monitorando. O sistema alertar√° quando houver necessidade de interven√ß√£o.";
            valoresFinal = "Nenhuma interven√ß√£o necess√°ria no momento.";
        } else if (problemasEncontrados == 1) {
            statusFinal = statusList.first();
            explicacaoFinal = explicacaoList.first();
            // ‚öôÔ∏è Usar procedimento operacional padr√£o detalhado para problema √∫nico
            orientacaoFinal = gerarProcedimentoOperacional(tipoProblema);
            valoresFinal = valoresList.first();
        } else {
            statusFinal = QString("‚ö†Ô∏è M√öLTIPLOS PROBLEMAS (%1)").arg(problemasEncontrados);
            explicacaoFinal = QString("üö® DETECTADOS %1 PROBLEMAS SIMULT√ÇNEOS:\n\n").arg(problemasEncontrados);
            for (int i = 0; i < explicacaoList.size(); ++i) {
                explicacaoFinal += QString("PROBLEMA %1: %2\n").arg(i+1).arg(statusList[i]) + "\n";
                explicacaoFinal += explicacaoList[i] + "\n" + QString(40, '-') + "\n\n";
            }
            
            // ‚öôÔ∏è Para m√∫ltiplos problemas, usar POP do problema priorit√°rio + lista dos outros
            orientacaoFinal = "üéØ ESTRAT√âGIA PARA M√öLTIPLOS PROBLEMAS:\n\n";
            orientacaoFinal += "‚öôÔ∏è POP PRIORIT√ÅRIO (MAIS CR√çTICO):\n";
            orientacaoFinal += QString(60, '=') + "\n\n";
            orientacaoFinal += gerarProcedimentoOperacional(tipoProblema) + "\n\n";
            
            orientacaoFinal += QString(60, '=') + "\n";
            orientacaoFinal += "‚ö†Ô∏è OUTROS PROBLEMAS DETECTADOS:\n\n";
            QStringList tiposProblemas = {"pressao_baixa", "gor_elevado", "excesso_gas", "producao_baixa", "wor_elevado"};
            QStringList nomesProblemas = {"Press√£o Baixa", "GOR Elevado", "Excesso de G√°s", "Produ√ß√£o Sub√≥tima", "WOR Elevado"};
            
            for (int i = 0; i < statusList.size(); ++i) {
                QString statusAtual = statusList[i];
                if (!statusAtual.contains("CR√çTICA")) { // N√£o √© o priorit√°rio
                    for (int j = 0; j < tiposProblemas.size(); ++j) {
                        if (statusAtual.contains(nomesProblemas[j].toUpper())) {
                            orientacaoFinal += QString("‚Ä¢ %1: Resolver ap√≥s problema cr√≠tico\n").arg(nomesProblemas[j]);
                            orientacaoFinal += QString("  POP dispon√≠vel - ser√° mostrado quando for prioridade\n\n");
                            break;
                        }
                    }
                }
            }
            
            orientacaoFinal += "\nüéì DICA EDUCACIONAL:\n";
            orientacaoFinal += "‚Ä¢ Sempre resolva problemas de press√£o primeiro!\n";
            orientacaoFinal += "‚Ä¢ Press√£o √© a 'energia' do reservat√≥rio - sem ela, nada funciona\n";
            orientacaoFinal += "‚Ä¢ Outros problemas podem ser consequ√™ncia da press√£o baixa\n";
            orientacaoFinal += "‚Ä¢ Depois de estabilizar press√£o, reavalie os outros problemas";
            
            valoresFinal = valoresList.join(" | ");
        }

        // Sistema de alertas sonoros e rastreamento de eventos
        if (problemasEncontrados > 0) {
            if (tipoProblema == "pressao_baixa" || tipoProblema == "excesso_gas") {
                // Alerta cr√≠tico (vermelho) - Som mais agudo e urgente
                tipoAlertaAtual = "CRITICO";
                // S√≥ emitir som ap√≥s sistema inicializado para evitar alarmes falsos
                if (sistemaInicializado) {
                    emitirAlertaSonoro("critico");
                }
            } else {
                // Alerta de aten√ß√£o (laranja) - Som moderado
                tipoAlertaAtual = "ATENCAO";
                // S√≥ emitir som ap√≥s sistema inicializado para evitar alarmes falsos
                if (sistemaInicializado) {
                    emitirAlertaSonoro("atencao");
                }
            }
        } else {
            tipoAlertaAtual = "NORMAL";
        }
        
        // Atualizar interface com informa√ß√µes resumidas
        
        // Mostrar apenas resumo na tela principal
        QString resumoFinal;
        if (problemasEncontrados == 0) {
            resumoFinal = "‚úÖ Todos os par√¢metros dentro dos limites operacionais normais.";
        } else if (problemasEncontrados == 1) {
            resumoFinal = explicacaoFinal.left(200) + "..."; // Primeiras 200 chars
        } else {
            resumoFinal = QString("üö® %1 problemas detectados simultaneamente. Resolva o mais cr√≠tico primeiro.").arg(problemasEncontrados);
        }
        
        
        diagnosticoAtual = tipoProblema;
    }

    void aplicarSolucaoAutomatica() {
        if (diagnosticoAtual == "pressao_baixa") {
            double volumeRecomendado = std::max(15000.0, reservatorio->vazao_oleo_bopd * 1.2);
            suggestInputWater->setText(QString::number(volumeRecomendado, 'f', 0));
            inputTempAgua->setText("60");
            
            // Aplicar inje√ß√£o diretamente
            reservatorio->injetarAgua(volumeRecomendado, 60.0);
            logMessage(QString("üéì APRENDIZADO: Injetando %1 bbl de √°gua a 60¬∞C.").arg(volumeRecomendado), "acao");
            
            QMessageBox::information(this, "‚úÖ Solu√ß√£o Aplicada", 
                QString("üéì APRENDIZADO CONCLU√çDO!\n\n")
                + "‚úÖ Inje√ß√£o de √°gua iniciada: " + QString::number(volumeRecomendado, 'f', 0) + " bbl/dia\n"
                + "‚úÖ Temperatura configurada: 60¬∞C\n\n"
                + "üìö PR√ìXIMOS PASSOS:\n"
                + "‚Ä¢ Observe o gr√°fico de press√£o nos pr√≥ximos minutos\n"  
                + "‚Ä¢ A press√£o deve come√ßar a subir\n"
                + "‚Ä¢ A vaz√£o de √≥leo deve aumentar consequentemente\n"
                + "‚Ä¢ Este √© o procedimento padr√£o para recupera√ß√£o de press√£o!");
                
        } else if (diagnosticoAtual == "gor_elevado") {
            double gasRecomendado = std::min(8.0, reservatorio->gas_oil_ratio / 400.0);
            suggestInputGas->setText(QString::number(gasRecomendado, 'f', 1));
            inputDensidadeGas->setText("0.8");
            
            // Aplicar inje√ß√£o diretamente
            reservatorio->injetarGas(gasRecomendado, 0.8);
            logMessage(QString("üéì APRENDIZADO: Injetando %1 m¬≥ de g√°s com densidade 0.8.").arg(gasRecomendado), "acao");
            
            QMessageBox::information(this, "‚úÖ Solu√ß√£o Aplicada", 
                QString("üéì APRENDIZADO CONCLU√çDO!\n\n")
                + "‚úÖ Inje√ß√£o de g√°s iniciada: " + QString::number(gasRecomendado, 'f', 1) + " Mm¬≥/dia\n"
                + "‚úÖ Densidade configurada: 0.8 kg/m¬≥\n\n"
                + "üìö O QUE ESPERAR:\n"
                + "‚Ä¢ GOR deve diminuir gradualmente\n"
                + "‚Ä¢ Press√£o do reservat√≥rio se estabiliza\n"
                + "‚Ä¢ Efici√™ncia de produ√ß√£o melhora\n"
                + "‚Ä¢ T√©cnica usada em campos maduros mundialmente!");
                
        } else if (diagnosticoAtual == "excesso_gas") {
            double flareRecomendado = reservatorio->volume_gas_m3 * 0.3;
            
            // Aplicar flare diretamente
            reservatorio->liberarGasParaQueima(flareRecomendado);
            logMessage(QString("üéì APRENDIZADO: Acionando flare com vaz√£o %1 m¬≥/dia.").arg(flareRecomendado), "acao");
            
            QMessageBox::information(this, "‚úÖ Solu√ß√£o Aplicada", 
                QString("üéì APRENDIZADO CONCLU√çDO!\n\n")
                + "‚úÖ Sistema flare ativado: " + QString::number(flareRecomendado, 'f', 0) + " m¬≥/dia\n\n"
                + "üî• CONCEITO DE SEGURAN√áA:\n"
                + "‚Ä¢ Flare queima excesso de g√°s de forma controlada\n"
                + "‚Ä¢ Previne sobrepress√£o perigosa no sistema\n"
                + "‚Ä¢ Volume de g√°s armazenado diminuir√° rapidamente\n"
                + "‚Ä¢ Procedimento de seguran√ßa padr√£o na ind√∫stria!");
        }
    }

    /*
    üíæ ========================================================================
    M√âTODO REFATORADO: SALVAMENTO DE DADOS HIST√ìRICOS
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO APLICADA:
    Substitui√ß√£o da convers√£o manual tempo_simulacao_s / 60.0 pelo
    m√©todo utilit√°rio obterTempoMinutos(), mantendo consist√™ncia com
    outros m√©todos da classe.
    
    üè≠ BENEF√çCIO INDUSTRIAL:
    ‚Ä¢ Centraliza√ß√£o da l√≥gica de convers√£o temporal
    ‚Ä¢ Facilita mudan√ßas futuras na unidade de tempo
    ‚Ä¢ Consistency across time-related operations
    */
    void saveDataPoint() {
        DadosPontos ponto;
        
        // GERA√á√ÉO DE UUID √öNICO PARA KAFKA STREAMING
        ponto.uuid = QUuid::createUuid().toString(QUuid::WithoutBraces);
        
        // USO DO M√âTODO UTILIT√ÅRIO (REFATORA√á√ÉO)
        ponto.tempo_min = obterTempoMinutos();  
        
        // DADOS T√âCNICOS TRADICIONAIS
        ponto.vazao_oleo = reservatorio->vazao_oleo_bopd;
        ponto.pressao = reservatorio->pressao_psi;
        ponto.viscosidade_cp = reservatorio->viscosidade_oleo_cp;
        ponto.volume_oleo = reservatorio->volume_oleo_bbl;
        ponto.temperatura = reservatorio->temperatura_C;
        ponto.gor = reservatorio->gas_oil_ratio;
        ponto.wor = reservatorio->water_oil_ratio;
        
        // NOVOS CAMPOS PARA AN√ÅLISE AVAN√áADA E RASTREAMENTO DE EVENTOS
        ponto.data_hora = QDateTime::currentDateTime().toString("yyyy-MM-ddThh:mm:ss");
        
        // Eventos do operador (limpar ap√≥s uso)
        ponto.evento_operador = ultimoEventoOperador;
        if (!ultimoEventoOperador.isEmpty()) {
            ultimoEventoOperador = ""; // Reset ap√≥s capturar
        }
        
        // Eventos f√≠sicos do reservat√≥rio 
        ponto.evento_fisica = ultimoEventoFisica;
        if (!ultimoEventoFisica.isEmpty()) {
            ultimoEventoFisica = ""; // Reset ap√≥s capturar
        }
        
        // Tipo de alerta atual
        ponto.alerta_tipo = tipoAlertaAtual;
        
        dataPoints.append(ponto);
    }

    // M√©todo para logar mensagens na caixa de texto
    void logMessage(const QString& message, const QString& type = "info") {
        QString styledMessage;
        if (type == "acao") {
            styledMessage = QString("<span style='color: #4CAF50;'>[A√á√ÉO] %1</span>").arg(message);
        } else if (type == "alerta") {
            styledMessage = QString("<span style='color: #FFC107;'>[AVISO] %1</span>").arg(message);
        } else if (type == "critico") {
            styledMessage = QString("<span style='color: #F44336;'>[CR√çTICO] %1</span>").arg(message);
        } else {
            styledMessage = QString("<span style='color: #888;'>[INFO] %1</span>").arg(message);
        }
        logTextEdit->append(styledMessage);
    }

    // M√©todo para sugerir interven√ß√µes com base no estado do reservat√≥rio
    void suggestInterventions() {
        QString suggestion = "Sugest√µes de interven√ß√£o:\n";
        bool hasSuggestion = false;

        if (reservatorio->pressao_psi < 2500) {
            suggestion += "- Press√£o baixa: considere injetar √°gua ou g√°s.\n";
            suggestInputWater->setText("5000");
            suggestInputGas->setText("10000");
            hasSuggestion = true;
        }

        if (reservatorio->viscosidade_oleo_cp > 4.0) {
            suggestion += "- Viscosidade alta: considere injetar vapor para aquecer o √≥leo.\n";
            suggestInputVapor->setText("1000");
            hasSuggestion = true;
        }

        if (reservatorio->volume_gas_m3 > 8000) {
            suggestion += "- Volume de g√°s alto: considere ativar libera√ß√£o de g√°s (flare).\n";
            hasSuggestion = true;
        }

        if (!hasSuggestion) {
            suggestionExplanationLabel->setText("O sistema est√° em condi√ß√µes operacionais normais. Nenhuma interven√ß√£o √© sugerida no momento.");
            suggestInputWater->setPlaceholderText("Volume √Ågua (bbl)");
            suggestInputGas->setPlaceholderText("Volume G√°s (m¬≥)");
            suggestInputVapor->setPlaceholderText("Tempo Vapor (s)");
        } else {
            suggestionExplanationLabel->setText(suggestion);
        }
    }

    /*
    üé® ========================================================================
    M√âTODO REFATORADO: ATUALIZA√á√ÉO DE √çCONES SCADA
    ========================================================================
    
    üìö CONCEITO DE REFATORA√á√ÉO APLICADA:
    Substitui√ß√£o de condicionais tern√°rios repetitivos e complexos pelo
    m√©todo utilit√°rio determinarCorStatus(), simplificando drasticamente
    a l√≥gica de determina√ß√£o de cores.
    
    üè≠ MELHORIA INDUSTRIAL:
    ‚Ä¢ Redu√ß√£o de c√≥digo complexo para l√≥gica limpa e audit√°vel
    ‚Ä¢ Padroniza√ß√£o de thresholds de alerta/cr√≠tico
    ‚Ä¢ Facilita manuten√ß√£o e modifica√ß√£o de limites
    ‚Ä¢ Elimina possibilidade de inconsist√™ncias entre indicadores
    
    üö¶ SISTEMA DE CORES PADRONIZADO:
    Verde: Opera√ß√£o normal | Laranja: Aten√ß√£o | Vermelho: Cr√≠tico
    */
    /*
    üìä ========================================================================
    M√âTODO DE CONTROLE INTELIGENTE DE ATUALIZA√á√ÉO DOS GR√ÅFICOS
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Implementa l√≥gica de consolida√ß√£o temporal para diferentes granularidades
    de an√°lise, otimizando performance e melhorando visualiza√ß√£o conforme
    o per√≠odo selecionado pelo usu√°rio.
    
    üè≠ L√ìGICA INDUSTRIAL:
    ‚Ä¢ Tempo Real (1-5min): Todos os pontos para monitoramento operacional
    ‚Ä¢ Supervis√£o (10-30min): Consolida√ß√£o por m√©dias para an√°lise de tend√™ncia  
    ‚Ä¢ Estrat√©gico (1h-1dia): Pontos de an√°lise gerencial agregados
    
    PAR√ÇMETROS:
    ‚Ä¢ forcarAtualizacao: true para atualizar independente do per√≠odo
    */
    void atualizarGraficosSeNecessario(bool forcarAtualizacao = false) {
        double tempoAtual = obterTempoMinutos();
        double tempoDecorrido = tempoAtual - ultimoTempoGrafico;
        double periodoMinutos = periodoGraficoSegundos / 60.0;
        
        /*
        üïê VERIFICA√á√ÉO DE PERIODICIDADE:
        CORRE√á√ÉO: Se √© a primeira vez ou for√ßado, sempre atualiza
        Sen√£o, s√≥ atualiza se passou tempo suficiente
        */
        if (!forcarAtualizacao && ultimoTempoGrafico > 0.0 && tempoDecorrido < periodoMinutos) {
            return; // Ainda n√£o √© hora de atualizar
        }
        
        /*
        üìà ATUALIZA√á√ÉO DOS GR√ÅFICOS:
        Adiciona ponto atual em todos os gr√°ficos
        */
        /*
        üìä ADI√á√ÉO DE PONTOS COM ESCALAS CORRETAS:
        Alguns valores s√£o convertidos para escalas mais adequadas √† visualiza√ß√£o
        */
        producaoSeries->append(tempoAtual, reservatorio->vazao_oleo_bopd);
        pressaoSeries->append(tempoAtual, reservatorio->pressao_psi);
        volumeOleoSeries->append(tempoAtual, reservatorio->volume_oleo_bbl / 1000000.0);  // CORRE√á√ÉO: Converte para MM bbl
        temperaturaSeries->append(tempoAtual, reservatorio->temperatura_C);
        viscosidadeSeries->append(tempoAtual, reservatorio->viscosidade_oleo_cp);
        gorSeries->append(tempoAtual, reservatorio->gas_oil_ratio);
        worSeries->append(tempoAtual, reservatorio->water_oil_ratio);
        
        // Atualizar timestamp da √∫ltima atualiza√ß√£o
        ultimoTempoGrafico = tempoAtual;
        
        /*
        üìè EXPANS√ÉO DIN√ÇMICA DO EIXO X:
        Aumenta o range do eixo X quando necess√°rio para acomodar novos dados
        */
        atualizarRangeTempoGraficos(tempoAtual);
        
        /*
        üêõ LOG DE DEBUG (apenas para desenvolvimento):
        Confirma que os gr√°ficos est√£o sendo atualizados
        */
        if (forcarAtualizacao) {
            logMessage(QString("üìä Gr√°ficos atualizados (for√ßado) - Tempo: %1 min").arg(tempoAtual, 0, 'f', 1), "info");
        } else {
            logMessage(QString("üìä Gr√°ficos atualizados - Tempo: %1 min (Œî%2 min)")
                      .arg(tempoAtual, 0, 'f', 1).arg(tempoDecorrido, 0, 'f', 1), "info");
        }
        
        /*
        üóÉÔ∏è OTIMIZA√á√ÉO DE PERFORMANCE:
        Para per√≠odos longos, limita o n√∫mero de pontos nos gr√°ficos
        para evitar sobrecarga visual e de mem√≥ria
        */
        if (periodoGraficoSegundos >= 1800) { // 30 minutos ou mais
            limitarPontosGraficos(200); // M√°ximo 200 pontos vis√≠veis
        } else if (periodoGraficoSegundos >= 300) { // 5 minutos ou mais
            limitarPontosGraficos(500); // M√°ximo 500 pontos vis√≠veis
        }
        // Para per√≠odos menores, mant√©m todos os pontos (monitoramento detalhado)
    }
    
    /*
    üóÉÔ∏è ========================================================================
    M√âTODO DE OTIMIZA√á√ÉO: LIMITA√á√ÉO DE PONTOS NOS GR√ÅFICOS
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Remove pontos mais antigos dos gr√°ficos quando excede o limite,
    mantendo performance e evitando sobrecarga visual em an√°lises
    de longo prazo.
    
    üè≠ BENEF√çCIO INDUSTRIAL:
    Sistemas SCADA reais usam esta t√©cnica para manter responsividade
    mesmo com anos de dados hist√≥ricos.
    */
    /*
    üìè ========================================================================
    M√âTODO DE EXPANS√ÉO DIN√ÇMICA DO EIXO TEMPORAL
    ========================================================================
    
    üìö CONCEITO EDUCACIONAL:
    Expande automaticamente o range do eixo X (tempo) quando novos dados
    excedem o range atual, mantendo visibilidade adequada dos gr√°ficos.
    
    üè≠ FUNCIONALIDADE SCADA:
    Sistemas industriais reais adaptam escalas dinamicamente para
    acomodar dados de diferentes per√≠odos operacionais.
    */
    void atualizarRangeTempoGraficos(double tempoAtual) {
        // Lista de todos os gr√°ficos criados (precisamos acess√°-los)
        QList<QLineSeries*> todasSeries = {
            producaoSeries, pressaoSeries, volumeOleoSeries, 
            temperaturaSeries, viscosidadeSeries, gorSeries, worSeries
        };
        
        // Expandir eixo X se necess√°rio (com margem de 20%)
        double rangeMinimo = tempoAtual * 1.2;  // 20% de margem
        
        // Garantir range m√≠nimo de 10 minutos para visualiza√ß√£o adequada
        if (rangeMinimo < 10.0) rangeMinimo = 10.0;
        
        // Atualizar eixo X de todas as s√©ries
        for (QLineSeries* series : todasSeries) {
            if (series && series->chart() && !series->chart()->axes(Qt::Horizontal).isEmpty()) {
                QValueAxis* axisX = qobject_cast<QValueAxis*>(series->chart()->axes(Qt::Horizontal).first());
                if (axisX && axisX->max() < rangeMinimo) {
                    axisX->setMax(rangeMinimo);
                    // Ajustar n√∫mero de ticks baseado no range
                    int tickCount = qMin(11, qMax(5, static_cast<int>(rangeMinimo / 10.0) + 1));
                    axisX->setTickCount(tickCount);
                }
            }
        }
    }

    void limitarPontosGraficos(int maxPontos) {
        auto limitarSerie = [maxPontos](QLineSeries* series) {
            while (series->count() > maxPontos) {
                series->remove(0); // Remove o ponto mais antigo
            }
        };
        
        limitarSerie(producaoSeries);
        limitarSerie(pressaoSeries);
        limitarSerie(volumeOleoSeries);
        limitarSerie(temperaturaSeries);
        limitarSerie(viscosidadeSeries);
        limitarSerie(gorSeries);
        limitarSerie(worSeries);
    }

    void updateIcons() {
        /*
        üå°Ô∏è √çCONE DE PRESS√ÉO (REFATORADO):
        Usa m√©todo utilit√°rio com l√≥gica invertida (press√£o baixa = cr√≠tica)
        */
        QString pressaoColor = determinarCorStatus(
            reservatorio->pressao_psi,
            2500.0,  // Limite de alerta (aten√ß√£o)  
            reservatorio->LIMITE_PRESSAO_CRITICO_MIN,  // Limite cr√≠tico
            true     // Invertido: valores baixos s√£o cr√≠ticos
        );
        pressaoIconLabel->setPixmap(createIcon(pressaoColor, iconPressaoPath).pixmap(48, 48));

        /*
        üå°Ô∏è √çCONE DE TEMPERATURA (REFATORADO):
        Usa m√©todo utilit√°rio com l√≥gica normal (temperatura alta = cr√≠tica)
        */
        QString temperaturaColor = determinarCorStatus(
            reservatorio->temperatura_C,
            150.0,  // Limite de alerta
            180.0,  // Limite cr√≠tico
            false   // Normal: valores altos s√£o cr√≠ticos
        );
        temperaturaIconLabel->setPixmap(createIcon(temperaturaColor, iconTemperaturaPath).pixmap(48, 48));

        /*
        üö¢ √çCONE DE VAZ√ÉO (REFATORADO):
        Usa m√©todo utilit√°rio com l√≥gica invertida (vaz√£o baixa = cr√≠tica)
        */
        QString vazaoColor = determinarCorStatus(
            reservatorio->vazao_oleo_bopd,
            12000.0,  // Limite de alerta (below optimal)
            reservatorio->PRODUCAO_MINIMA_ACEITAVEL_BOPD,  // Limite cr√≠tico
            true      // Invertido: valores baixos s√£o cr√≠ticos
        );
        vazaoIconLabel->setPixmap(createIcon(vazaoColor, iconVazaoPath).pixmap(48, 48));

        /*
        ‚õΩ √çCONE DE GOR (REFATORADO):
        Usa m√©todo utilit√°rio com l√≥gica normal (GOR alto = cr√≠tico)
        */
        QString gorColor = determinarCorStatus(
            reservatorio->gas_oil_ratio,
            500.0,  // Limite de alerta
            reservatorio->LIMITE_GOR_CRITICO,  // Limite cr√≠tico
            false   // Normal: valores altos s√£o cr√≠ticos
        );
        gorIconLabel->setPixmap(createIcon(gorColor, iconGorPath).pixmap(48, 48));

        /*
        üîç √çCONE DE STATUS GERAL (L√ìGICA ESPEC√çFICA):
        Baseado diretamente no flag de emerg√™ncia
        */
        QString statusColor = reservatorio->em_emergencia ? "red" : "green";
        statusIconLabel->setPixmap(createIcon(statusColor, iconStatusPath).pixmap(48, 48));
    }
};

// Inclus√£o necess√°ria para compila√ß√£o Qt (Meta-Object Compiler)
#include "main.moc"

/*
üéì ================================================================================
üöÄ FUN√á√ÉO MAIN - PONTO DE ENTRADA DO SIMULADOR EDUCACIONAL ATS-7B
================================================================================

üìö CONCEITO EDUCACIONAL:
Esta √© a fun√ß√£o principal do programa, chamada automaticamente pelo sistema
operacional quando o usu√°rio executa o simulador. √â o "port√£o de entrada"
de qualquer aplica√ß√£o C++.

üîß RESPONSABILIDADES DA FUN√á√ÉO MAIN:
1. Inicializa√ß√£o do framework Qt5
2. Configura√ß√£o de atributos do sistema gr√°fico
3. Cria√ß√£o e exibi√ß√£o da janela principal
4. Entrada no loop principal de eventos Qt
5. Retorno do c√≥digo de status para o sistema operacional

üíª PAR√ÇMETROS:
‚Ä¢ argc: N√∫mero de argumentos da linha de comando
‚Ä¢ argv: Array de strings com os argumentos da linha de comando

üì± HIGH DPI SUPPORT:
Configura√ß√£o para monitores modernos (4K, Retina, etc.) comuns em
esta√ß√µes de trabalho da ind√∫stria petrol√≠fera.

================================================================================
*/

int main(int argc, char *argv[]) {
    /*
    üñ•Ô∏è CONFIGURA√á√ÉO PARA MONITORES HIGH-DPI:
    
    üìö CONCEITO: Monitores 4K/Retina requerem configura√ß√µes especiais
    para que texto e √≠cones tenham tamanho adequado. Essencial em
    esta√ß√µes SCADA modernas onde operadores trabalham 12h/turno.
    */
    QApplication::setAttribute(Qt::AA_EnableHighDpiScaling, true);   // Escalonamento autom√°tico
    QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps, true);      // √çcones de alta resolu√ß√£o
    
    /*
    üèóÔ∏è CRIA√á√ÉO DA APLICA√á√ÉO Qt:
    
    üìö CONCEITO: QApplication √© o "cora√ß√£o" de qualquer programa Qt.
    Gerencia janelas, eventos, recursos e integra√ß√£o com o OS.
    
    PAR√ÇMETROS: argc e argv permitem configura√ß√£o via linha de comando
    */
    QApplication a(argc, argv);
    
    /*
    üìù IDENTIFICA√á√ÉO DA APLICA√á√ÉO:
    
    üìö CONCEITO: Estas informa√ß√µes aparecem na barra de t√≠tulo,
    task manager e s√£o usadas pelo sistema operacional para
    organizar logs e configura√ß√µes.
    */
    a.setApplicationName("Simulador ATS-7B Atl√¢ntida Oriental");  // Nome completo
    a.setApplicationVersion("1.0");                         // Vers√£o para auditoria
    
    /*
    ü™ü CRIA√á√ÉO DA JANELA PRINCIPAL:
    
    üìö CONCEITO: SimuladorWindow √© nossa classe customizada que
    cont√©m toda a interface SCADA e l√≥gica de simula√ß√£o.
    */
    SimuladorWindow w;  // Cria objeto na stack (destrui√ß√£o autom√°tica)
    
    /*
    üëÅÔ∏è EXIBI√á√ÉO DA JANELA:
    
    üìö CONCEITO: show() torna a janela vis√≠vel na tela.
    Em sistemas reais, interfaces SCADA s√£o exibidas em
    monitores dedicados na sala de controle.
    */
    w.show();
    
    /*
    ‚ö° PROCESSAMENTO INICIAL DE EVENTOS:
    
    üìö CONCEITO: processEvents() for√ßa o Qt a processar
    todos os eventos pendentes (desenhar janela, conectar
    sinais, etc.) antes de continuar.
    
    üí° IMPORT√ÇNCIA: Garante que a interface esteja 100%
    pronta antes de entrar no loop principal.
    */
    a.processEvents();
    
    /*
    üîÑ ENTRADA NO LOOP PRINCIPAL DE EVENTOS:
    
    üìö CONCEITO FUNDAMENTAL: a.exec() √© onde o programa "vive".
    Esta fun√ß√£o s√≥ retorna quando o usu√°rio fecha a aplica√ß√£o.
    
    Durante exec():
    ‚Ä¢ Qt processa cliques do mouse
    ‚Ä¢ Qt processa teclas pressionadas  
    ‚Ä¢ Qt atualiza gr√°ficos e anima√ß√µes
    ‚Ä¢ Qt chama nossos m√©todos (slots) quando necess√°rio
    ‚Ä¢ Timer da simula√ß√£o dispara a cada 5 segundos
    
    üî¢ C√ìDIGO DE RETORNO:
    ‚Ä¢ 0 = Programa terminou normalmente
    ‚Ä¢ != 0 = Erro durante execu√ß√£o
    
    O sistema operacional usa este c√≥digo para detectar crashes.
    */
    return a.exec();  // AQUI O PROGRAMA FICA RODANDO AT√â O USU√ÅRIO FECHAR
    
    /*
    üéØ FLUXO EDUCACIONAL COMPLETO:
    
    1. main() inicia o programa
    2. Qt √© configurado e inicializado
    3. SimuladorWindow √© criado (construtor chamado)
    4. Interface SCADA √© montada (setupUI)
    5. Gr√°ficos s√£o configurados (setupCharts)  
    6. Timer inicia simula√ß√£o a cada 5s (gameLoop)
    7. Usu√°rio interage com controles
    8. Dados s√£o coletados e exibidos em tempo real
    9. Usu√°rio fecha programa (destrutor chamado)
    10. main() retorna 0 para o sistema operacional
    
    üìö ESTA √â A ESS√äNCIA DE QUALQUER SISTEMA SCADA INDUSTRIAL!
    */
}
